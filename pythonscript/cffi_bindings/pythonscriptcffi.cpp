#define _CFFI_USE_EMBEDDING
#define _CFFI_

/* We try to define Py_LIMITED_API before including Python.h.

   Mess: we can only define it if Py_DEBUG, Py_TRACE_REFS and
   Py_REF_DEBUG are not defined.  This is a best-effort approximation:
   we can learn about Py_DEBUG from pyconfig.h, but it is unclear if
   the same works for the other two macros.  Py_DEBUG implies them,
   but not the other way around.
*/
#ifndef _CFFI_USE_EMBEDDING
#include <pyconfig.h>
#if !defined(Py_DEBUG) && !defined(Py_TRACE_REFS) && !defined(Py_REF_DEBUG)
#define Py_LIMITED_API
#endif
#endif

#include <Python.h>
#ifdef __cplusplus
extern "C" {
#endif

/* This part is from file 'cffi/parse_c_type.h'.  It is copied at the
   beginning of C sources generated by CFFI's ffi.set_source(). */

typedef void *_cffi_opcode_t;

#define _CFFI_OP(opcode, arg) (_cffi_opcode_t)(opcode | (((uintptr_t)(arg)) << 8))
#define _CFFI_GETOP(cffi_opcode) ((unsigned char)(uintptr_t)cffi_opcode)
#define _CFFI_GETARG(cffi_opcode) (((intptr_t)cffi_opcode) >> 8)

#define _CFFI_OP_PRIMITIVE 1
#define _CFFI_OP_POINTER 3
#define _CFFI_OP_ARRAY 5
#define _CFFI_OP_OPEN_ARRAY 7
#define _CFFI_OP_STRUCT_UNION 9
#define _CFFI_OP_ENUM 11
#define _CFFI_OP_FUNCTION 13
#define _CFFI_OP_FUNCTION_END 15
#define _CFFI_OP_NOOP 17
#define _CFFI_OP_BITFIELD 19
#define _CFFI_OP_TYPENAME 21
#define _CFFI_OP_CPYTHON_BLTN_V 23 // varargs
#define _CFFI_OP_CPYTHON_BLTN_N 25 // noargs
#define _CFFI_OP_CPYTHON_BLTN_O 27 // O  (i.e. a single arg)
#define _CFFI_OP_CONSTANT 29
#define _CFFI_OP_CONSTANT_INT 31
#define _CFFI_OP_GLOBAL_VAR 33
#define _CFFI_OP_DLOPEN_FUNC 35
#define _CFFI_OP_DLOPEN_CONST 37
#define _CFFI_OP_GLOBAL_VAR_F 39
#define _CFFI_OP_EXTERN_PYTHON 41

#define _CFFI_PRIM_VOID 0
#define _CFFI_PRIM_BOOL 1
#define _CFFI_PRIM_CHAR 2
#define _CFFI_PRIM_SCHAR 3
#define _CFFI_PRIM_UCHAR 4
#define _CFFI_PRIM_SHORT 5
#define _CFFI_PRIM_USHORT 6
#define _CFFI_PRIM_INT 7
#define _CFFI_PRIM_UINT 8
#define _CFFI_PRIM_LONG 9
#define _CFFI_PRIM_ULONG 10
#define _CFFI_PRIM_LONGLONG 11
#define _CFFI_PRIM_ULONGLONG 12
#define _CFFI_PRIM_FLOAT 13
#define _CFFI_PRIM_DOUBLE 14
#define _CFFI_PRIM_LONGDOUBLE 15

#define _CFFI_PRIM_WCHAR 16
#define _CFFI_PRIM_INT8 17
#define _CFFI_PRIM_UINT8 18
#define _CFFI_PRIM_INT16 19
#define _CFFI_PRIM_UINT16 20
#define _CFFI_PRIM_INT32 21
#define _CFFI_PRIM_UINT32 22
#define _CFFI_PRIM_INT64 23
#define _CFFI_PRIM_UINT64 24
#define _CFFI_PRIM_INTPTR 25
#define _CFFI_PRIM_UINTPTR 26
#define _CFFI_PRIM_PTRDIFF 27
#define _CFFI_PRIM_SIZE 28
#define _CFFI_PRIM_SSIZE 29
#define _CFFI_PRIM_INT_LEAST8 30
#define _CFFI_PRIM_UINT_LEAST8 31
#define _CFFI_PRIM_INT_LEAST16 32
#define _CFFI_PRIM_UINT_LEAST16 33
#define _CFFI_PRIM_INT_LEAST32 34
#define _CFFI_PRIM_UINT_LEAST32 35
#define _CFFI_PRIM_INT_LEAST64 36
#define _CFFI_PRIM_UINT_LEAST64 37
#define _CFFI_PRIM_INT_FAST8 38
#define _CFFI_PRIM_UINT_FAST8 39
#define _CFFI_PRIM_INT_FAST16 40
#define _CFFI_PRIM_UINT_FAST16 41
#define _CFFI_PRIM_INT_FAST32 42
#define _CFFI_PRIM_UINT_FAST32 43
#define _CFFI_PRIM_INT_FAST64 44
#define _CFFI_PRIM_UINT_FAST64 45
#define _CFFI_PRIM_INTMAX 46
#define _CFFI_PRIM_UINTMAX 47

#define _CFFI__NUM_PRIM 48
#define _CFFI__UNKNOWN_PRIM (-1)
#define _CFFI__UNKNOWN_FLOAT_PRIM (-2)
#define _CFFI__UNKNOWN_LONG_DOUBLE (-3)

#define _CFFI__IO_FILE_STRUCT (-1)

struct _cffi_global_s {
	const char *name;
	void *address;
	_cffi_opcode_t type_op;
	void *size_or_direct_fn; // OP_GLOBAL_VAR: size, or 0 if unknown
	// OP_CPYTHON_BLTN_*: addr of direct function
};

struct _cffi_getconst_s {
	unsigned long long value;
	const struct _cffi_type_context_s *ctx;
	int gindex;
};

struct _cffi_struct_union_s {
	const char *name;
	int type_index; // -> _cffi_types, on a OP_STRUCT_UNION
	int flags; // _CFFI_F_* flags below
	size_t size;
	int alignment;
	int first_field_index; // -> _cffi_fields array
	int num_fields;
};
#define _CFFI_F_UNION 0x01 // is a union, not a struct
#define _CFFI_F_CHECK_FIELDS 0x02 // complain if fields are not in the
// "standard layout" or if some are missing
#define _CFFI_F_PACKED 0x04 // for CHECK_FIELDS, assume a packed struct
#define _CFFI_F_EXTERNAL 0x08 // in some other ffi.include()
#define _CFFI_F_OPAQUE 0x10 // opaque

struct _cffi_field_s {
	const char *name;
	size_t field_offset;
	size_t field_size;
	_cffi_opcode_t field_type_op;
};

struct _cffi_enum_s {
	const char *name;
	int type_index; // -> _cffi_types, on a OP_ENUM
	int type_prim; // _CFFI_PRIM_xxx
	const char *enumerators; // comma-delimited string
};

struct _cffi_typename_s {
	const char *name;
	int type_index; /* if opaque, points to a possibly artificial
                         OP_STRUCT which is itself opaque */
};

struct _cffi_type_context_s {
	_cffi_opcode_t *types;
	const struct _cffi_global_s *globals;
	const struct _cffi_field_s *fields;
	const struct _cffi_struct_union_s *struct_unions;
	const struct _cffi_enum_s *enums;
	const struct _cffi_typename_s *typenames;
	int num_globals;
	int num_struct_unions;
	int num_enums;
	int num_typenames;
	const char *const *includes;
	int num_types;
	int flags; /* future extension */
};

struct _cffi_parse_info_s {
	const struct _cffi_type_context_s *ctx;
	_cffi_opcode_t *output;
	unsigned int output_size;
	size_t error_location;
	const char *error_message;
};

struct _cffi_externpy_s {
	const char *name;
	size_t size_of_result;
	void *reserved1, *reserved2;
};

#ifdef _CFFI_INTERNAL
static int parse_c_type(struct _cffi_parse_info_s *info, const char *input);
static int search_in_globals(const struct _cffi_type_context_s *ctx,
		const char *search, size_t search_len);
static int search_in_struct_unions(const struct _cffi_type_context_s *ctx,
		const char *search, size_t search_len);
#endif
#include <stddef.h>

/* this block of #ifs should be kept exactly identical between
   c/_cffi_backend.c, cffi/vengine_cpy.py, cffi/vengine_gen.py
   and cffi/_cffi_include.h */
#if defined(_MSC_VER)
#include <malloc.h> /* for alloca() */
#if _MSC_VER < 1600 /* MSVC < 2010 */
typedef __int8 int8_t;
typedef __int16 int16_t;
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int8 uint8_t;
typedef unsigned __int16 uint16_t;
typedef unsigned __int32 uint32_t;
typedef unsigned __int64 uint64_t;
typedef __int8 int_least8_t;
typedef __int16 int_least16_t;
typedef __int32 int_least32_t;
typedef __int64 int_least64_t;
typedef unsigned __int8 uint_least8_t;
typedef unsigned __int16 uint_least16_t;
typedef unsigned __int32 uint_least32_t;
typedef unsigned __int64 uint_least64_t;
typedef __int8 int_fast8_t;
typedef __int16 int_fast16_t;
typedef __int32 int_fast32_t;
typedef __int64 int_fast64_t;
typedef unsigned __int8 uint_fast8_t;
typedef unsigned __int16 uint_fast16_t;
typedef unsigned __int32 uint_fast32_t;
typedef unsigned __int64 uint_fast64_t;
typedef __int64 intmax_t;
typedef unsigned __int64 uintmax_t;
#else
#include <stdint.h>
#endif
#if _MSC_VER < 1800 /* MSVC < 2013 */
#ifndef __cplusplus
typedef unsigned char _Bool;
#endif
#endif
#else
#include <stdint.h>
#if (defined(__SVR4) && defined(__sun)) || defined(_AIX) || defined(__hpux)
#include <alloca.h>
#endif
#endif

#ifdef __GNUC__
#define _CFFI_UNUSED_FN __attribute__((unused))
#else
#define _CFFI_UNUSED_FN /* nothing */
#endif

#ifdef __cplusplus
#ifndef _Bool
typedef bool _Bool; /* semi-hackish: C++ has no _Bool; bool is builtin */
#endif
#endif

/**********  CPython-specific section  **********/
#ifndef PYPY_VERSION

#if PY_MAJOR_VERSION >= 3
#define PyInt_FromLong PyLong_FromLong
#endif

#define _cffi_from_c_double PyFloat_FromDouble
#define _cffi_from_c_float PyFloat_FromDouble
#define _cffi_from_c_long PyInt_FromLong
#define _cffi_from_c_ulong PyLong_FromUnsignedLong
#define _cffi_from_c_longlong PyLong_FromLongLong
#define _cffi_from_c_ulonglong PyLong_FromUnsignedLongLong

#define _cffi_to_c_double PyFloat_AsDouble
#define _cffi_to_c_float PyFloat_AsDouble

#define _cffi_from_c_int(x, type)                                                         \
	(((type)-1) > 0 ? /* unsigned */                                                      \
					(sizeof(type) < sizeof(long) ?                                        \
									PyInt_FromLong((long)x) :                             \
									sizeof(type) == sizeof(long) ?                        \
									PyLong_FromUnsignedLong((unsigned long)x) :           \
									PyLong_FromUnsignedLongLong((unsigned long long)x)) : \
					(sizeof(type) <= sizeof(long) ?                                       \
									PyInt_FromLong((long)x) :                             \
									PyLong_FromLongLong((long long)x)))

#define _cffi_to_c_int(o, type)                                                                                                                                    \
	((type)(                                                                                                                                                       \
			sizeof(type) == 1 ? (((type)-1) > 0 ? (type)_cffi_to_c_u8(o) : (type)_cffi_to_c_i8(o)) :                                                               \
								sizeof(type) == 2 ? (((type)-1) > 0 ? (type)_cffi_to_c_u16(o) : (type)_cffi_to_c_i16(o)) :                                         \
													sizeof(type) == 4 ? (((type)-1) > 0 ? (type)_cffi_to_c_u32(o) : (type)_cffi_to_c_i32(o)) :                     \
																		sizeof(type) == 8 ? (((type)-1) > 0 ? (type)_cffi_to_c_u64(o) : (type)_cffi_to_c_i64(o)) : \
																							(Py_FatalError("unsupported size for type " #type), (type)0)))

#define _cffi_to_c_i8 \
	((int (*)(PyObject *))_cffi_exports[1])
#define _cffi_to_c_u8 \
	((int (*)(PyObject *))_cffi_exports[2])
#define _cffi_to_c_i16 \
	((int (*)(PyObject *))_cffi_exports[3])
#define _cffi_to_c_u16 \
	((int (*)(PyObject *))_cffi_exports[4])
#define _cffi_to_c_i32 \
	((int (*)(PyObject *))_cffi_exports[5])
#define _cffi_to_c_u32 \
	((unsigned int (*)(PyObject *))_cffi_exports[6])
#define _cffi_to_c_i64 \
	((long long (*)(PyObject *))_cffi_exports[7])
#define _cffi_to_c_u64 \
	((unsigned long long (*)(PyObject *))_cffi_exports[8])
#define _cffi_to_c_char \
	((int (*)(PyObject *))_cffi_exports[9])
#define _cffi_from_c_pointer \
	((PyObject * (*)(char *, struct _cffi_ctypedescr *))_cffi_exports[10])
#define _cffi_to_c_pointer \
	((char *(*)(PyObject *, struct _cffi_ctypedescr *))_cffi_exports[11])
#define _cffi_get_struct_layout \
	not used any more
#define _cffi_restore_errno \
	((void (*)(void))_cffi_exports[13])
#define _cffi_save_errno \
	((void (*)(void))_cffi_exports[14])
#define _cffi_from_c_char \
	((PyObject * (*)(char))_cffi_exports[15])
#define _cffi_from_c_deref \
	((PyObject * (*)(char *, struct _cffi_ctypedescr *))_cffi_exports[16])
#define _cffi_to_c \
	((int (*)(char *, struct _cffi_ctypedescr *, PyObject *))_cffi_exports[17])
#define _cffi_from_c_struct \
	((PyObject * (*)(char *, struct _cffi_ctypedescr *))_cffi_exports[18])
#define _cffi_to_c_wchar_t \
	((wchar_t(*)(PyObject *))_cffi_exports[19])
#define _cffi_from_c_wchar_t \
	((PyObject * (*)(wchar_t))_cffi_exports[20])
#define _cffi_to_c_long_double \
	((long double (*)(PyObject *))_cffi_exports[21])
#define _cffi_to_c__Bool \
	((_Bool(*)(PyObject *))_cffi_exports[22])
#define _cffi_prepare_pointer_call_argument    \
	((Py_ssize_t(*)(struct _cffi_ctypedescr *, \
			PyObject *, char **))_cffi_exports[23])
#define _cffi_convert_array_from_object \
	((int (*)(char *, struct _cffi_ctypedescr *, PyObject *))_cffi_exports[24])
#define _CFFI_CPIDX 25
#define _cffi_call_python \
	((void (*)(struct _cffi_externpy_s *, char *))_cffi_exports[_CFFI_CPIDX])
#define _CFFI_NUM_EXPORTS 26

struct _cffi_ctypedescr;

static void *_cffi_exports[_CFFI_NUM_EXPORTS];

#define _cffi_type(index) (                                 \
		assert((((uintptr_t)_cffi_types[index]) & 1) == 0), \
		(struct _cffi_ctypedescr *)_cffi_types[index])

static PyObject *_cffi_init(const char *module_name, Py_ssize_t version,
		const struct _cffi_type_context_s *ctx) {
	PyObject *module, *o_arg, *new_module;
	void *raw[] = {
		(void *)module_name,
		(void *)version,
		(void *)_cffi_exports,
		(void *)ctx,
	};

	module = PyImport_ImportModule("_cffi_backend");
	if (module == NULL)
		goto failure;

	o_arg = PyLong_FromVoidPtr((void *)raw);
	if (o_arg == NULL)
		goto failure;

	new_module = PyObject_CallMethod(
			module, (char *)"_init_cffi_1_0_external_module", (char *)"O", o_arg);

	Py_DECREF(o_arg);
	Py_DECREF(module);
	return new_module;

failure:
	Py_XDECREF(module);
	return NULL;
}

/**********  end CPython-specific section  **********/
#else
_CFFI_UNUSED_FN
static void (*_cffi_call_python_org)(struct _cffi_externpy_s *, char *);
#define _cffi_call_python _cffi_call_python_org
#endif

#define _cffi_array_len(array) (sizeof(array) / sizeof((array)[0]))

#define _cffi_prim_int(size, sign)                                                                             \
	((size) == 1 ? ((sign) ? _CFFI_PRIM_INT8 : _CFFI_PRIM_UINT8) :                                             \
				   (size) == 2 ? ((sign) ? _CFFI_PRIM_INT16 : _CFFI_PRIM_UINT16) :                             \
								 (size) == 4 ? ((sign) ? _CFFI_PRIM_INT32 : _CFFI_PRIM_UINT32) :               \
											   (size) == 8 ? ((sign) ? _CFFI_PRIM_INT64 : _CFFI_PRIM_UINT64) : \
															 _CFFI__UNKNOWN_PRIM)

#define _cffi_prim_float(size)                                                                                         \
	((size) == sizeof(float) ? _CFFI_PRIM_FLOAT :                                                                      \
							   (size) == sizeof(double) ? _CFFI_PRIM_DOUBLE :                                          \
														  (size) == sizeof(long double) ? _CFFI__UNKNOWN_LONG_DOUBLE : \
																						  _CFFI__UNKNOWN_FLOAT_PRIM)

#define _cffi_check_int(got, got_nonpos, expected) \
	((got_nonpos) == (expected <= 0) &&            \
			(got) == (unsigned long long)expected)

#ifdef MS_WIN32
#define _cffi_stdcall __stdcall
#else
#define _cffi_stdcall /* nothing */
#endif

#ifdef __cplusplus
}
#endif

#define _CFFI_MODULE_NAME  "pythonscriptcffi"
#define _CFFI_PYTHON_STARTUP_CODE  "code = []\n" \
"for to_include in ('embedding_init_code.inc.py', 'mod_godot.inc.py', 'builtin_node_path.inc.py', 'builtin_rect2.inc.py', 'builtin_vector2.inc.py', 'builtin_vector3.inc.py', 'builtin_basis.inc.py', 'builtin_quat.inc.py', 'tools.inc.py', 'mod_godot_bindings.inc.py'):\n" \
"    with open('%s/%s' % ('/home/emmanuel/projects/godot-python-cffi/pythonscript/cffi_bindings', to_include), 'r') as fd:\n" \
"        code.append(fd.read())\n" \
"exec('\\n'.join(code))\n"
#ifdef PYPY_VERSION
# define _CFFI_PYTHON_STARTUP_FUNC  _cffi_pypyinit_pythonscriptcffi
#elif PY_MAJOR_VERSION >= 3
# define _CFFI_PYTHON_STARTUP_FUNC  PyInit_pythonscriptcffi
#else
# define _CFFI_PYTHON_STARTUP_FUNC  initpythonscriptcffi
#endif

/***** Support code for embedding *****/

#if defined(_MSC_VER)
#define CFFI_DLLEXPORT __declspec(dllexport)
#elif defined(__GNUC__)
#define CFFI_DLLEXPORT __attribute__((visibility("default")))
#else
#define CFFI_DLLEXPORT /* nothing */
#endif

/* There are two global variables of type _cffi_call_python_fnptr:

   * _cffi_call_python, which we declare just below, is the one called
     by ``extern "Python"`` implementations.

   * _cffi_call_python_org, which on CPython is actually part of the
     _cffi_exports[] array, is the function pointer copied from
     _cffi_backend.

   After initialization is complete, both are equal.  However, the
   first one remains equal to &_cffi_start_and_call_python until the
   very end of initialization, when we are (or should be) sure that
   concurrent threads also see a completely initialized world, and
   only then is it changed.
*/
#undef _cffi_call_python
typedef void (*_cffi_call_python_fnptr)(struct _cffi_externpy_s *, char *);
static void _cffi_start_and_call_python(struct _cffi_externpy_s *, char *);
static _cffi_call_python_fnptr _cffi_call_python = &_cffi_start_and_call_python;

#ifndef _MSC_VER
/* --- Assuming a GCC not infinitely old --- */
#define cffi_compare_and_swap(l, o, n) __sync_bool_compare_and_swap(l, o, n)
#define cffi_write_barrier() __sync_synchronize()
#if !defined(__amd64__) && !defined(__x86_64__) && \
		!defined(__i386__) && !defined(__i386)
#define cffi_read_barrier() __sync_synchronize()
#else
#define cffi_read_barrier() (void)0
#endif
#else
/* --- Windows threads version --- */
#include <Windows.h>
#define cffi_compare_and_swap(l, o, n) \
	(InterlockedCompareExchangePointer(l, n, o) == (o))
#define cffi_write_barrier() InterlockedCompareExchange(&_cffi_dummy, 0, 0)
#define cffi_read_barrier() (void)0
static volatile LONG _cffi_dummy;
#endif

#ifdef WITH_THREAD
#ifndef _MSC_VER
#include <pthread.h>
static pthread_mutex_t _cffi_embed_startup_lock;
#else
static CRITICAL_SECTION _cffi_embed_startup_lock;
#endif
static char _cffi_embed_startup_lock_ready = 0;
#endif

static void _cffi_acquire_reentrant_mutex(void) {
	static void *volatile lock = NULL;

	while (!cffi_compare_and_swap(&lock, NULL, (void *)1)) {
		/* should ideally do a spin loop instruction here, but
           hard to do it portably and doesn't really matter I
           think: pthread_mutex_init() should be very fast, and
           this is only run at start-up anyway. */
	}

#ifdef WITH_THREAD
	if (!_cffi_embed_startup_lock_ready) {
#ifndef _MSC_VER
		pthread_mutexattr_t attr;
		pthread_mutexattr_init(&attr);
		pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
		pthread_mutex_init(&_cffi_embed_startup_lock, &attr);
#else
		InitializeCriticalSection(&_cffi_embed_startup_lock);
#endif
		_cffi_embed_startup_lock_ready = 1;
	}
#endif

	while (!cffi_compare_and_swap(&lock, (void *)1, NULL))
		;

#ifndef _MSC_VER
	pthread_mutex_lock(&_cffi_embed_startup_lock);
#else
	EnterCriticalSection(&_cffi_embed_startup_lock);
#endif
}

static void _cffi_release_reentrant_mutex(void) {
#ifndef _MSC_VER
	pthread_mutex_unlock(&_cffi_embed_startup_lock);
#else
	LeaveCriticalSection(&_cffi_embed_startup_lock);
#endif
}

/**********  CPython-specific section  **********/
#ifndef PYPY_VERSION

#define _cffi_call_python_org _cffi_exports[_CFFI_CPIDX]

PyMODINIT_FUNC _CFFI_PYTHON_STARTUP_FUNC(void); /* forward */

static void _cffi_py_initialize(void) {
	/* XXX use initsigs=0, which "skips initialization registration of
       signal handlers, which might be useful when Python is
       embedded" according to the Python docs.  But review and think
       if it should be a user-controllable setting.

       XXX we should also give a way to write errors to a buffer
       instead of to stderr.

       XXX if importing 'site' fails, CPython (any version) calls
       exit().  Should we try to work around this behavior here?
    */
	Py_InitializeEx(0);
}

static int _cffi_initialize_python(void) {
	/* This initializes Python, imports _cffi_backend, and then the
       present .dll/.so is set up as a CPython C extension module.
    */
	int result;
	PyGILState_STATE state;
	PyObject *pycode = NULL, *global_dict = NULL, *x;

#if PY_MAJOR_VERSION >= 3
/* see comments in _cffi_carefully_make_gil() about the
       Python2/Python3 difference 
    */
#else
	/* Acquire the GIL.  We have no threadstate here.  If Python is 
       already initialized, it is possible that there is already one
       existing for this thread, but it is not made current now.
    */
	PyEval_AcquireLock();

	_cffi_py_initialize();

	/* The Py_InitializeEx() sometimes made a threadstate for us, but
       not always.  Indeed Py_InitializeEx() could be called and do
       nothing.  So do we have a threadstate, or not?  We don't know,
       but we can replace it with NULL in all cases.
    */
	(void)PyThreadState_Swap(NULL);

	/* Now we can release the GIL and re-acquire immediately using the
       logic of PyGILState(), which handles making or installing the
       correct threadstate.
    */
	PyEval_ReleaseLock();
#endif
	state = PyGILState_Ensure();

	/* Call the initxxx() function from the present module.  It will
       create and initialize us as a CPython extension module, instead
       of letting the startup Python code do it---it might reimport
       the same .dll/.so and get maybe confused on some platforms.
       It might also have troubles locating the .dll/.so again for all
       I know.
    */
	(void)_CFFI_PYTHON_STARTUP_FUNC();
	if (PyErr_Occurred())
		goto error;

	/* Now run the Python code provided to ffi.embedding_init_code().
     */
	pycode = Py_CompileString(_CFFI_PYTHON_STARTUP_CODE,
			"<init code for '" _CFFI_MODULE_NAME "'>",
			Py_file_input);
	if (pycode == NULL)
		goto error;
	global_dict = PyDict_New();
	if (global_dict == NULL)
		goto error;
	if (PyDict_SetItemString(global_dict, "__builtins__",
				PyThreadState_GET()->interp->builtins) < 0)
		goto error;
	x = PyEval_EvalCode(
#if PY_MAJOR_VERSION < 3
			(PyCodeObject *)
#endif
					pycode,
			global_dict, global_dict);
	if (x == NULL)
		goto error;
	Py_DECREF(x);

	/* Done!  Now if we've been called from
       _cffi_start_and_call_python() in an ``extern "Python"``, we can
       only hope that the Python code did correctly set up the
       corresponding @ffi.def_extern() function.  Otherwise, the
       general logic of ``extern "Python"`` functions (inside the
       _cffi_backend module) will find that the reference is still
       missing and print an error.
     */
	result = 0;
done:
	Py_XDECREF(pycode);
	Py_XDECREF(global_dict);
	PyGILState_Release(state);
	return result;

error:;
	{
		/* Print as much information as potentially useful.
           Debugging load-time failures with embedding is not fun
        */
		PyObject *exception, *v, *tb, *f, *modules, *mod;
		PyErr_Fetch(&exception, &v, &tb);
		if (exception != NULL) {
			PyErr_NormalizeException(&exception, &v, &tb);
			PyErr_Display(exception, v, tb);
		}
		Py_XDECREF(exception);
		Py_XDECREF(v);
		Py_XDECREF(tb);

		f = PySys_GetObject((char *)"stderr");
		if (f != NULL && f != Py_None) {
			PyFile_WriteString("\nFrom: " _CFFI_MODULE_NAME
							   "\ncompiled with cffi version: 1.10.0"
							   "\n_cffi_backend module: ",
					f);
			modules = PyImport_GetModuleDict();
			mod = PyDict_GetItemString(modules, "_cffi_backend");
			if (mod == NULL) {
				PyFile_WriteString("not loaded", f);
			} else {
				v = PyObject_GetAttrString(mod, "__file__");
				PyFile_WriteObject(v, f, 0);
				Py_XDECREF(v);
			}
			PyFile_WriteString("\nsys.path: ", f);
			PyFile_WriteObject(PySys_GetObject((char *)"path"), f, 0);
			PyFile_WriteString("\n\n", f);
		}
	}
	result = -1;
	goto done;
}

PyAPI_DATA(char *) _PyParser_TokenNames[]; /* from CPython */

static int _cffi_carefully_make_gil(void) {
/* This does the basic initialization of Python.  It can be called
       completely concurrently from unrelated threads.  It assumes
       that we don't hold the GIL before (if it exists), and we don't
       hold it afterwards.

       What it really does is completely different in Python 2 and 
       Python 3.

    Python 2
    ========

       Initialize the GIL, without initializing the rest of Python,
       by calling PyEval_InitThreads().

       PyEval_InitThreads() must not be called concurrently at all.
       So we use a global variable as a simple spin lock.  This global
       variable must be from 'libpythonX.Y.so', not from this
       cffi-based extension module, because it must be shared from
       different cffi-based extension modules.  We choose
       _PyParser_TokenNames[0] as a completely arbitrary pointer value
       that is never written to.  The default is to point to the
       string "ENDMARKER".  We change it temporarily to point to the
       next character in that string.  (Yes, I know it's REALLY
       obscure.)

    Python 3
    ========

       In Python 3, PyEval_InitThreads() cannot be called before
       Py_InitializeEx() any more.  So this function calls
       Py_InitializeEx() first.  It uses the same obscure logic to
       make sure we never call it concurrently.

       Arguably, this is less good on the spinlock, because
       Py_InitializeEx() takes much longer to run than
       PyEval_InitThreads().  But I didn't find a way around it.
    */

#ifdef WITH_THREAD
	char *volatile *lock = (char *volatile *)_PyParser_TokenNames;
	char *old_value;

	while (1) { /* spin loop */
		old_value = *lock;
		if (old_value[0] == 'E') {
			assert(old_value[1] == 'N');
			if (cffi_compare_and_swap(lock, old_value, old_value + 1))
				break;
		} else {
			assert(old_value[0] == 'N');
			/* should ideally do a spin loop instruction here, but
               hard to do it portably and doesn't really matter I
               think: PyEval_InitThreads() should be very fast, and
               this is only run at start-up anyway. */
		}
	}
#endif

#if PY_MAJOR_VERSION >= 3
	/* Python 3: call Py_InitializeEx() */
	{
		PyGILState_STATE state = PyGILState_UNLOCKED;
		if (!Py_IsInitialized())
			_cffi_py_initialize();
		else
			state = PyGILState_Ensure();

		PyEval_InitThreads();
		PyGILState_Release(state);
	}
#else
/* Python 2: call PyEval_InitThreads() */
#ifdef WITH_THREAD
	if (!PyEval_ThreadsInitialized()) {
		PyEval_InitThreads(); /* makes the GIL */
		PyEval_ReleaseLock(); /* then release it */
	}
/* else: there is already a GIL, but we still needed to do the
       spinlock dance to make sure that we see it as fully ready */
#endif
#endif

#ifdef WITH_THREAD
	/* release the lock */
	while (!cffi_compare_and_swap(lock, old_value + 1, old_value))
		;
#endif

	return 0;
}

/**********  end CPython-specific section  **********/

#else

/**********  PyPy-specific section  **********/

PyMODINIT_FUNC _CFFI_PYTHON_STARTUP_FUNC(const void *[]); /* forward */

static struct _cffi_pypy_init_s {
	const char *name;
	void (*func)(const void *[]);
	const char *code;
} _cffi_pypy_init = {
	_CFFI_MODULE_NAME,
	(void (*)(const void *[]))_CFFI_PYTHON_STARTUP_FUNC,
	_CFFI_PYTHON_STARTUP_CODE,
};

extern int pypy_carefully_make_gil(const char *);
extern int pypy_init_embedded_cffi_module(int, struct _cffi_pypy_init_s *);

static int _cffi_carefully_make_gil(void) {
	return pypy_carefully_make_gil(_CFFI_MODULE_NAME);
}

static int _cffi_initialize_python(void) {
	return pypy_init_embedded_cffi_module(0xB011, &_cffi_pypy_init);
}

/**********  end PyPy-specific section  **********/

#endif

#ifdef __GNUC__
__attribute__((noinline))
#endif
static _cffi_call_python_fnptr
_cffi_start_python(void) {
	/* Delicate logic to initialize Python.  This function can be
       called multiple times concurrently, e.g. when the process calls
       its first ``extern "Python"`` functions in multiple threads at
       once.  It can also be called recursively, in which case we must
       ignore it.  We also have to consider what occurs if several
       different cffi-based extensions reach this code in parallel
       threads---it is a different copy of the code, then, and we
       can't have any shared global variable unless it comes from
       'libpythonX.Y.so'.

       Idea:

       * _cffi_carefully_make_gil(): "carefully" call
         PyEval_InitThreads() (possibly with Py_InitializeEx() first).

       * then we use a (local) custom lock to make sure that a call to this
         cffi-based extension will wait if another call to the *same*
         extension is running the initialization in another thread.
         It is reentrant, so that a recursive call will not block, but
         only one from a different thread.

       * then we grab the GIL and (Python 2) we call Py_InitializeEx().
         At this point, concurrent calls to Py_InitializeEx() are not
         possible: we have the GIL.

       * do the rest of the specific initialization, which may
         temporarily release the GIL but not the custom lock.
         Only release the custom lock when we are done.
    */
	static char called = 0;

	if (_cffi_carefully_make_gil() != 0)
		return NULL;

	_cffi_acquire_reentrant_mutex();

	/* Here the GIL exists, but we don't have it.  We're only protected
       from concurrency by the reentrant mutex. */

	/* This file only initializes the embedded module once, the first
       time this is called, even if there are subinterpreters. */
	if (!called) {
		called = 1; /* invoke _cffi_initialize_python() only once,
                        but don't set '_cffi_call_python' right now,
                        otherwise concurrent threads won't call
                        this function at all (we need them to wait) */
		if (_cffi_initialize_python() == 0) {
			/* now initialization is finished.  Switch to the fast-path. */

			/* We would like nobody to see the new value of
               '_cffi_call_python' without also seeing the rest of the
               data initialized.  However, this is not possible.  But
               the new value of '_cffi_call_python' is the function
               'cffi_call_python()' from _cffi_backend.  So:  */
			cffi_write_barrier();
			/* ^^^ we put a write barrier here, and a corresponding
               read barrier at the start of cffi_call_python().  This
               ensures that after that read barrier, we see everything
               done here before the write barrier.
            */

			assert(_cffi_call_python_org != NULL);
			_cffi_call_python = (_cffi_call_python_fnptr)_cffi_call_python_org;
		} else {
			/* initialization failed.  Reset this to NULL, even if it was
               already set to some other value.  Future calls to
               _cffi_start_python() are still forced to occur, and will
               always return NULL from now on. */
			_cffi_call_python_org = NULL;
		}
	}

	_cffi_release_reentrant_mutex();

	return (_cffi_call_python_fnptr)_cffi_call_python_org;
}

static void _cffi_start_and_call_python(struct _cffi_externpy_s *externpy, char *args) {
	_cffi_call_python_fnptr fnptr;
	int current_err = errno;
#ifdef _MSC_VER
	int current_lasterr = GetLastError();
#endif
	fnptr = _cffi_start_python();
	if (fnptr == NULL) {
		fprintf(stderr, "function %s() called, but initialization code "
						"failed.  Returning 0.\n",
				externpy->name);
		memset(args, 0, externpy->size_of_result);
	}
#ifdef _MSC_VER
	SetLastError(current_lasterr);
#endif
	errno = current_err;

	if (fnptr != NULL)
		fnptr(externpy, args);
}

/* The cffi_start_python() function makes sure Python is initialized
   and our cffi module is set up.  It can be called manually from the
   user C code.  The same effect is obtained automatically from any
   dll-exported ``extern "Python"`` function.  This function returns
   -1 if initialization failed, 0 if all is OK.  */
_CFFI_UNUSED_FN
static int cffi_start_python(void) {
	if (_cffi_call_python == &_cffi_start_and_call_python) {
		if (_cffi_start_python() == NULL)
			return -1;
	}
	cffi_read_barrier();
	return 0;
}

#undef cffi_compare_and_swap
#undef cffi_write_barrier
#undef cffi_read_barrier

/************************************************************/


#include "modules/gdnative/godot.h"
// TODO: MethodFlags not in ldscript headers
enum MethodFlags {
    METHOD_FLAG_NORMAL=1,
    METHOD_FLAG_EDITOR=2,
    METHOD_FLAG_NOSCRIPT=4,
    METHOD_FLAG_CONST=8,
    METHOD_FLAG_REVERSE=16, // used for events
    METHOD_FLAG_VIRTUAL=32,
    METHOD_FLAG_FROM_SCRIPT=64,
    METHOD_FLAG_VARARG=128,
    METHOD_FLAGS_DEFAULT=METHOD_FLAG_NORMAL,
};

#ifndef PYTHONSCRIPT_API_H
#define PYTHONSCRIPT_API_H

#include "modules/gdnative/godot.h"
#include "pythonscript.h"
#include "cffi_bindings/api_struct.h"

typedef void *cffi_handle;

extern godot_bool pybind_init_sys_path_and_argv(const wchar_t *pythonpath, const wchar_t *res_path, const wchar_t *data_path);
extern cffi_handle pybind_load_exposed_class_per_module(const wchar_t *modname);
extern cffi_handle pybind_instanciate_from_classname(const wchar_t *classname);
extern cffi_handle pybind_wrap_gdobj_with_class(cffi_handle cls_handle, void *gdobj);
extern void pybind_release_instance(cffi_handle handle);
extern void pybind_call_meth(cffi_handle handle, const wchar_t *methname, void **args, int argcount, void *ret, int *error);
extern godot_bool pybind_set_prop(cffi_handle handle, const wchar_t *propname, const godot_variant *value);
extern godot_bool pybind_get_prop(cffi_handle handle, const wchar_t *propname, godot_variant *ret);
extern godot_bool pybind_get_prop_type(cffi_handle handle, const wchar_t *propname, int *prop_type);
extern const godot_string *pybind_get_prop_list(cffi_handle handle);
extern godot_bool pybind_get_prop_default_value(cffi_handle handle, const wchar_t *propname, godot_variant *r_val);
extern godot_bool pybind_get_prop_info(cffi_handle handle, const wchar_t *propname, pybind_prop_info *r_prop_info);
extern const godot_string *pybind_get_meth_list(cffi_handle handle);
extern godot_bool pybind_get_meth_info(cffi_handle handle, const wchar_t *methname, int *r_argcount);
extern godot_bool pybind_has_meth(cffi_handle handle, const wchar_t *methname);
extern godot_bool pybind_is_tool(cffi_handle handle);
extern void pybind_notification(cffi_handle handle, int notification);
extern godot_int pybind_get_rpc_mode(cffi_handle handle, const wchar_t *methname);
extern godot_int pybind_get_rset_mode(cffi_handle handle, const wchar_t *varname);
extern const godot_string *pybind_get_signal_list(cffi_handle handle);
extern godot_bool pybind_has_signal(cffi_handle handle, const wchar_t *signalname);
extern godot_bool pybind_get_signal_info(cffi_handle handle, const wchar_t *signalname, int *r_argcount);
extern void pybind_get_class_name(cffi_handle handle, godot_string *r_name);

#endif // PYTHONSCRIPT_API_H


/************************************************************/

static void *_cffi_types[] = {
/*  0 */ _CFFI_OP(_CFFI_OP_FUNCTION, 95), // _Bool *()(godot_input_event *)
/*  1 */ _CFFI_OP(_CFFI_OP_POINTER, 1490), // godot_input_event *
/*  2 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/*  3 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_array const *)
/*  4 */ _CFFI_OP(_CFFI_OP_POINTER, 1483), // godot_array const *
/*  5 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/*  6 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_array const *, godot_variant const *)
/*  7 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/*  8 */ _CFFI_OP(_CFFI_OP_POINTER, 1452), // godot_variant const *
/*  9 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 10 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_dictionary *)
/* 11 */ _CFFI_OP(_CFFI_OP_POINTER, 1486), // godot_dictionary *
/* 12 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 13 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_dictionary *, godot_array const *)
/* 14 */ _CFFI_OP(_CFFI_OP_NOOP, 11),
/* 15 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 16 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 17 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_dictionary *, godot_variant const *)
/* 18 */ _CFFI_OP(_CFFI_OP_NOOP, 11),
/* 19 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 20 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 21 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_image *)
/* 22 */ _CFFI_OP(_CFFI_OP_POINTER, 1488), // godot_image *
/* 23 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 24 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_input_event const *)
/* 25 */ _CFFI_OP(_CFFI_OP_POINTER, 1490), // godot_input_event const *
/* 26 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 27 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_input_event const *, godot_string const *)
/* 28 */ _CFFI_OP(_CFFI_OP_NOOP, 25),
/* 29 */ _CFFI_OP(_CFFI_OP_POINTER, 1515), // godot_string const *
/* 30 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 31 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_node_path *)
/* 32 */ _CFFI_OP(_CFFI_OP_POINTER, 1495), // godot_node_path *
/* 33 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 34 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_plane *, godot_vector3 const *)
/* 35 */ _CFFI_OP(_CFFI_OP_POINTER, 1496), // godot_plane *
/* 36 */ _CFFI_OP(_CFFI_OP_POINTER, 111), // godot_vector3 const *
/* 37 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 38 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_plane *, godot_vector3 const *, float)
/* 39 */ _CFFI_OP(_CFFI_OP_NOOP, 35),
/* 40 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 41 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13), // float
/* 42 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 43 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_plane const *, godot_vector3 *, godot_plane const *, godot_plane const *)
/* 44 */ _CFFI_OP(_CFFI_OP_POINTER, 1496), // godot_plane const *
/* 45 */ _CFFI_OP(_CFFI_OP_POINTER, 111), // godot_vector3 *
/* 46 */ _CFFI_OP(_CFFI_OP_NOOP, 44),
/* 47 */ _CFFI_OP(_CFFI_OP_NOOP, 44),
/* 48 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 49 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_plane const *, godot_vector3 *, godot_vector3 const *, godot_vector3 const *)
/* 50 */ _CFFI_OP(_CFFI_OP_NOOP, 44),
/* 51 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 52 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 53 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 54 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 55 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_rect2 *)
/* 56 */ _CFFI_OP(_CFFI_OP_POINTER, 1508), // godot_rect2 *
/* 57 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 58 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_rect2 *, godot_rect2 const *)
/* 59 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 60 */ _CFFI_OP(_CFFI_OP_POINTER, 1508), // godot_rect2 const *
/* 61 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 62 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_rect2 *, godot_vector2 const *)
/* 63 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 64 */ _CFFI_OP(_CFFI_OP_POINTER, 107), // godot_vector2 const *
/* 65 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 66 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_rect3 *)
/* 67 */ _CFFI_OP(_CFFI_OP_POINTER, 1509), // godot_rect3 *
/* 68 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 69 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_rect3 *, godot_plane const *)
/* 70 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 71 */ _CFFI_OP(_CFFI_OP_NOOP, 44),
/* 72 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 73 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_rect3 *, godot_rect3 const *)
/* 74 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 75 */ _CFFI_OP(_CFFI_OP_POINTER, 1509), // godot_rect3 const *
/* 76 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 77 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_rect3 *, godot_vector3 const *)
/* 78 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 79 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 80 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 81 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_rect3 *, godot_vector3 const *, godot_vector3 const *)
/* 82 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 83 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 84 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 85 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 86 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_string const *, godot_string const *)
/* 87 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 88 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 89 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 90 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_variant const *)
/* 91 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 92 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 93 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_variant const *, _Bool *)
/* 94 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 95 */ _CFFI_OP(_CFFI_OP_POINTER, 607), // _Bool *
/* 96 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 97 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_variant const *, godot_string const *)
/* 98 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 99 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 100 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 101 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_variant const *, godot_variant const *)
/* 102 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 103 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 104 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 105 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_vector2 const *, godot_vector2)
/* 106 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 107 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 36), // godot_vector2
/* 108 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 109 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(godot_vector3 const *, godot_vector3)
/* 110 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 111 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 37), // godot_vector3
/* 112 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 113 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(void *)
/* 114 */ _CFFI_OP(_CFFI_OP_POINTER, 1552), // void *
/* 115 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 116 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(void *, wchar_t const *)
/* 117 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 118 */ _CFFI_OP(_CFFI_OP_POINTER, 1554), // wchar_t const *
/* 119 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 120 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(void *, wchar_t const *, godot_variant *)
/* 121 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 122 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 123 */ _CFFI_OP(_CFFI_OP_POINTER, 1452), // godot_variant *
/* 124 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 125 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(void *, wchar_t const *, godot_variant const *)
/* 126 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 127 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 128 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 129 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 130 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(void *, wchar_t const *, int *)
/* 131 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 132 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 133 */ _CFFI_OP(_CFFI_OP_POINTER, 173), // int *
/* 134 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 135 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(void *, wchar_t const *, pybind_prop_info *)
/* 136 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 137 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 138 */ _CFFI_OP(_CFFI_OP_POINTER, 1522), // pybind_prop_info *
/* 139 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 140 */ _CFFI_OP(_CFFI_OP_FUNCTION, 607), // _Bool()(wchar_t const *, wchar_t const *, wchar_t const *)
/* 141 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 142 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 143 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 144 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 145 */ _CFFI_OP(_CFFI_OP_FUNCTION, 219), // char const *()(godot_string const *)
/* 146 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 147 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 148 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1122), // double()(godot_variant const *)
/* 149 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 150 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 151 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1480), // enum godot_input_event_type *()(godot_input_event *)
/* 152 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 153 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 154 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1482), // float *()(godot_input_event *)
/* 155 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 156 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 157 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_basis *)
/* 158 */ _CFFI_OP(_CFFI_OP_POINTER, 1484), // godot_basis *
/* 159 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 160 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_basis *, godot_vector3 const *)
/* 161 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 162 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 163 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 164 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_color *)
/* 165 */ _CFFI_OP(_CFFI_OP_POINTER, 1485), // godot_color *
/* 166 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 167 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_plane *, godot_vector3 const *)
/* 168 */ _CFFI_OP(_CFFI_OP_NOOP, 35),
/* 169 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 170 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 171 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_pool_real_array *, int)
/* 172 */ _CFFI_OP(_CFFI_OP_POINTER, 1500), // godot_pool_real_array *
/* 173 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7), // int
/* 174 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 175 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_quat *)
/* 176 */ _CFFI_OP(_CFFI_OP_POINTER, 1507), // godot_quat *
/* 177 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 178 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_quat *, godot_quat const *)
/* 179 */ _CFFI_OP(_CFFI_OP_NOOP, 176),
/* 180 */ _CFFI_OP(_CFFI_OP_POINTER, 1507), // godot_quat const *
/* 181 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 182 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_rect2 *)
/* 183 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 184 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 185 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_rect3 *)
/* 186 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 187 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 188 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_transform2d *)
/* 189 */ _CFFI_OP(_CFFI_OP_POINTER, 1516), // godot_transform2d *
/* 190 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 191 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_vector2 *)
/* 192 */ _CFFI_OP(_CFFI_OP_POINTER, 107), // godot_vector2 *
/* 193 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 194 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_vector2 *, godot_vector2 const *)
/* 195 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 196 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 197 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 198 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_vector2 const *)
/* 199 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 200 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 201 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_vector3 *)
/* 202 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 203 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 204 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_vector3 *, godot_vector3 const *)
/* 205 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 206 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 207 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 208 */ _CFFI_OP(_CFFI_OP_FUNCTION, 41), // float()(godot_vector3 const *, int)
/* 209 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 210 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 211 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 212 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1485), // godot_color()(godot_pool_color_array *, int)
/* 213 */ _CFFI_OP(_CFFI_OP_POINTER, 1498), // godot_pool_color_array *
/* 214 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 215 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 216 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1486), // godot_dictionary()(void)
/* 217 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 218 */ _CFFI_OP(_CFFI_OP_FUNCTION, 683), // godot_method_bind *()(char const *, char const *)
/* 219 */ _CFFI_OP(_CFFI_OP_POINTER, 1476), // char const *
/* 220 */ _CFFI_OP(_CFFI_OP_NOOP, 219),
/* 221 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 222 */ _CFFI_OP(_CFFI_OP_FUNCTION, 29), // godot_string const *()(void *)
/* 223 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 224 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 225 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1515), // godot_string()(godot_input_event const *)
/* 226 */ _CFFI_OP(_CFFI_OP_NOOP, 25),
/* 227 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 228 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1515), // godot_string()(godot_pool_string_array *, int)
/* 229 */ _CFFI_OP(_CFFI_OP_POINTER, 1501), // godot_pool_string_array *
/* 230 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 231 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 232 */ _CFFI_OP(_CFFI_OP_FUNCTION, 123), // godot_variant *()(godot_array *, int)
/* 233 */ _CFFI_OP(_CFFI_OP_POINTER, 1483), // godot_array *
/* 234 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 235 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 236 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1452), // godot_variant()(godot_array *)
/* 237 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 238 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 239 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1452), // godot_variant()(godot_array const *)
/* 240 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 241 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 242 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1452), // godot_variant()(void *, void *, void *)
/* 243 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 244 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 245 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 246 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 247 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1452), // godot_variant()(void *, void *, void *, int, godot_variant * *)
/* 248 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 249 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 250 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 251 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 252 */ _CFFI_OP(_CFFI_OP_POINTER, 123), // godot_variant * *
/* 253 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 254 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1520), // godot_variant_type()(godot_variant const *)
/* 255 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 256 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 257 */ _CFFI_OP(_CFFI_OP_FUNCTION, 107), // godot_vector2()(godot_pool_vector2_array *, int)
/* 258 */ _CFFI_OP(_CFFI_OP_POINTER, 1502), // godot_pool_vector2_array *
/* 259 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 260 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 261 */ _CFFI_OP(_CFFI_OP_FUNCTION, 107), // godot_vector2()(godot_vector2 const *, float)
/* 262 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 263 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 264 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 265 */ _CFFI_OP(_CFFI_OP_FUNCTION, 107), // godot_vector2()(godot_vector2 const *, godot_vector2)
/* 266 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 267 */ _CFFI_OP(_CFFI_OP_NOOP, 107),
/* 268 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 269 */ _CFFI_OP(_CFFI_OP_FUNCTION, 111), // godot_vector3()(godot_pool_vector3_array *, int)
/* 270 */ _CFFI_OP(_CFFI_OP_POINTER, 1503), // godot_pool_vector3_array *
/* 271 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 272 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 273 */ _CFFI_OP(_CFFI_OP_FUNCTION, 111), // godot_vector3()(godot_vector3 const *, float)
/* 274 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 275 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 276 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 277 */ _CFFI_OP(_CFFI_OP_FUNCTION, 111), // godot_vector3()(godot_vector3 const *, godot_vector3)
/* 278 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 279 */ _CFFI_OP(_CFFI_OP_NOOP, 111),
/* 280 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 281 */ _CFFI_OP(_CFFI_OP_FUNCTION, 133), // int *()(godot_input_event *)
/* 282 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 283 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 284 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_array *, godot_variant const *)
/* 285 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 286 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 287 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 288 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_array const *)
/* 289 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 290 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 291 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_array const *, godot_variant const *)
/* 292 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 293 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 294 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 295 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_array const *, godot_variant const *, int)
/* 296 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 297 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 298 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 299 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 300 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_basis *)
/* 301 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 302 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 303 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_color *)
/* 304 */ _CFFI_OP(_CFFI_OP_NOOP, 165),
/* 305 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 306 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_dictionary *)
/* 307 */ _CFFI_OP(_CFFI_OP_NOOP, 11),
/* 308 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 309 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_image *)
/* 310 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 311 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 312 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_image *, godot_string const *)
/* 313 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 314 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 315 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 316 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_node_path *)
/* 317 */ _CFFI_OP(_CFFI_OP_NOOP, 32),
/* 318 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 319 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_byte_array *)
/* 320 */ _CFFI_OP(_CFFI_OP_POINTER, 1497), // godot_pool_byte_array *
/* 321 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 322 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_byte_array *, int, uint8_t)
/* 323 */ _CFFI_OP(_CFFI_OP_NOOP, 320),
/* 324 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 325 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 18), // uint8_t
/* 326 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 327 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_color_array *)
/* 328 */ _CFFI_OP(_CFFI_OP_NOOP, 213),
/* 329 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 330 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_color_array *, int, godot_color const *)
/* 331 */ _CFFI_OP(_CFFI_OP_NOOP, 213),
/* 332 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 333 */ _CFFI_OP(_CFFI_OP_POINTER, 1485), // godot_color const *
/* 334 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 335 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_int_array *)
/* 336 */ _CFFI_OP(_CFFI_OP_POINTER, 1499), // godot_pool_int_array *
/* 337 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 338 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_int_array *, int)
/* 339 */ _CFFI_OP(_CFFI_OP_NOOP, 336),
/* 340 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 341 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 342 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_int_array *, int, int)
/* 343 */ _CFFI_OP(_CFFI_OP_NOOP, 336),
/* 344 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 345 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 346 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 347 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_real_array *)
/* 348 */ _CFFI_OP(_CFFI_OP_NOOP, 172),
/* 349 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 350 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_real_array *, int, float)
/* 351 */ _CFFI_OP(_CFFI_OP_NOOP, 172),
/* 352 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 353 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 354 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 355 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_string_array *)
/* 356 */ _CFFI_OP(_CFFI_OP_NOOP, 229),
/* 357 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 358 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_string_array *, int, godot_string const *)
/* 359 */ _CFFI_OP(_CFFI_OP_NOOP, 229),
/* 360 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 361 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 362 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 363 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_vector2_array *)
/* 364 */ _CFFI_OP(_CFFI_OP_NOOP, 258),
/* 365 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 366 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_vector2_array *, int, godot_vector2 const *)
/* 367 */ _CFFI_OP(_CFFI_OP_NOOP, 258),
/* 368 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 369 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 370 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 371 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_vector3_array *)
/* 372 */ _CFFI_OP(_CFFI_OP_NOOP, 270),
/* 373 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 374 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_pool_vector3_array *, int, godot_vector3 const *)
/* 375 */ _CFFI_OP(_CFFI_OP_NOOP, 270),
/* 376 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 377 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 378 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 379 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_rect3 *)
/* 380 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 381 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 382 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_rid *)
/* 383 */ _CFFI_OP(_CFFI_OP_POINTER, 1510), // godot_rid *
/* 384 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 385 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(godot_vector3 *)
/* 386 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 387 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 388 */ _CFFI_OP(_CFFI_OP_FUNCTION, 173), // int()(void *, wchar_t const *)
/* 389 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 390 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 391 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 392 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1233), // int64_t()(godot_variant const *)
/* 393 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 394 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 395 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1523), // uint32_t *()(godot_input_event *)
/* 396 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 397 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 398 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1524), // uint32_t()(godot_array const *)
/* 399 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 400 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 401 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1237), // uint64_t()(godot_variant const *)
/* 402 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 403 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 404 */ _CFFI_OP(_CFFI_OP_FUNCTION, 325), // uint8_t()(godot_pool_byte_array *, int)
/* 405 */ _CFFI_OP(_CFFI_OP_NOOP, 320),
/* 406 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 407 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 408 */ _CFFI_OP(_CFFI_OP_FUNCTION, 114), // void *()(char *)
/* 409 */ _CFFI_OP(_CFFI_OP_POINTER, 1476), // char *
/* 410 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 411 */ _CFFI_OP(_CFFI_OP_FUNCTION, 114), // void *()(godot_variant const *)
/* 412 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 413 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 414 */ _CFFI_OP(_CFFI_OP_FUNCTION, 114), // void *()(int)
/* 415 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 416 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 417 */ _CFFI_OP(_CFFI_OP_FUNCTION, 114), // void *()(size_t)
/* 418 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28), // size_t
/* 419 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 420 */ _CFFI_OP(_CFFI_OP_FUNCTION, 114), // void *()(void *)
/* 421 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 422 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 423 */ _CFFI_OP(_CFFI_OP_FUNCTION, 114), // void *()(void *, int)
/* 424 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 425 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 426 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 427 */ _CFFI_OP(_CFFI_OP_FUNCTION, 114), // void *()(void *, void *)
/* 428 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 429 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 430 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 431 */ _CFFI_OP(_CFFI_OP_FUNCTION, 114), // void *()(void)
/* 432 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 433 */ _CFFI_OP(_CFFI_OP_FUNCTION, 114), // void *()(wchar_t const *)
/* 434 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 435 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 436 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1544), // void *(*()(char const *))(void)
/* 437 */ _CFFI_OP(_CFFI_OP_NOOP, 219),
/* 438 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 439 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(char const *, char const *, godot_instance_create_func, godot_instance_destroy_func)
/* 440 */ _CFFI_OP(_CFFI_OP_NOOP, 219),
/* 441 */ _CFFI_OP(_CFFI_OP_NOOP, 219),
/* 442 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 7), // godot_instance_create_func
/* 443 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 8), // godot_instance_destroy_func
/* 444 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 445 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(char const *, char const *, godot_method_attributes, godot_instance_method)
/* 446 */ _CFFI_OP(_CFFI_OP_NOOP, 219),
/* 447 */ _CFFI_OP(_CFFI_OP_NOOP, 219),
/* 448 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 10), // godot_method_attributes
/* 449 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 9), // godot_instance_method
/* 450 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 451 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(char const *, char const *, godot_property_attributes *, godot_property_set_func, godot_property_get_func)
/* 452 */ _CFFI_OP(_CFFI_OP_NOOP, 219),
/* 453 */ _CFFI_OP(_CFFI_OP_NOOP, 219),
/* 454 */ _CFFI_OP(_CFFI_OP_POINTER, 1504), // godot_property_attributes *
/* 455 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 25), // godot_property_set_func
/* 456 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 24), // godot_property_get_func
/* 457 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 458 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(char const *, godot_signal const *)
/* 459 */ _CFFI_OP(_CFFI_OP_NOOP, 219),
/* 460 */ _CFFI_OP(_CFFI_OP_POINTER, 1511), // godot_signal const *
/* 461 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 462 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_array *)
/* 463 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 464 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 465 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_array *, godot_pool_byte_array const *)
/* 466 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 467 */ _CFFI_OP(_CFFI_OP_POINTER, 1497), // godot_pool_byte_array const *
/* 468 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 469 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_array *, godot_pool_color_array const *)
/* 470 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 471 */ _CFFI_OP(_CFFI_OP_POINTER, 1498), // godot_pool_color_array const *
/* 472 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 473 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_array *, godot_pool_int_array const *)
/* 474 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 475 */ _CFFI_OP(_CFFI_OP_POINTER, 1499), // godot_pool_int_array const *
/* 476 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 477 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_array *, godot_pool_real_array const *)
/* 478 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 479 */ _CFFI_OP(_CFFI_OP_POINTER, 1500), // godot_pool_real_array const *
/* 480 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 481 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_array *, godot_pool_string_array const *)
/* 482 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 483 */ _CFFI_OP(_CFFI_OP_POINTER, 1501), // godot_pool_string_array const *
/* 484 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 485 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_array *, godot_pool_vector2_array const *)
/* 486 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 487 */ _CFFI_OP(_CFFI_OP_POINTER, 1502), // godot_pool_vector2_array const *
/* 488 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 489 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_array *, godot_pool_vector3_array const *)
/* 490 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 491 */ _CFFI_OP(_CFFI_OP_POINTER, 1503), // godot_pool_vector3_array const *
/* 492 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 493 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_array *, godot_variant const *)
/* 494 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 495 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 496 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 497 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_array *, int)
/* 498 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 499 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 500 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 501 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_array *, int, godot_variant const *)
/* 502 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 503 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 504 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 505 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 506 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_array *, void *, godot_string const *)
/* 507 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 508 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 509 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 510 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 511 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_basis *)
/* 512 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 513 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 514 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_basis *, godot_basis *)
/* 515 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 516 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 517 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 518 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_basis *, godot_basis *, godot_vector3 const *)
/* 519 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 520 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 521 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 522 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 523 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_basis *, godot_basis *, godot_vector3 const *, float)
/* 524 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 525 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 526 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 527 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 528 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 529 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_basis *, godot_quat const *)
/* 530 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 531 */ _CFFI_OP(_CFFI_OP_NOOP, 180),
/* 532 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 533 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_basis *, godot_string *)
/* 534 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 535 */ _CFFI_OP(_CFFI_OP_POINTER, 1515), // godot_string *
/* 536 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 537 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_basis *, godot_vector3 *)
/* 538 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 539 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 540 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 541 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_basis *, godot_vector3 *, godot_vector3 const *)
/* 542 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 543 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 544 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 545 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 546 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_basis *, godot_vector3 const *, float)
/* 547 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 548 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 549 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 550 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 551 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_basis *, godot_vector3 const *, godot_vector3 const *, godot_vector3 const *)
/* 552 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 553 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 554 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 555 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 556 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 557 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_basis *, godot_vector3)
/* 558 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 559 */ _CFFI_OP(_CFFI_OP_NOOP, 111),
/* 560 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 561 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_basis *, godot_vector3, float)
/* 562 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 563 */ _CFFI_OP(_CFFI_OP_NOOP, 111),
/* 564 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 565 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 566 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_basis *, godot_vector3, godot_vector3, godot_vector3)
/* 567 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 568 */ _CFFI_OP(_CFFI_OP_NOOP, 111),
/* 569 */ _CFFI_OP(_CFFI_OP_NOOP, 111),
/* 570 */ _CFFI_OP(_CFFI_OP_NOOP, 111),
/* 571 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 572 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_color *, float, float, float)
/* 573 */ _CFFI_OP(_CFFI_OP_NOOP, 165),
/* 574 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 575 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 576 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 577 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 578 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_color *, float, float, float, float)
/* 579 */ _CFFI_OP(_CFFI_OP_NOOP, 165),
/* 580 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 581 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 582 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 583 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 584 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 585 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_color *, godot_color *)
/* 586 */ _CFFI_OP(_CFFI_OP_NOOP, 165),
/* 587 */ _CFFI_OP(_CFFI_OP_NOOP, 165),
/* 588 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 589 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_color *, godot_color *, godot_color const *)
/* 590 */ _CFFI_OP(_CFFI_OP_NOOP, 165),
/* 591 */ _CFFI_OP(_CFFI_OP_NOOP, 165),
/* 592 */ _CFFI_OP(_CFFI_OP_NOOP, 333),
/* 593 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 594 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_color *, godot_color *, godot_color const *, float)
/* 595 */ _CFFI_OP(_CFFI_OP_NOOP, 165),
/* 596 */ _CFFI_OP(_CFFI_OP_NOOP, 165),
/* 597 */ _CFFI_OP(_CFFI_OP_NOOP, 333),
/* 598 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 599 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 600 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_color *, godot_string *)
/* 601 */ _CFFI_OP(_CFFI_OP_NOOP, 165),
/* 602 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 603 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 604 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_color *, godot_string *, _Bool)
/* 605 */ _CFFI_OP(_CFFI_OP_NOOP, 165),
/* 606 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 607 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 1), // _Bool
/* 608 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 609 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_dictionary *)
/* 610 */ _CFFI_OP(_CFFI_OP_NOOP, 11),
/* 611 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 612 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_dictionary *, godot_array *)
/* 613 */ _CFFI_OP(_CFFI_OP_NOOP, 11),
/* 614 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 615 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 616 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_dictionary *, godot_variant *, godot_variant const *)
/* 617 */ _CFFI_OP(_CFFI_OP_NOOP, 11),
/* 618 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 619 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 620 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 621 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_dictionary *, godot_variant const *)
/* 622 */ _CFFI_OP(_CFFI_OP_NOOP, 11),
/* 623 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 624 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 625 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_dictionary const *, godot_string *)
/* 626 */ _CFFI_OP(_CFFI_OP_POINTER, 1486), // godot_dictionary const *
/* 627 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 628 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 629 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_image *)
/* 630 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 631 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 632 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_image *, godot_image *)
/* 633 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 634 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 635 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 636 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_image *, godot_image *, godot_rect2 const *)
/* 637 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 638 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 639 */ _CFFI_OP(_CFFI_OP_NOOP, 60),
/* 640 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 641 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_image *, godot_image *, int)
/* 642 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 643 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 644 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 645 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 646 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_image *, godot_image *, int, int, int)
/* 647 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 648 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 649 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 650 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 651 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 652 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 653 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_image *, godot_image const *, godot_rect2 const *, godot_vector2 const *)
/* 654 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 655 */ _CFFI_OP(_CFFI_OP_POINTER, 1488), // godot_image const *
/* 656 */ _CFFI_OP(_CFFI_OP_NOOP, 60),
/* 657 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 658 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 659 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_image *, godot_pool_byte_array *)
/* 660 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 661 */ _CFFI_OP(_CFFI_OP_NOOP, 320),
/* 662 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 663 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_image *, godot_rect2 *)
/* 664 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 665 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 666 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 667 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_image *, int, int, _Bool, int)
/* 668 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 669 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 670 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 671 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 1),
/* 672 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 673 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 674 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_input_event *)
/* 675 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 676 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 677 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_input_event *, godot_string const *, _Bool)
/* 678 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 679 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 680 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 1),
/* 681 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 682 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_method_bind *, void *, void const * *, void *)
/* 683 */ _CFFI_OP(_CFFI_OP_POINTER, 1491), // godot_method_bind *
/* 684 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 685 */ _CFFI_OP(_CFFI_OP_POINTER, 1241), // void const * *
/* 686 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 687 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 688 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_node_path *)
/* 689 */ _CFFI_OP(_CFFI_OP_NOOP, 32),
/* 690 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 691 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_node_path *, godot_string *)
/* 692 */ _CFFI_OP(_CFFI_OP_NOOP, 32),
/* 693 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 694 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 695 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_node_path *, godot_string *, int)
/* 696 */ _CFFI_OP(_CFFI_OP_NOOP, 32),
/* 697 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 698 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 699 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 700 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_plane *, float, float, float, float)
/* 701 */ _CFFI_OP(_CFFI_OP_NOOP, 35),
/* 702 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 703 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 704 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 705 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 706 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 707 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_plane *, godot_plane *)
/* 708 */ _CFFI_OP(_CFFI_OP_NOOP, 35),
/* 709 */ _CFFI_OP(_CFFI_OP_NOOP, 35),
/* 710 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 711 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_plane *, godot_string *)
/* 712 */ _CFFI_OP(_CFFI_OP_NOOP, 35),
/* 713 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 714 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 715 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_plane *, godot_vector3 *)
/* 716 */ _CFFI_OP(_CFFI_OP_NOOP, 35),
/* 717 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 718 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 719 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_plane *, godot_vector3 *, godot_vector3 const *)
/* 720 */ _CFFI_OP(_CFFI_OP_NOOP, 35),
/* 721 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 722 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 723 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 724 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_plane *, godot_vector3 const *, float)
/* 725 */ _CFFI_OP(_CFFI_OP_NOOP, 35),
/* 726 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 727 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 728 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 729 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_plane *, godot_vector3 const *, godot_vector3 const *, godot_vector3 const *)
/* 730 */ _CFFI_OP(_CFFI_OP_NOOP, 35),
/* 731 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 732 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 733 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 734 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 735 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_byte_array *)
/* 736 */ _CFFI_OP(_CFFI_OP_NOOP, 320),
/* 737 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 738 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_byte_array *, godot_array const *)
/* 739 */ _CFFI_OP(_CFFI_OP_NOOP, 320),
/* 740 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 741 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 742 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_byte_array *, godot_pool_byte_array const *)
/* 743 */ _CFFI_OP(_CFFI_OP_NOOP, 320),
/* 744 */ _CFFI_OP(_CFFI_OP_NOOP, 467),
/* 745 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 746 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_byte_array *, int)
/* 747 */ _CFFI_OP(_CFFI_OP_NOOP, 320),
/* 748 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 749 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 750 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_byte_array *, int, uint8_t)
/* 751 */ _CFFI_OP(_CFFI_OP_NOOP, 320),
/* 752 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 753 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 18),
/* 754 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 755 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_byte_array *, uint8_t)
/* 756 */ _CFFI_OP(_CFFI_OP_NOOP, 320),
/* 757 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 18),
/* 758 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 759 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_color_array *)
/* 760 */ _CFFI_OP(_CFFI_OP_NOOP, 213),
/* 761 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 762 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_color_array *, godot_array const *)
/* 763 */ _CFFI_OP(_CFFI_OP_NOOP, 213),
/* 764 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 765 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 766 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_color_array *, godot_color const *)
/* 767 */ _CFFI_OP(_CFFI_OP_NOOP, 213),
/* 768 */ _CFFI_OP(_CFFI_OP_NOOP, 333),
/* 769 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 770 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_color_array *, godot_pool_color_array const *)
/* 771 */ _CFFI_OP(_CFFI_OP_NOOP, 213),
/* 772 */ _CFFI_OP(_CFFI_OP_NOOP, 471),
/* 773 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 774 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_color_array *, int)
/* 775 */ _CFFI_OP(_CFFI_OP_NOOP, 213),
/* 776 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 777 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 778 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_color_array *, int, godot_color const *)
/* 779 */ _CFFI_OP(_CFFI_OP_NOOP, 213),
/* 780 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 781 */ _CFFI_OP(_CFFI_OP_NOOP, 333),
/* 782 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 783 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_int_array *)
/* 784 */ _CFFI_OP(_CFFI_OP_NOOP, 336),
/* 785 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 786 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_int_array *, godot_array const *)
/* 787 */ _CFFI_OP(_CFFI_OP_NOOP, 336),
/* 788 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 789 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 790 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_int_array *, godot_pool_int_array const *)
/* 791 */ _CFFI_OP(_CFFI_OP_NOOP, 336),
/* 792 */ _CFFI_OP(_CFFI_OP_NOOP, 475),
/* 793 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 794 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_int_array *, int)
/* 795 */ _CFFI_OP(_CFFI_OP_NOOP, 336),
/* 796 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 797 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 798 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_int_array *, int, int)
/* 799 */ _CFFI_OP(_CFFI_OP_NOOP, 336),
/* 800 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 801 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 802 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 803 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_real_array *)
/* 804 */ _CFFI_OP(_CFFI_OP_NOOP, 172),
/* 805 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 806 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_real_array *, float)
/* 807 */ _CFFI_OP(_CFFI_OP_NOOP, 172),
/* 808 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 809 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 810 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_real_array *, godot_array const *)
/* 811 */ _CFFI_OP(_CFFI_OP_NOOP, 172),
/* 812 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 813 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 814 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_real_array *, godot_pool_real_array const *)
/* 815 */ _CFFI_OP(_CFFI_OP_NOOP, 172),
/* 816 */ _CFFI_OP(_CFFI_OP_NOOP, 479),
/* 817 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 818 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_real_array *, int)
/* 819 */ _CFFI_OP(_CFFI_OP_NOOP, 172),
/* 820 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 821 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 822 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_real_array *, int, float)
/* 823 */ _CFFI_OP(_CFFI_OP_NOOP, 172),
/* 824 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 825 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 826 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 827 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_string_array *)
/* 828 */ _CFFI_OP(_CFFI_OP_NOOP, 229),
/* 829 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 830 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_string_array *, godot_array const *)
/* 831 */ _CFFI_OP(_CFFI_OP_NOOP, 229),
/* 832 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 833 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 834 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_string_array *, godot_pool_string_array const *)
/* 835 */ _CFFI_OP(_CFFI_OP_NOOP, 229),
/* 836 */ _CFFI_OP(_CFFI_OP_NOOP, 483),
/* 837 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 838 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_string_array *, godot_string const *)
/* 839 */ _CFFI_OP(_CFFI_OP_NOOP, 229),
/* 840 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 841 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 842 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_string_array *, int)
/* 843 */ _CFFI_OP(_CFFI_OP_NOOP, 229),
/* 844 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 845 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 846 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_string_array *, int, godot_string const *)
/* 847 */ _CFFI_OP(_CFFI_OP_NOOP, 229),
/* 848 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 849 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 850 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 851 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_vector2_array *)
/* 852 */ _CFFI_OP(_CFFI_OP_NOOP, 258),
/* 853 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 854 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_vector2_array *, godot_array const *)
/* 855 */ _CFFI_OP(_CFFI_OP_NOOP, 258),
/* 856 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 857 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 858 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_vector2_array *, godot_pool_vector2_array const *)
/* 859 */ _CFFI_OP(_CFFI_OP_NOOP, 258),
/* 860 */ _CFFI_OP(_CFFI_OP_NOOP, 487),
/* 861 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 862 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_vector2_array *, godot_vector2 const *)
/* 863 */ _CFFI_OP(_CFFI_OP_NOOP, 258),
/* 864 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 865 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 866 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_vector2_array *, int)
/* 867 */ _CFFI_OP(_CFFI_OP_NOOP, 258),
/* 868 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 869 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 870 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_vector2_array *, int, godot_vector2 const *)
/* 871 */ _CFFI_OP(_CFFI_OP_NOOP, 258),
/* 872 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 873 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 874 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 875 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_vector3_array *)
/* 876 */ _CFFI_OP(_CFFI_OP_NOOP, 270),
/* 877 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 878 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_vector3_array *, godot_array const *)
/* 879 */ _CFFI_OP(_CFFI_OP_NOOP, 270),
/* 880 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 881 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 882 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_vector3_array *, godot_pool_vector3_array const *)
/* 883 */ _CFFI_OP(_CFFI_OP_NOOP, 270),
/* 884 */ _CFFI_OP(_CFFI_OP_NOOP, 491),
/* 885 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 886 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_vector3_array *, godot_vector3 const *)
/* 887 */ _CFFI_OP(_CFFI_OP_NOOP, 270),
/* 888 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 889 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 890 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_vector3_array *, int)
/* 891 */ _CFFI_OP(_CFFI_OP_NOOP, 270),
/* 892 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 893 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 894 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_pool_vector3_array *, int, godot_vector3 const *)
/* 895 */ _CFFI_OP(_CFFI_OP_NOOP, 270),
/* 896 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 897 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 898 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 899 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_quat *, float, float, float, float)
/* 900 */ _CFFI_OP(_CFFI_OP_NOOP, 176),
/* 901 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 902 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 903 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 904 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 905 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 906 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_quat *, godot_quat *)
/* 907 */ _CFFI_OP(_CFFI_OP_NOOP, 176),
/* 908 */ _CFFI_OP(_CFFI_OP_NOOP, 176),
/* 909 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 910 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_quat *, godot_quat *, godot_quat const *, float)
/* 911 */ _CFFI_OP(_CFFI_OP_NOOP, 176),
/* 912 */ _CFFI_OP(_CFFI_OP_NOOP, 176),
/* 913 */ _CFFI_OP(_CFFI_OP_NOOP, 180),
/* 914 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 915 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 916 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_quat *, godot_quat *, godot_quat const *, godot_quat const *, godot_quat const *, float)
/* 917 */ _CFFI_OP(_CFFI_OP_NOOP, 176),
/* 918 */ _CFFI_OP(_CFFI_OP_NOOP, 176),
/* 919 */ _CFFI_OP(_CFFI_OP_NOOP, 180),
/* 920 */ _CFFI_OP(_CFFI_OP_NOOP, 180),
/* 921 */ _CFFI_OP(_CFFI_OP_NOOP, 180),
/* 922 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 923 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 924 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_quat *, godot_string *)
/* 925 */ _CFFI_OP(_CFFI_OP_NOOP, 176),
/* 926 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 927 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 928 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_quat *, godot_vector3 *, godot_vector3 const *)
/* 929 */ _CFFI_OP(_CFFI_OP_NOOP, 176),
/* 930 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 931 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 932 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 933 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_quat *, godot_vector3 const *, float)
/* 934 */ _CFFI_OP(_CFFI_OP_NOOP, 176),
/* 935 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 936 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 937 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 938 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect2 *, float, float, float, float)
/* 939 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 940 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 941 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 942 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 943 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 944 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 945 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect2 *, godot_rect2 *, float)
/* 946 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 947 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 948 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 949 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 950 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect2 *, godot_rect2 *, godot_rect2 const *)
/* 951 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 952 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 953 */ _CFFI_OP(_CFFI_OP_NOOP, 60),
/* 954 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 955 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect2 *, godot_rect2 *, godot_vector2 const *)
/* 956 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 957 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 958 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 959 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 960 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect2 *, godot_string *)
/* 961 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 962 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 963 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 964 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect2 *, godot_vector2 const *, godot_vector2 const *)
/* 965 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 966 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 967 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 968 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 969 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect3 *, godot_rect3 *, float)
/* 970 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 971 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 972 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 973 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 974 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect3 *, godot_rect3 *, godot_rect3 const *)
/* 975 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 976 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 977 */ _CFFI_OP(_CFFI_OP_NOOP, 75),
/* 978 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 979 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect3 *, godot_rect3 *, godot_vector3 const *)
/* 980 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 981 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 982 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 983 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 984 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect3 *, godot_string *)
/* 985 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 986 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 987 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 988 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect3 *, godot_vector3 *)
/* 989 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 990 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 991 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 992 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect3 *, godot_vector3 *, godot_vector3 const *)
/* 993 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 994 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 995 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 996 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 997 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect3 *, godot_vector3 *, int)
/* 998 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 999 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1000 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 1001 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1002 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rect3 *, godot_vector3 const *, godot_vector3 const *)
/* 1003 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 1004 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1005 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1006 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1007 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_rid *)
/* 1008 */ _CFFI_OP(_CFFI_OP_NOOP, 383),
/* 1009 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1010 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_string *)
/* 1011 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 1012 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1013 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_string *, char const *, int)
/* 1014 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 1015 */ _CFFI_OP(_CFFI_OP_NOOP, 219),
/* 1016 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 1017 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1018 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_string *, godot_string const *, godot_string const *)
/* 1019 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 1020 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 1021 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 1022 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1023 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_string *, wchar_t const *, int)
/* 1024 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 1025 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 1026 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 1027 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1028 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_string const *, char *, int *)
/* 1029 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 1030 */ _CFFI_OP(_CFFI_OP_NOOP, 409),
/* 1031 */ _CFFI_OP(_CFFI_OP_NOOP, 133),
/* 1032 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1033 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_string const *, godot_string const *)
/* 1034 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 1035 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 1036 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1037 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform *, godot_basis const *, godot_vector3 const *)
/* 1038 */ _CFFI_OP(_CFFI_OP_POINTER, 1517), // godot_transform *
/* 1039 */ _CFFI_OP(_CFFI_OP_POINTER, 1484), // godot_basis const *
/* 1040 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1041 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1042 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform *, godot_string *)
/* 1043 */ _CFFI_OP(_CFFI_OP_NOOP, 1038),
/* 1044 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 1045 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1046 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform *, godot_transform *)
/* 1047 */ _CFFI_OP(_CFFI_OP_NOOP, 1038),
/* 1048 */ _CFFI_OP(_CFFI_OP_NOOP, 1038),
/* 1049 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1050 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform *, godot_transform *, godot_vector3 const *)
/* 1051 */ _CFFI_OP(_CFFI_OP_NOOP, 1038),
/* 1052 */ _CFFI_OP(_CFFI_OP_NOOP, 1038),
/* 1053 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1054 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1055 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform *, godot_transform *, godot_vector3 const *, float)
/* 1056 */ _CFFI_OP(_CFFI_OP_NOOP, 1038),
/* 1057 */ _CFFI_OP(_CFFI_OP_NOOP, 1038),
/* 1058 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1059 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1060 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1061 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform *, godot_transform *, godot_vector3 const *, godot_vector3 const *)
/* 1062 */ _CFFI_OP(_CFFI_OP_NOOP, 1038),
/* 1063 */ _CFFI_OP(_CFFI_OP_NOOP, 1038),
/* 1064 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1065 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1066 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1067 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform *, godot_vector3 const *, godot_vector3 const *, godot_vector3 const *, godot_vector3 const *)
/* 1068 */ _CFFI_OP(_CFFI_OP_NOOP, 1038),
/* 1069 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1070 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1071 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1072 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1073 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1074 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform2d *, float, godot_vector2 const *)
/* 1075 */ _CFFI_OP(_CFFI_OP_NOOP, 189),
/* 1076 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1077 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 1078 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1079 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform2d *, godot_string *)
/* 1080 */ _CFFI_OP(_CFFI_OP_NOOP, 189),
/* 1081 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 1082 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1083 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform2d *, godot_transform2d *)
/* 1084 */ _CFFI_OP(_CFFI_OP_NOOP, 189),
/* 1085 */ _CFFI_OP(_CFFI_OP_NOOP, 189),
/* 1086 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1087 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform2d *, godot_transform2d *, float)
/* 1088 */ _CFFI_OP(_CFFI_OP_NOOP, 189),
/* 1089 */ _CFFI_OP(_CFFI_OP_NOOP, 189),
/* 1090 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1091 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1092 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform2d *, godot_transform2d *, godot_transform2d const *, float)
/* 1093 */ _CFFI_OP(_CFFI_OP_NOOP, 189),
/* 1094 */ _CFFI_OP(_CFFI_OP_NOOP, 189),
/* 1095 */ _CFFI_OP(_CFFI_OP_POINTER, 1516), // godot_transform2d const *
/* 1096 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1097 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1098 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform2d *, godot_transform2d *, godot_vector2 const *)
/* 1099 */ _CFFI_OP(_CFFI_OP_NOOP, 189),
/* 1100 */ _CFFI_OP(_CFFI_OP_NOOP, 189),
/* 1101 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 1102 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1103 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform2d *, godot_vector2 *)
/* 1104 */ _CFFI_OP(_CFFI_OP_NOOP, 189),
/* 1105 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1106 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1107 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_transform2d *, godot_vector2 const *, godot_vector2 const *, godot_vector2 const *)
/* 1108 */ _CFFI_OP(_CFFI_OP_NOOP, 189),
/* 1109 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 1110 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 1111 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 1112 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1113 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *)
/* 1114 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1115 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1116 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, _Bool)
/* 1117 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1118 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 1),
/* 1119 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1120 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, double)
/* 1121 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1122 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 14), // double
/* 1123 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1124 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_array const *)
/* 1125 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1126 */ _CFFI_OP(_CFFI_OP_NOOP, 4),
/* 1127 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1128 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_basis const *)
/* 1129 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1130 */ _CFFI_OP(_CFFI_OP_NOOP, 1039),
/* 1131 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1132 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_color const *)
/* 1133 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1134 */ _CFFI_OP(_CFFI_OP_NOOP, 333),
/* 1135 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1136 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_dictionary const *)
/* 1137 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1138 */ _CFFI_OP(_CFFI_OP_NOOP, 626),
/* 1139 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1140 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_image const *)
/* 1141 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1142 */ _CFFI_OP(_CFFI_OP_NOOP, 655),
/* 1143 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1144 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_input_event const *)
/* 1145 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1146 */ _CFFI_OP(_CFFI_OP_NOOP, 25),
/* 1147 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1148 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_node_path const *)
/* 1149 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1150 */ _CFFI_OP(_CFFI_OP_POINTER, 1495), // godot_node_path const *
/* 1151 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1152 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_plane const *)
/* 1153 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1154 */ _CFFI_OP(_CFFI_OP_NOOP, 44),
/* 1155 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1156 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_pool_byte_array const *)
/* 1157 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1158 */ _CFFI_OP(_CFFI_OP_NOOP, 467),
/* 1159 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1160 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_pool_color_array const *)
/* 1161 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1162 */ _CFFI_OP(_CFFI_OP_NOOP, 471),
/* 1163 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1164 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_pool_int_array const *)
/* 1165 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1166 */ _CFFI_OP(_CFFI_OP_NOOP, 475),
/* 1167 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1168 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_pool_real_array const *)
/* 1169 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1170 */ _CFFI_OP(_CFFI_OP_NOOP, 479),
/* 1171 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1172 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_pool_string_array const *)
/* 1173 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1174 */ _CFFI_OP(_CFFI_OP_NOOP, 483),
/* 1175 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1176 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_pool_vector2_array const *)
/* 1177 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1178 */ _CFFI_OP(_CFFI_OP_NOOP, 487),
/* 1179 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1180 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_pool_vector3_array const *)
/* 1181 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1182 */ _CFFI_OP(_CFFI_OP_NOOP, 491),
/* 1183 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1184 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_quat const *)
/* 1185 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1186 */ _CFFI_OP(_CFFI_OP_NOOP, 180),
/* 1187 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1188 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_rect2 const *)
/* 1189 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1190 */ _CFFI_OP(_CFFI_OP_NOOP, 60),
/* 1191 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1192 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_rect3 const *)
/* 1193 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1194 */ _CFFI_OP(_CFFI_OP_NOOP, 75),
/* 1195 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1196 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_rid const *)
/* 1197 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1198 */ _CFFI_OP(_CFFI_OP_POINTER, 1510), // godot_rid const *
/* 1199 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1200 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_string const *)
/* 1201 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1202 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 1203 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1204 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_transform const *)
/* 1205 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1206 */ _CFFI_OP(_CFFI_OP_POINTER, 1517), // godot_transform const *
/* 1207 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1208 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_transform2d const *)
/* 1209 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1210 */ _CFFI_OP(_CFFI_OP_NOOP, 1095),
/* 1211 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1212 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_variant *, godot_string const *, godot_variant const * *, int)
/* 1213 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1214 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1215 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 1216 */ _CFFI_OP(_CFFI_OP_POINTER, 8), // godot_variant const * *
/* 1217 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 1218 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1219 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_variant const *)
/* 1220 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1221 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1222 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1223 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_vector2 const *)
/* 1224 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1225 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 1226 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1227 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, godot_vector3 const *)
/* 1228 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1229 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1230 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1231 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, int64_t)
/* 1232 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1233 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 23), // int64_t
/* 1234 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1235 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, uint64_t)
/* 1236 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1237 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 24), // uint64_t
/* 1238 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1239 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant *, void const *)
/* 1240 */ _CFFI_OP(_CFFI_OP_NOOP, 123),
/* 1241 */ _CFFI_OP(_CFFI_OP_POINTER, 1552), // void const *
/* 1242 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1243 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_array *)
/* 1244 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1245 */ _CFFI_OP(_CFFI_OP_NOOP, 233),
/* 1246 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1247 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_basis *)
/* 1248 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1249 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 1250 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1251 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_color *)
/* 1252 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1253 */ _CFFI_OP(_CFFI_OP_NOOP, 165),
/* 1254 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1255 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_dictionary *)
/* 1256 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1257 */ _CFFI_OP(_CFFI_OP_NOOP, 11),
/* 1258 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1259 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_image *)
/* 1260 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1261 */ _CFFI_OP(_CFFI_OP_NOOP, 22),
/* 1262 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1263 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_input_event *)
/* 1264 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1265 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 1266 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1267 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_node_path *)
/* 1268 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1269 */ _CFFI_OP(_CFFI_OP_NOOP, 32),
/* 1270 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1271 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_plane *)
/* 1272 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1273 */ _CFFI_OP(_CFFI_OP_NOOP, 35),
/* 1274 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1275 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_pool_byte_array *)
/* 1276 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1277 */ _CFFI_OP(_CFFI_OP_NOOP, 320),
/* 1278 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1279 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_pool_color_array *)
/* 1280 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1281 */ _CFFI_OP(_CFFI_OP_NOOP, 213),
/* 1282 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1283 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_pool_int_array *)
/* 1284 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1285 */ _CFFI_OP(_CFFI_OP_NOOP, 336),
/* 1286 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1287 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_pool_real_array *)
/* 1288 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1289 */ _CFFI_OP(_CFFI_OP_NOOP, 172),
/* 1290 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1291 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_pool_string_array *)
/* 1292 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1293 */ _CFFI_OP(_CFFI_OP_NOOP, 229),
/* 1294 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1295 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_pool_vector2_array *)
/* 1296 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1297 */ _CFFI_OP(_CFFI_OP_NOOP, 258),
/* 1298 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1299 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_pool_vector3_array *)
/* 1300 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1301 */ _CFFI_OP(_CFFI_OP_NOOP, 270),
/* 1302 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1303 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_quat *)
/* 1304 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1305 */ _CFFI_OP(_CFFI_OP_NOOP, 176),
/* 1306 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1307 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_rect2 *)
/* 1308 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1309 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 1310 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1311 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_rect3 *)
/* 1312 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1313 */ _CFFI_OP(_CFFI_OP_NOOP, 67),
/* 1314 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1315 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_rid *)
/* 1316 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1317 */ _CFFI_OP(_CFFI_OP_NOOP, 383),
/* 1318 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1319 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_string *)
/* 1320 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1321 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 1322 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1323 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_transform *)
/* 1324 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1325 */ _CFFI_OP(_CFFI_OP_NOOP, 1038),
/* 1326 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1327 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_transform2d *)
/* 1328 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1329 */ _CFFI_OP(_CFFI_OP_NOOP, 189),
/* 1330 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1331 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_vector2 *)
/* 1332 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1333 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1334 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1335 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_variant const *, godot_vector3 *)
/* 1336 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 1337 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1338 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1339 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector2 *, float)
/* 1340 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1341 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1342 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1343 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector2 *, float, float)
/* 1344 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1345 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1346 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1347 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1348 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector2 *, godot_string *)
/* 1349 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1350 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 1351 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1352 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector2 *, godot_vector2 *)
/* 1353 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1354 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1355 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1356 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector2 *, godot_vector2 *, float)
/* 1357 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1358 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1359 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1360 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1361 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector2 *, godot_vector2 *, godot_vector2 const *)
/* 1362 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1363 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1364 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 1365 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1366 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector2 *, godot_vector2 *, godot_vector2 const *, float)
/* 1367 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1368 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1369 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 1370 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1371 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1372 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector2 *, godot_vector2 *, godot_vector2 const *, godot_vector2 const *, godot_vector2 const *, float)
/* 1373 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1374 */ _CFFI_OP(_CFFI_OP_NOOP, 192),
/* 1375 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 1376 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 1377 */ _CFFI_OP(_CFFI_OP_NOOP, 64),
/* 1378 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1379 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1380 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector3 *, float, float, float)
/* 1381 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1382 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1383 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1384 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1385 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1386 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector3 *, godot_basis *)
/* 1387 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1388 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 1389 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1390 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector3 *, godot_basis *, godot_vector3 const *)
/* 1391 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1392 */ _CFFI_OP(_CFFI_OP_NOOP, 158),
/* 1393 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1394 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1395 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector3 *, godot_string *)
/* 1396 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1397 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 1398 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1399 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector3 *, godot_vector3 *)
/* 1400 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1401 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1402 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1403 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector3 *, godot_vector3 *, float)
/* 1404 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1405 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1406 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1407 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1408 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector3 *, godot_vector3 *, godot_vector3 const *)
/* 1409 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1410 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1411 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1412 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1413 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector3 *, godot_vector3 *, godot_vector3 const *, float)
/* 1414 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1415 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1416 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1417 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1418 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1419 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector3 *, godot_vector3 *, godot_vector3 const *, godot_vector3 const *, godot_vector3 const *, float)
/* 1420 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1421 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1422 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1423 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1424 */ _CFFI_OP(_CFFI_OP_NOOP, 36),
/* 1425 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1426 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1427 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(godot_vector3 *, int, float)
/* 1428 */ _CFFI_OP(_CFFI_OP_NOOP, 45),
/* 1429 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 1430 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/* 1431 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1432 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(void *)
/* 1433 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 1434 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1435 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(void *, godot_string *)
/* 1436 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 1437 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 1438 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1439 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(void *, int)
/* 1440 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 1441 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 1442 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1443 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(void *, void *, void *)
/* 1444 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 1445 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 1446 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 1447 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1448 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(void *, void *, void *, godot_variant)
/* 1449 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 1450 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 1451 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 1452 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 35), // godot_variant
/* 1453 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1454 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1552), // void()(void *, wchar_t const *, void * *, int, void *, int *)
/* 1455 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 1456 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 1457 */ _CFFI_OP(_CFFI_OP_POINTER, 114), // void * *
/* 1458 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 1459 */ _CFFI_OP(_CFFI_OP_NOOP, 114),
/* 1460 */ _CFFI_OP(_CFFI_OP_NOOP, 133),
/* 1461 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1462 */ _CFFI_OP(_CFFI_OP_FUNCTION, 1553), // wchar_t *()(godot_string *, int)
/* 1463 */ _CFFI_OP(_CFFI_OP_NOOP, 535),
/* 1464 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 1465 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1466 */ _CFFI_OP(_CFFI_OP_FUNCTION, 118), // wchar_t const *()(godot_string const *)
/* 1467 */ _CFFI_OP(_CFFI_OP_NOOP, 29),
/* 1468 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 1469 */ _CFFI_OP(_CFFI_OP_POINTER, 113), // _Bool(*)(void *)
/* 1470 */ _CFFI_OP(_CFFI_OP_POINTER, 116), // _Bool(*)(void *, wchar_t const *)
/* 1471 */ _CFFI_OP(_CFFI_OP_POINTER, 120), // _Bool(*)(void *, wchar_t const *, godot_variant *)
/* 1472 */ _CFFI_OP(_CFFI_OP_POINTER, 125), // _Bool(*)(void *, wchar_t const *, godot_variant const *)
/* 1473 */ _CFFI_OP(_CFFI_OP_POINTER, 130), // _Bool(*)(void *, wchar_t const *, int *)
/* 1474 */ _CFFI_OP(_CFFI_OP_POINTER, 135), // _Bool(*)(void *, wchar_t const *, pybind_prop_info *)
/* 1475 */ _CFFI_OP(_CFFI_OP_POINTER, 140), // _Bool(*)(wchar_t const *, wchar_t const *, wchar_t const *)
/* 1476 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 2), // char
/* 1477 */ _CFFI_OP(_CFFI_OP_ENUM, 0), // enum $1
/* 1478 */ _CFFI_OP(_CFFI_OP_ENUM, 1), // enum $2
/* 1479 */ _CFFI_OP(_CFFI_OP_ENUM, 3), // enum MethodFlags
/* 1480 */ _CFFI_OP(_CFFI_OP_POINTER, 1481), // enum godot_input_event_type *
/* 1481 */ _CFFI_OP(_CFFI_OP_ENUM, 5), // enum godot_input_event_type
/* 1482 */ _CFFI_OP(_CFFI_OP_POINTER, 41), // float *
/* 1483 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 1), // godot_array
/* 1484 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 2), // godot_basis
/* 1485 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 3), // godot_color
/* 1486 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 4), // godot_dictionary
/* 1487 */ _CFFI_OP(_CFFI_OP_ENUM, 4), // godot_error
/* 1488 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 5), // godot_image
/* 1489 */ _CFFI_OP(_CFFI_OP_ENUM, 2), // godot_image_format
/* 1490 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 6), // godot_input_event
/* 1491 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 11), // godot_method_bind
/* 1492 */ _CFFI_OP(_CFFI_OP_ENUM, 6), // godot_method_rpc_mode
/* 1493 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 12), // godot_native_init_options
/* 1494 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 13), // godot_native_terminate_options
/* 1495 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 14), // godot_node_path
/* 1496 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 15), // godot_plane
/* 1497 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 16), // godot_pool_byte_array
/* 1498 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 17), // godot_pool_color_array
/* 1499 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 18), // godot_pool_int_array
/* 1500 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 19), // godot_pool_real_array
/* 1501 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 20), // godot_pool_string_array
/* 1502 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 21), // godot_pool_vector2_array
/* 1503 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 22), // godot_pool_vector3_array
/* 1504 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 23), // godot_property_attributes
/* 1505 */ _CFFI_OP(_CFFI_OP_ENUM, 7), // godot_property_hint
/* 1506 */ _CFFI_OP(_CFFI_OP_ENUM, 8), // godot_property_usage_flags
/* 1507 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 26), // godot_quat
/* 1508 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 27), // godot_rect2
/* 1509 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 28), // godot_rect3
/* 1510 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 29), // godot_rid
/* 1511 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 30), // godot_signal
/* 1512 */ _CFFI_OP(_CFFI_OP_POINTER, 1513), // godot_signal_argument *
/* 1513 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 31), // godot_signal_argument
/* 1514 */ _CFFI_OP(_CFFI_OP_POINTER, 222), // godot_string const *(*)(void *)
/* 1515 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 32), // godot_string
/* 1516 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 34), // godot_transform2d
/* 1517 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 33), // godot_transform
/* 1518 */ _CFFI_OP(_CFFI_OP_POINTER, 242), // godot_variant(*)(void *, void *, void *)
/* 1519 */ _CFFI_OP(_CFFI_OP_POINTER, 247), // godot_variant(*)(void *, void *, void *, int, godot_variant * *)
/* 1520 */ _CFFI_OP(_CFFI_OP_ENUM, 9), // godot_variant_type
/* 1521 */ _CFFI_OP(_CFFI_OP_POINTER, 388), // int(*)(void *, wchar_t const *)
/* 1522 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 0), // pybind_prop_info
/* 1523 */ _CFFI_OP(_CFFI_OP_POINTER, 1524), // uint32_t *
/* 1524 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22), // uint32_t
/* 1525 */ _CFFI_OP(_CFFI_OP_ARRAY, 325), // uint8_t[12]
/* 1526 */ (_cffi_opcode_t)(12),
/* 1527 */ _CFFI_OP(_CFFI_OP_ARRAY, 325), // uint8_t[16]
/* 1528 */ (_cffi_opcode_t)(16),
/* 1529 */ _CFFI_OP(_CFFI_OP_ARRAY, 325), // uint8_t[1]
/* 1530 */ (_cffi_opcode_t)(1),
/* 1531 */ _CFFI_OP(_CFFI_OP_ARRAY, 325), // uint8_t[24]
/* 1532 */ (_cffi_opcode_t)(24),
/* 1533 */ _CFFI_OP(_CFFI_OP_ARRAY, 325), // uint8_t[32]
/* 1534 */ (_cffi_opcode_t)(32),
/* 1535 */ _CFFI_OP(_CFFI_OP_ARRAY, 325), // uint8_t[36]
/* 1536 */ (_cffi_opcode_t)(36),
/* 1537 */ _CFFI_OP(_CFFI_OP_ARRAY, 325), // uint8_t[48]
/* 1538 */ (_cffi_opcode_t)(48),
/* 1539 */ _CFFI_OP(_CFFI_OP_ARRAY, 325), // uint8_t[56]
/* 1540 */ (_cffi_opcode_t)(56),
/* 1541 */ _CFFI_OP(_CFFI_OP_ARRAY, 325), // uint8_t[8]
/* 1542 */ (_cffi_opcode_t)(8),
/* 1543 */ _CFFI_OP(_CFFI_OP_POINTER, 427), // void *(*)(void *, void *)
/* 1544 */ _CFFI_OP(_CFFI_OP_POINTER, 431), // void *(*)(void)
/* 1545 */ _CFFI_OP(_CFFI_OP_POINTER, 433), // void *(*)(wchar_t const *)
/* 1546 */ _CFFI_OP(_CFFI_OP_POINTER, 1432), // void(*)(void *)
/* 1547 */ _CFFI_OP(_CFFI_OP_POINTER, 1435), // void(*)(void *, godot_string *)
/* 1548 */ _CFFI_OP(_CFFI_OP_POINTER, 1439), // void(*)(void *, int)
/* 1549 */ _CFFI_OP(_CFFI_OP_POINTER, 1443), // void(*)(void *, void *, void *)
/* 1550 */ _CFFI_OP(_CFFI_OP_POINTER, 1448), // void(*)(void *, void *, void *, godot_variant)
/* 1551 */ _CFFI_OP(_CFFI_OP_POINTER, 1454), // void(*)(void *, wchar_t const *, void * *, int, void *, int *)
/* 1552 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 0), // void
/* 1553 */ _CFFI_OP(_CFFI_OP_POINTER, 1554), // wchar_t *
/* 1554 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 16), // wchar_t
};

static int _cffi_const_GODOT_BUTTON_LEFT(unsigned long long *o)
{
  int n = (GODOT_BUTTON_LEFT) <= 0;
  *o = (unsigned long long)((GODOT_BUTTON_LEFT) | 0);  /* check that GODOT_BUTTON_LEFT is an integer */
  return n;
}

static int _cffi_const_GODOT_BUTTON_RIGHT(unsigned long long *o)
{
  int n = (GODOT_BUTTON_RIGHT) <= 0;
  *o = (unsigned long long)((GODOT_BUTTON_RIGHT) | 0);  /* check that GODOT_BUTTON_RIGHT is an integer */
  return n;
}

static int _cffi_const_GODOT_BUTTON_MIDDLE(unsigned long long *o)
{
  int n = (GODOT_BUTTON_MIDDLE) <= 0;
  *o = (unsigned long long)((GODOT_BUTTON_MIDDLE) | 0);  /* check that GODOT_BUTTON_MIDDLE is an integer */
  return n;
}

static int _cffi_const_GODOT_BUTTON_WHEEL_UP(unsigned long long *o)
{
  int n = (GODOT_BUTTON_WHEEL_UP) <= 0;
  *o = (unsigned long long)((GODOT_BUTTON_WHEEL_UP) | 0);  /* check that GODOT_BUTTON_WHEEL_UP is an integer */
  return n;
}

static int _cffi_const_GODOT_BUTTON_WHEEL_DOWN(unsigned long long *o)
{
  int n = (GODOT_BUTTON_WHEEL_DOWN) <= 0;
  *o = (unsigned long long)((GODOT_BUTTON_WHEEL_DOWN) | 0);  /* check that GODOT_BUTTON_WHEEL_DOWN is an integer */
  return n;
}

static int _cffi_const_GODOT_BUTTON_WHEEL_LEFT(unsigned long long *o)
{
  int n = (GODOT_BUTTON_WHEEL_LEFT) <= 0;
  *o = (unsigned long long)((GODOT_BUTTON_WHEEL_LEFT) | 0);  /* check that GODOT_BUTTON_WHEEL_LEFT is an integer */
  return n;
}

static int _cffi_const_GODOT_BUTTON_WHEEL_RIGHT(unsigned long long *o)
{
  int n = (GODOT_BUTTON_WHEEL_RIGHT) <= 0;
  *o = (unsigned long long)((GODOT_BUTTON_WHEEL_RIGHT) | 0);  /* check that GODOT_BUTTON_WHEEL_RIGHT is an integer */
  return n;
}

static int _cffi_const_GODOT_BUTTON_MASK_LEFT(unsigned long long *o)
{
  int n = (GODOT_BUTTON_MASK_LEFT) <= 0;
  *o = (unsigned long long)((GODOT_BUTTON_MASK_LEFT) | 0);  /* check that GODOT_BUTTON_MASK_LEFT is an integer */
  return n;
}

static int _cffi_const_GODOT_BUTTON_MASK_RIGHT(unsigned long long *o)
{
  int n = (GODOT_BUTTON_MASK_RIGHT) <= 0;
  *o = (unsigned long long)((GODOT_BUTTON_MASK_RIGHT) | 0);  /* check that GODOT_BUTTON_MASK_RIGHT is an integer */
  return n;
}

static int _cffi_const_GODOT_BUTTON_MASK_MIDDLE(unsigned long long *o)
{
  int n = (GODOT_BUTTON_MASK_MIDDLE) <= 0;
  *o = (unsigned long long)((GODOT_BUTTON_MASK_MIDDLE) | 0);  /* check that GODOT_BUTTON_MASK_MIDDLE is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_0(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_0) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_0) | 0);  /* check that GODOT_JOY_BUTTON_0 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_1(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_1) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_1) | 0);  /* check that GODOT_JOY_BUTTON_1 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_2(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_2) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_2) | 0);  /* check that GODOT_JOY_BUTTON_2 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_3(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_3) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_3) | 0);  /* check that GODOT_JOY_BUTTON_3 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_4(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_4) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_4) | 0);  /* check that GODOT_JOY_BUTTON_4 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_5(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_5) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_5) | 0);  /* check that GODOT_JOY_BUTTON_5 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_6(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_6) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_6) | 0);  /* check that GODOT_JOY_BUTTON_6 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_7(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_7) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_7) | 0);  /* check that GODOT_JOY_BUTTON_7 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_8(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_8) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_8) | 0);  /* check that GODOT_JOY_BUTTON_8 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_9(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_9) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_9) | 0);  /* check that GODOT_JOY_BUTTON_9 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_10(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_10) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_10) | 0);  /* check that GODOT_JOY_BUTTON_10 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_11(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_11) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_11) | 0);  /* check that GODOT_JOY_BUTTON_11 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_12(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_12) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_12) | 0);  /* check that GODOT_JOY_BUTTON_12 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_13(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_13) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_13) | 0);  /* check that GODOT_JOY_BUTTON_13 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_14(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_14) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_14) | 0);  /* check that GODOT_JOY_BUTTON_14 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_15(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_15) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_15) | 0);  /* check that GODOT_JOY_BUTTON_15 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_BUTTON_MAX(unsigned long long *o)
{
  int n = (GODOT_JOY_BUTTON_MAX) <= 0;
  *o = (unsigned long long)((GODOT_JOY_BUTTON_MAX) | 0);  /* check that GODOT_JOY_BUTTON_MAX is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_L(unsigned long long *o)
{
  int n = (GODOT_JOY_L) <= 0;
  *o = (unsigned long long)((GODOT_JOY_L) | 0);  /* check that GODOT_JOY_L is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_R(unsigned long long *o)
{
  int n = (GODOT_JOY_R) <= 0;
  *o = (unsigned long long)((GODOT_JOY_R) | 0);  /* check that GODOT_JOY_R is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_L2(unsigned long long *o)
{
  int n = (GODOT_JOY_L2) <= 0;
  *o = (unsigned long long)((GODOT_JOY_L2) | 0);  /* check that GODOT_JOY_L2 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_R2(unsigned long long *o)
{
  int n = (GODOT_JOY_R2) <= 0;
  *o = (unsigned long long)((GODOT_JOY_R2) | 0);  /* check that GODOT_JOY_R2 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_L3(unsigned long long *o)
{
  int n = (GODOT_JOY_L3) <= 0;
  *o = (unsigned long long)((GODOT_JOY_L3) | 0);  /* check that GODOT_JOY_L3 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_R3(unsigned long long *o)
{
  int n = (GODOT_JOY_R3) <= 0;
  *o = (unsigned long long)((GODOT_JOY_R3) | 0);  /* check that GODOT_JOY_R3 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_SELECT(unsigned long long *o)
{
  int n = (GODOT_JOY_SELECT) <= 0;
  *o = (unsigned long long)((GODOT_JOY_SELECT) | 0);  /* check that GODOT_JOY_SELECT is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_START(unsigned long long *o)
{
  int n = (GODOT_JOY_START) <= 0;
  *o = (unsigned long long)((GODOT_JOY_START) | 0);  /* check that GODOT_JOY_START is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_DPAD_UP(unsigned long long *o)
{
  int n = (GODOT_JOY_DPAD_UP) <= 0;
  *o = (unsigned long long)((GODOT_JOY_DPAD_UP) | 0);  /* check that GODOT_JOY_DPAD_UP is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_DPAD_DOWN(unsigned long long *o)
{
  int n = (GODOT_JOY_DPAD_DOWN) <= 0;
  *o = (unsigned long long)((GODOT_JOY_DPAD_DOWN) | 0);  /* check that GODOT_JOY_DPAD_DOWN is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_DPAD_LEFT(unsigned long long *o)
{
  int n = (GODOT_JOY_DPAD_LEFT) <= 0;
  *o = (unsigned long long)((GODOT_JOY_DPAD_LEFT) | 0);  /* check that GODOT_JOY_DPAD_LEFT is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_DPAD_RIGHT(unsigned long long *o)
{
  int n = (GODOT_JOY_DPAD_RIGHT) <= 0;
  *o = (unsigned long long)((GODOT_JOY_DPAD_RIGHT) | 0);  /* check that GODOT_JOY_DPAD_RIGHT is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_SNES_B(unsigned long long *o)
{
  int n = (GODOT_JOY_SNES_B) <= 0;
  *o = (unsigned long long)((GODOT_JOY_SNES_B) | 0);  /* check that GODOT_JOY_SNES_B is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_SNES_A(unsigned long long *o)
{
  int n = (GODOT_JOY_SNES_A) <= 0;
  *o = (unsigned long long)((GODOT_JOY_SNES_A) | 0);  /* check that GODOT_JOY_SNES_A is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_SNES_Y(unsigned long long *o)
{
  int n = (GODOT_JOY_SNES_Y) <= 0;
  *o = (unsigned long long)((GODOT_JOY_SNES_Y) | 0);  /* check that GODOT_JOY_SNES_Y is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_SNES_X(unsigned long long *o)
{
  int n = (GODOT_JOY_SNES_X) <= 0;
  *o = (unsigned long long)((GODOT_JOY_SNES_X) | 0);  /* check that GODOT_JOY_SNES_X is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_SONY_CIRCLE(unsigned long long *o)
{
  int n = (GODOT_JOY_SONY_CIRCLE) <= 0;
  *o = (unsigned long long)((GODOT_JOY_SONY_CIRCLE) | 0);  /* check that GODOT_JOY_SONY_CIRCLE is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_SONY_X(unsigned long long *o)
{
  int n = (GODOT_JOY_SONY_X) <= 0;
  *o = (unsigned long long)((GODOT_JOY_SONY_X) | 0);  /* check that GODOT_JOY_SONY_X is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_SONY_SQUARE(unsigned long long *o)
{
  int n = (GODOT_JOY_SONY_SQUARE) <= 0;
  *o = (unsigned long long)((GODOT_JOY_SONY_SQUARE) | 0);  /* check that GODOT_JOY_SONY_SQUARE is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_SONY_TRIANGLE(unsigned long long *o)
{
  int n = (GODOT_JOY_SONY_TRIANGLE) <= 0;
  *o = (unsigned long long)((GODOT_JOY_SONY_TRIANGLE) | 0);  /* check that GODOT_JOY_SONY_TRIANGLE is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_SEGA_B(unsigned long long *o)
{
  int n = (GODOT_JOY_SEGA_B) <= 0;
  *o = (unsigned long long)((GODOT_JOY_SEGA_B) | 0);  /* check that GODOT_JOY_SEGA_B is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_SEGA_A(unsigned long long *o)
{
  int n = (GODOT_JOY_SEGA_A) <= 0;
  *o = (unsigned long long)((GODOT_JOY_SEGA_A) | 0);  /* check that GODOT_JOY_SEGA_A is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_SEGA_X(unsigned long long *o)
{
  int n = (GODOT_JOY_SEGA_X) <= 0;
  *o = (unsigned long long)((GODOT_JOY_SEGA_X) | 0);  /* check that GODOT_JOY_SEGA_X is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_SEGA_Y(unsigned long long *o)
{
  int n = (GODOT_JOY_SEGA_Y) <= 0;
  *o = (unsigned long long)((GODOT_JOY_SEGA_Y) | 0);  /* check that GODOT_JOY_SEGA_Y is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_XBOX_B(unsigned long long *o)
{
  int n = (GODOT_JOY_XBOX_B) <= 0;
  *o = (unsigned long long)((GODOT_JOY_XBOX_B) | 0);  /* check that GODOT_JOY_XBOX_B is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_XBOX_A(unsigned long long *o)
{
  int n = (GODOT_JOY_XBOX_A) <= 0;
  *o = (unsigned long long)((GODOT_JOY_XBOX_A) | 0);  /* check that GODOT_JOY_XBOX_A is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_XBOX_X(unsigned long long *o)
{
  int n = (GODOT_JOY_XBOX_X) <= 0;
  *o = (unsigned long long)((GODOT_JOY_XBOX_X) | 0);  /* check that GODOT_JOY_XBOX_X is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_XBOX_Y(unsigned long long *o)
{
  int n = (GODOT_JOY_XBOX_Y) <= 0;
  *o = (unsigned long long)((GODOT_JOY_XBOX_Y) | 0);  /* check that GODOT_JOY_XBOX_Y is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_DS_A(unsigned long long *o)
{
  int n = (GODOT_JOY_DS_A) <= 0;
  *o = (unsigned long long)((GODOT_JOY_DS_A) | 0);  /* check that GODOT_JOY_DS_A is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_DS_B(unsigned long long *o)
{
  int n = (GODOT_JOY_DS_B) <= 0;
  *o = (unsigned long long)((GODOT_JOY_DS_B) | 0);  /* check that GODOT_JOY_DS_B is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_DS_X(unsigned long long *o)
{
  int n = (GODOT_JOY_DS_X) <= 0;
  *o = (unsigned long long)((GODOT_JOY_DS_X) | 0);  /* check that GODOT_JOY_DS_X is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_DS_Y(unsigned long long *o)
{
  int n = (GODOT_JOY_DS_Y) <= 0;
  *o = (unsigned long long)((GODOT_JOY_DS_Y) | 0);  /* check that GODOT_JOY_DS_Y is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_WII_C(unsigned long long *o)
{
  int n = (GODOT_JOY_WII_C) <= 0;
  *o = (unsigned long long)((GODOT_JOY_WII_C) | 0);  /* check that GODOT_JOY_WII_C is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_WII_Z(unsigned long long *o)
{
  int n = (GODOT_JOY_WII_Z) <= 0;
  *o = (unsigned long long)((GODOT_JOY_WII_Z) | 0);  /* check that GODOT_JOY_WII_Z is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_WII_MINUS(unsigned long long *o)
{
  int n = (GODOT_JOY_WII_MINUS) <= 0;
  *o = (unsigned long long)((GODOT_JOY_WII_MINUS) | 0);  /* check that GODOT_JOY_WII_MINUS is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_WII_PLUS(unsigned long long *o)
{
  int n = (GODOT_JOY_WII_PLUS) <= 0;
  *o = (unsigned long long)((GODOT_JOY_WII_PLUS) | 0);  /* check that GODOT_JOY_WII_PLUS is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_AXIS_0(unsigned long long *o)
{
  int n = (GODOT_JOY_AXIS_0) <= 0;
  *o = (unsigned long long)((GODOT_JOY_AXIS_0) | 0);  /* check that GODOT_JOY_AXIS_0 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_AXIS_1(unsigned long long *o)
{
  int n = (GODOT_JOY_AXIS_1) <= 0;
  *o = (unsigned long long)((GODOT_JOY_AXIS_1) | 0);  /* check that GODOT_JOY_AXIS_1 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_AXIS_2(unsigned long long *o)
{
  int n = (GODOT_JOY_AXIS_2) <= 0;
  *o = (unsigned long long)((GODOT_JOY_AXIS_2) | 0);  /* check that GODOT_JOY_AXIS_2 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_AXIS_3(unsigned long long *o)
{
  int n = (GODOT_JOY_AXIS_3) <= 0;
  *o = (unsigned long long)((GODOT_JOY_AXIS_3) | 0);  /* check that GODOT_JOY_AXIS_3 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_AXIS_4(unsigned long long *o)
{
  int n = (GODOT_JOY_AXIS_4) <= 0;
  *o = (unsigned long long)((GODOT_JOY_AXIS_4) | 0);  /* check that GODOT_JOY_AXIS_4 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_AXIS_5(unsigned long long *o)
{
  int n = (GODOT_JOY_AXIS_5) <= 0;
  *o = (unsigned long long)((GODOT_JOY_AXIS_5) | 0);  /* check that GODOT_JOY_AXIS_5 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_AXIS_6(unsigned long long *o)
{
  int n = (GODOT_JOY_AXIS_6) <= 0;
  *o = (unsigned long long)((GODOT_JOY_AXIS_6) | 0);  /* check that GODOT_JOY_AXIS_6 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_AXIS_7(unsigned long long *o)
{
  int n = (GODOT_JOY_AXIS_7) <= 0;
  *o = (unsigned long long)((GODOT_JOY_AXIS_7) | 0);  /* check that GODOT_JOY_AXIS_7 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_AXIS_MAX(unsigned long long *o)
{
  int n = (GODOT_JOY_AXIS_MAX) <= 0;
  *o = (unsigned long long)((GODOT_JOY_AXIS_MAX) | 0);  /* check that GODOT_JOY_AXIS_MAX is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_ANALOG_0_X(unsigned long long *o)
{
  int n = (GODOT_JOY_ANALOG_0_X) <= 0;
  *o = (unsigned long long)((GODOT_JOY_ANALOG_0_X) | 0);  /* check that GODOT_JOY_ANALOG_0_X is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_ANALOG_0_Y(unsigned long long *o)
{
  int n = (GODOT_JOY_ANALOG_0_Y) <= 0;
  *o = (unsigned long long)((GODOT_JOY_ANALOG_0_Y) | 0);  /* check that GODOT_JOY_ANALOG_0_Y is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_ANALOG_1_X(unsigned long long *o)
{
  int n = (GODOT_JOY_ANALOG_1_X) <= 0;
  *o = (unsigned long long)((GODOT_JOY_ANALOG_1_X) | 0);  /* check that GODOT_JOY_ANALOG_1_X is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_ANALOG_1_Y(unsigned long long *o)
{
  int n = (GODOT_JOY_ANALOG_1_Y) <= 0;
  *o = (unsigned long long)((GODOT_JOY_ANALOG_1_Y) | 0);  /* check that GODOT_JOY_ANALOG_1_Y is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_ANALOG_2_X(unsigned long long *o)
{
  int n = (GODOT_JOY_ANALOG_2_X) <= 0;
  *o = (unsigned long long)((GODOT_JOY_ANALOG_2_X) | 0);  /* check that GODOT_JOY_ANALOG_2_X is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_ANALOG_2_Y(unsigned long long *o)
{
  int n = (GODOT_JOY_ANALOG_2_Y) <= 0;
  *o = (unsigned long long)((GODOT_JOY_ANALOG_2_Y) | 0);  /* check that GODOT_JOY_ANALOG_2_Y is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_ANALOG_L2(unsigned long long *o)
{
  int n = (GODOT_JOY_ANALOG_L2) <= 0;
  *o = (unsigned long long)((GODOT_JOY_ANALOG_L2) | 0);  /* check that GODOT_JOY_ANALOG_L2 is an integer */
  return n;
}

static int _cffi_const_GODOT_JOY_ANALOG_R2(unsigned long long *o)
{
  int n = (GODOT_JOY_ANALOG_R2) <= 0;
  *o = (unsigned long long)((GODOT_JOY_ANALOG_R2) | 0);  /* check that GODOT_JOY_ANALOG_R2 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_L8(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_L8) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_L8) | 0);  /* check that GODOT_IMAGE_FORMAT_L8 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_LA8(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_LA8) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_LA8) | 0);  /* check that GODOT_IMAGE_FORMAT_LA8 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_R8(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_R8) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_R8) | 0);  /* check that GODOT_IMAGE_FORMAT_R8 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RG8(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RG8) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RG8) | 0);  /* check that GODOT_IMAGE_FORMAT_RG8 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RGB8(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RGB8) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RGB8) | 0);  /* check that GODOT_IMAGE_FORMAT_RGB8 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RGBA8(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RGBA8) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RGBA8) | 0);  /* check that GODOT_IMAGE_FORMAT_RGBA8 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RGB565(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RGB565) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RGB565) | 0);  /* check that GODOT_IMAGE_FORMAT_RGB565 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RGBA4444(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RGBA4444) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RGBA4444) | 0);  /* check that GODOT_IMAGE_FORMAT_RGBA4444 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RGBA5551(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RGBA5551) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RGBA5551) | 0);  /* check that GODOT_IMAGE_FORMAT_RGBA5551 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RF(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RF) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RF) | 0);  /* check that GODOT_IMAGE_FORMAT_RF is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RGF(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RGF) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RGF) | 0);  /* check that GODOT_IMAGE_FORMAT_RGF is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RGBF(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RGBF) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RGBF) | 0);  /* check that GODOT_IMAGE_FORMAT_RGBF is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RGBAF(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RGBAF) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RGBAF) | 0);  /* check that GODOT_IMAGE_FORMAT_RGBAF is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RH(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RH) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RH) | 0);  /* check that GODOT_IMAGE_FORMAT_RH is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RGH(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RGH) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RGH) | 0);  /* check that GODOT_IMAGE_FORMAT_RGH is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RGBH(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RGBH) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RGBH) | 0);  /* check that GODOT_IMAGE_FORMAT_RGBH is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_RGBAH(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_RGBAH) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_RGBAH) | 0);  /* check that GODOT_IMAGE_FORMAT_RGBAH is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_DXT1(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_DXT1) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_DXT1) | 0);  /* check that GODOT_IMAGE_FORMAT_DXT1 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_DXT3(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_DXT3) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_DXT3) | 0);  /* check that GODOT_IMAGE_FORMAT_DXT3 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_DXT5(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_DXT5) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_DXT5) | 0);  /* check that GODOT_IMAGE_FORMAT_DXT5 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_ATI1(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_ATI1) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_ATI1) | 0);  /* check that GODOT_IMAGE_FORMAT_ATI1 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_ATI2(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_ATI2) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_ATI2) | 0);  /* check that GODOT_IMAGE_FORMAT_ATI2 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_BPTC_RGBA(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_BPTC_RGBA) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_BPTC_RGBA) | 0);  /* check that GODOT_IMAGE_FORMAT_BPTC_RGBA is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_BPTC_RGBF(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_BPTC_RGBF) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_BPTC_RGBF) | 0);  /* check that GODOT_IMAGE_FORMAT_BPTC_RGBF is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_BPTC_RGBFU(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_BPTC_RGBFU) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_BPTC_RGBFU) | 0);  /* check that GODOT_IMAGE_FORMAT_BPTC_RGBFU is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_PVRTC2(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_PVRTC2) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_PVRTC2) | 0);  /* check that GODOT_IMAGE_FORMAT_PVRTC2 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_PVRTC2A(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_PVRTC2A) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_PVRTC2A) | 0);  /* check that GODOT_IMAGE_FORMAT_PVRTC2A is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_PVRTC4(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_PVRTC4) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_PVRTC4) | 0);  /* check that GODOT_IMAGE_FORMAT_PVRTC4 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_PVRTC4A(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_PVRTC4A) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_PVRTC4A) | 0);  /* check that GODOT_IMAGE_FORMAT_PVRTC4A is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_ETC(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_ETC) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_ETC) | 0);  /* check that GODOT_IMAGE_FORMAT_ETC is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_ETC2_R11(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_ETC2_R11) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_ETC2_R11) | 0);  /* check that GODOT_IMAGE_FORMAT_ETC2_R11 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_ETC2_R11S(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_ETC2_R11S) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_ETC2_R11S) | 0);  /* check that GODOT_IMAGE_FORMAT_ETC2_R11S is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_ETC2_RG11(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_ETC2_RG11) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_ETC2_RG11) | 0);  /* check that GODOT_IMAGE_FORMAT_ETC2_RG11 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_ETC2_RG11S(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_ETC2_RG11S) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_ETC2_RG11S) | 0);  /* check that GODOT_IMAGE_FORMAT_ETC2_RG11S is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_ETC2_RGB8(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_ETC2_RGB8) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_ETC2_RGB8) | 0);  /* check that GODOT_IMAGE_FORMAT_ETC2_RGB8 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_ETC2_RGBA8(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_ETC2_RGBA8) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_ETC2_RGBA8) | 0);  /* check that GODOT_IMAGE_FORMAT_ETC2_RGBA8 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_ETC2_RGB8A1(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_ETC2_RGB8A1) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_ETC2_RGB8A1) | 0);  /* check that GODOT_IMAGE_FORMAT_ETC2_RGB8A1 is an integer */
  return n;
}

static int _cffi_const_GODOT_IMAGE_FORMAT_MAX(unsigned long long *o)
{
  int n = (GODOT_IMAGE_FORMAT_MAX) <= 0;
  *o = (unsigned long long)((GODOT_IMAGE_FORMAT_MAX) | 0);  /* check that GODOT_IMAGE_FORMAT_MAX is an integer */
  return n;
}

_CFFI_UNUSED_FN
static void _cffi_checkfld_typedef_pybind_prop_info(pybind_prop_info *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  (void)((p->type) | 0);  /* check that 'pybind_prop_info.type' is an integer */
  { godot_string *tmp = &p->name; (void)tmp; }
  (void)((p->hint) | 0);  /* check that 'pybind_prop_info.hint' is an integer */
  { godot_string *tmp = &p->hint_string; (void)tmp; }
  (void)((p->usage) | 0);  /* check that 'pybind_prop_info.usage' is an integer */
}
struct _cffi_align_typedef_pybind_prop_info { char x; pybind_prop_info y; };

static struct _cffi_externpy_s _cffi_externpy__pybind_call_meth =
  { "pythonscriptcffi.pybind_call_meth", 0 };

CFFI_DLLEXPORT void pybind_call_meth(void * a0, wchar_t const * a1, void * * a2, int a3, void * a4, int * a5)
{
  char a[48];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(wchar_t const * *)(p + 8) = a1;
  *(void * * *)(p + 16) = a2;
  *(int *)(p + 24) = a3;
  *(void * *)(p + 32) = a4;
  *(int * *)(p + 40) = a5;
  _cffi_call_python(&_cffi_externpy__pybind_call_meth, p);
}

static struct _cffi_externpy_s _cffi_externpy__pybind_get_class_name =
  { "pythonscriptcffi.pybind_get_class_name", 0 };

CFFI_DLLEXPORT void pybind_get_class_name(void * a0, godot_string * a1)
{
  char a[16];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(godot_string * *)(p + 8) = a1;
  _cffi_call_python(&_cffi_externpy__pybind_get_class_name, p);
}

static struct _cffi_externpy_s _cffi_externpy__pybind_get_meth_info =
  { "pythonscriptcffi.pybind_get_meth_info", (int)sizeof(_Bool) };

CFFI_DLLEXPORT _Bool pybind_get_meth_info(void * a0, wchar_t const * a1, int * a2)
{
  char a[24];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(wchar_t const * *)(p + 8) = a1;
  *(int * *)(p + 16) = a2;
  _cffi_call_python(&_cffi_externpy__pybind_get_meth_info, p);
  return *(_Bool *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_get_meth_list =
  { "pythonscriptcffi.pybind_get_meth_list", (int)sizeof(godot_string const *) };

CFFI_DLLEXPORT godot_string const * pybind_get_meth_list(void * a0)
{
  char a[8];
  char *p = a;
  *(void * *)(p + 0) = a0;
  _cffi_call_python(&_cffi_externpy__pybind_get_meth_list, p);
  return *(godot_string const * *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_get_prop =
  { "pythonscriptcffi.pybind_get_prop", (int)sizeof(_Bool) };

CFFI_DLLEXPORT _Bool pybind_get_prop(void * a0, wchar_t const * a1, godot_variant * a2)
{
  char a[24];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(wchar_t const * *)(p + 8) = a1;
  *(godot_variant * *)(p + 16) = a2;
  _cffi_call_python(&_cffi_externpy__pybind_get_prop, p);
  return *(_Bool *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_get_prop_default_value =
  { "pythonscriptcffi.pybind_get_prop_default_value", (int)sizeof(_Bool) };

CFFI_DLLEXPORT _Bool pybind_get_prop_default_value(void * a0, wchar_t const * a1, godot_variant * a2)
{
  char a[24];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(wchar_t const * *)(p + 8) = a1;
  *(godot_variant * *)(p + 16) = a2;
  _cffi_call_python(&_cffi_externpy__pybind_get_prop_default_value, p);
  return *(_Bool *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_get_prop_info =
  { "pythonscriptcffi.pybind_get_prop_info", (int)sizeof(_Bool) };

CFFI_DLLEXPORT _Bool pybind_get_prop_info(void * a0, wchar_t const * a1, pybind_prop_info * a2)
{
  char a[24];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(wchar_t const * *)(p + 8) = a1;
  *(pybind_prop_info * *)(p + 16) = a2;
  _cffi_call_python(&_cffi_externpy__pybind_get_prop_info, p);
  return *(_Bool *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_get_prop_list =
  { "pythonscriptcffi.pybind_get_prop_list", (int)sizeof(godot_string const *) };

CFFI_DLLEXPORT godot_string const * pybind_get_prop_list(void * a0)
{
  char a[8];
  char *p = a;
  *(void * *)(p + 0) = a0;
  _cffi_call_python(&_cffi_externpy__pybind_get_prop_list, p);
  return *(godot_string const * *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_get_prop_type =
  { "pythonscriptcffi.pybind_get_prop_type", (int)sizeof(_Bool) };

CFFI_DLLEXPORT _Bool pybind_get_prop_type(void * a0, wchar_t const * a1, int * a2)
{
  char a[24];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(wchar_t const * *)(p + 8) = a1;
  *(int * *)(p + 16) = a2;
  _cffi_call_python(&_cffi_externpy__pybind_get_prop_type, p);
  return *(_Bool *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_get_rpc_mode =
  { "pythonscriptcffi.pybind_get_rpc_mode", (int)sizeof(int) };

CFFI_DLLEXPORT int pybind_get_rpc_mode(void * a0, wchar_t const * a1)
{
  char a[16];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(wchar_t const * *)(p + 8) = a1;
  _cffi_call_python(&_cffi_externpy__pybind_get_rpc_mode, p);
  return *(int *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_get_rset_mode =
  { "pythonscriptcffi.pybind_get_rset_mode", (int)sizeof(int) };

CFFI_DLLEXPORT int pybind_get_rset_mode(void * a0, wchar_t const * a1)
{
  char a[16];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(wchar_t const * *)(p + 8) = a1;
  _cffi_call_python(&_cffi_externpy__pybind_get_rset_mode, p);
  return *(int *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_get_signal_info =
  { "pythonscriptcffi.pybind_get_signal_info", (int)sizeof(_Bool) };

CFFI_DLLEXPORT _Bool pybind_get_signal_info(void * a0, wchar_t const * a1, int * a2)
{
  char a[24];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(wchar_t const * *)(p + 8) = a1;
  *(int * *)(p + 16) = a2;
  _cffi_call_python(&_cffi_externpy__pybind_get_signal_info, p);
  return *(_Bool *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_get_signal_list =
  { "pythonscriptcffi.pybind_get_signal_list", (int)sizeof(godot_string const *) };

CFFI_DLLEXPORT godot_string const * pybind_get_signal_list(void * a0)
{
  char a[8];
  char *p = a;
  *(void * *)(p + 0) = a0;
  _cffi_call_python(&_cffi_externpy__pybind_get_signal_list, p);
  return *(godot_string const * *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_has_meth =
  { "pythonscriptcffi.pybind_has_meth", (int)sizeof(_Bool) };

CFFI_DLLEXPORT _Bool pybind_has_meth(void * a0, wchar_t const * a1)
{
  char a[16];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(wchar_t const * *)(p + 8) = a1;
  _cffi_call_python(&_cffi_externpy__pybind_has_meth, p);
  return *(_Bool *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_has_signal =
  { "pythonscriptcffi.pybind_has_signal", (int)sizeof(_Bool) };

CFFI_DLLEXPORT _Bool pybind_has_signal(void * a0, wchar_t const * a1)
{
  char a[16];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(wchar_t const * *)(p + 8) = a1;
  _cffi_call_python(&_cffi_externpy__pybind_has_signal, p);
  return *(_Bool *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_init_sys_path_and_argv =
  { "pythonscriptcffi.pybind_init_sys_path_and_argv", (int)sizeof(_Bool) };

CFFI_DLLEXPORT _Bool pybind_init_sys_path_and_argv(wchar_t const * a0, wchar_t const * a1, wchar_t const * a2)
{
  char a[24];
  char *p = a;
  *(wchar_t const * *)(p + 0) = a0;
  *(wchar_t const * *)(p + 8) = a1;
  *(wchar_t const * *)(p + 16) = a2;
  _cffi_call_python(&_cffi_externpy__pybind_init_sys_path_and_argv, p);
  return *(_Bool *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_instanciate_from_classname =
  { "pythonscriptcffi.pybind_instanciate_from_classname", (int)sizeof(void *) };

CFFI_DLLEXPORT void * pybind_instanciate_from_classname(wchar_t const * a0)
{
  char a[8];
  char *p = a;
  *(wchar_t const * *)(p + 0) = a0;
  _cffi_call_python(&_cffi_externpy__pybind_instanciate_from_classname, p);
  return *(void * *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_is_tool =
  { "pythonscriptcffi.pybind_is_tool", (int)sizeof(_Bool) };

CFFI_DLLEXPORT _Bool pybind_is_tool(void * a0)
{
  char a[8];
  char *p = a;
  *(void * *)(p + 0) = a0;
  _cffi_call_python(&_cffi_externpy__pybind_is_tool, p);
  return *(_Bool *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_load_exposed_class_per_module =
  { "pythonscriptcffi.pybind_load_exposed_class_per_module", (int)sizeof(void *) };

CFFI_DLLEXPORT void * pybind_load_exposed_class_per_module(wchar_t const * a0)
{
  char a[8];
  char *p = a;
  *(wchar_t const * *)(p + 0) = a0;
  _cffi_call_python(&_cffi_externpy__pybind_load_exposed_class_per_module, p);
  return *(void * *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_notification =
  { "pythonscriptcffi.pybind_notification", 0 };

CFFI_DLLEXPORT void pybind_notification(void * a0, int a1)
{
  char a[16];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(int *)(p + 8) = a1;
  _cffi_call_python(&_cffi_externpy__pybind_notification, p);
}

static struct _cffi_externpy_s _cffi_externpy__pybind_release_instance =
  { "pythonscriptcffi.pybind_release_instance", 0 };

CFFI_DLLEXPORT void pybind_release_instance(void * a0)
{
  char a[8];
  char *p = a;
  *(void * *)(p + 0) = a0;
  _cffi_call_python(&_cffi_externpy__pybind_release_instance, p);
}

static struct _cffi_externpy_s _cffi_externpy__pybind_set_prop =
  { "pythonscriptcffi.pybind_set_prop", (int)sizeof(_Bool) };

CFFI_DLLEXPORT _Bool pybind_set_prop(void * a0, wchar_t const * a1, godot_variant const * a2)
{
  char a[24];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(wchar_t const * *)(p + 8) = a1;
  *(godot_variant const * *)(p + 16) = a2;
  _cffi_call_python(&_cffi_externpy__pybind_set_prop, p);
  return *(_Bool *)p;
}

static struct _cffi_externpy_s _cffi_externpy__pybind_wrap_gdobj_with_class =
  { "pythonscriptcffi.pybind_wrap_gdobj_with_class", (int)sizeof(void *) };

CFFI_DLLEXPORT void * pybind_wrap_gdobj_with_class(void * a0, void * a1)
{
  char a[16];
  char *p = a;
  *(void * *)(p + 0) = a0;
  *(void * *)(p + 8) = a1;
  _cffi_call_python(&_cffi_externpy__pybind_wrap_gdobj_with_class, p);
  return *(void * *)p;
}

static int _cffi_const_METHOD_FLAG_NORMAL(unsigned long long *o)
{
  int n = (METHOD_FLAG_NORMAL) <= 0;
  *o = (unsigned long long)((METHOD_FLAG_NORMAL) | 0);  /* check that METHOD_FLAG_NORMAL is an integer */
  return n;
}

static int _cffi_const_METHOD_FLAG_EDITOR(unsigned long long *o)
{
  int n = (METHOD_FLAG_EDITOR) <= 0;
  *o = (unsigned long long)((METHOD_FLAG_EDITOR) | 0);  /* check that METHOD_FLAG_EDITOR is an integer */
  return n;
}

static int _cffi_const_METHOD_FLAG_NOSCRIPT(unsigned long long *o)
{
  int n = (METHOD_FLAG_NOSCRIPT) <= 0;
  *o = (unsigned long long)((METHOD_FLAG_NOSCRIPT) | 0);  /* check that METHOD_FLAG_NOSCRIPT is an integer */
  return n;
}

static int _cffi_const_METHOD_FLAG_CONST(unsigned long long *o)
{
  int n = (METHOD_FLAG_CONST) <= 0;
  *o = (unsigned long long)((METHOD_FLAG_CONST) | 0);  /* check that METHOD_FLAG_CONST is an integer */
  return n;
}

static int _cffi_const_METHOD_FLAG_REVERSE(unsigned long long *o)
{
  int n = (METHOD_FLAG_REVERSE) <= 0;
  *o = (unsigned long long)((METHOD_FLAG_REVERSE) | 0);  /* check that METHOD_FLAG_REVERSE is an integer */
  return n;
}

static int _cffi_const_METHOD_FLAG_VIRTUAL(unsigned long long *o)
{
  int n = (METHOD_FLAG_VIRTUAL) <= 0;
  *o = (unsigned long long)((METHOD_FLAG_VIRTUAL) | 0);  /* check that METHOD_FLAG_VIRTUAL is an integer */
  return n;
}

static int _cffi_const_METHOD_FLAG_FROM_SCRIPT(unsigned long long *o)
{
  int n = (METHOD_FLAG_FROM_SCRIPT) <= 0;
  *o = (unsigned long long)((METHOD_FLAG_FROM_SCRIPT) | 0);  /* check that METHOD_FLAG_FROM_SCRIPT is an integer */
  return n;
}

static int _cffi_const_METHOD_FLAG_VARARG(unsigned long long *o)
{
  int n = (METHOD_FLAG_VARARG) <= 0;
  *o = (unsigned long long)((METHOD_FLAG_VARARG) | 0);  /* check that METHOD_FLAG_VARARG is an integer */
  return n;
}

static int _cffi_const_METHOD_FLAGS_DEFAULT(unsigned long long *o)
{
  int n = (METHOD_FLAGS_DEFAULT) <= 0;
  *o = (unsigned long long)((METHOD_FLAGS_DEFAULT) | 0);  /* check that METHOD_FLAGS_DEFAULT is an integer */
  return n;
}

static int _cffi_const_GODOT_OK(unsigned long long *o)
{
  int n = (GODOT_OK) <= 0;
  *o = (unsigned long long)((GODOT_OK) | 0);  /* check that GODOT_OK is an integer */
  return n;
}

static int _cffi_const_GODOT_FAILED(unsigned long long *o)
{
  int n = (GODOT_FAILED) <= 0;
  *o = (unsigned long long)((GODOT_FAILED) | 0);  /* check that GODOT_FAILED is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_UNAVAILABLE(unsigned long long *o)
{
  int n = (GODOT_ERR_UNAVAILABLE) <= 0;
  *o = (unsigned long long)((GODOT_ERR_UNAVAILABLE) | 0);  /* check that GODOT_ERR_UNAVAILABLE is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_UNCONFIGURED(unsigned long long *o)
{
  int n = (GODOT_ERR_UNCONFIGURED) <= 0;
  *o = (unsigned long long)((GODOT_ERR_UNCONFIGURED) | 0);  /* check that GODOT_ERR_UNCONFIGURED is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_UNAUTHORIZED(unsigned long long *o)
{
  int n = (GODOT_ERR_UNAUTHORIZED) <= 0;
  *o = (unsigned long long)((GODOT_ERR_UNAUTHORIZED) | 0);  /* check that GODOT_ERR_UNAUTHORIZED is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_PARAMETER_RANGE_ERROR(unsigned long long *o)
{
  int n = (GODOT_ERR_PARAMETER_RANGE_ERROR) <= 0;
  *o = (unsigned long long)((GODOT_ERR_PARAMETER_RANGE_ERROR) | 0);  /* check that GODOT_ERR_PARAMETER_RANGE_ERROR is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_OUT_OF_MEMORY(unsigned long long *o)
{
  int n = (GODOT_ERR_OUT_OF_MEMORY) <= 0;
  *o = (unsigned long long)((GODOT_ERR_OUT_OF_MEMORY) | 0);  /* check that GODOT_ERR_OUT_OF_MEMORY is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_FILE_NOT_FOUND(unsigned long long *o)
{
  int n = (GODOT_ERR_FILE_NOT_FOUND) <= 0;
  *o = (unsigned long long)((GODOT_ERR_FILE_NOT_FOUND) | 0);  /* check that GODOT_ERR_FILE_NOT_FOUND is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_FILE_BAD_DRIVE(unsigned long long *o)
{
  int n = (GODOT_ERR_FILE_BAD_DRIVE) <= 0;
  *o = (unsigned long long)((GODOT_ERR_FILE_BAD_DRIVE) | 0);  /* check that GODOT_ERR_FILE_BAD_DRIVE is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_FILE_BAD_PATH(unsigned long long *o)
{
  int n = (GODOT_ERR_FILE_BAD_PATH) <= 0;
  *o = (unsigned long long)((GODOT_ERR_FILE_BAD_PATH) | 0);  /* check that GODOT_ERR_FILE_BAD_PATH is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_FILE_NO_PERMISSION(unsigned long long *o)
{
  int n = (GODOT_ERR_FILE_NO_PERMISSION) <= 0;
  *o = (unsigned long long)((GODOT_ERR_FILE_NO_PERMISSION) | 0);  /* check that GODOT_ERR_FILE_NO_PERMISSION is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_FILE_ALREADY_IN_USE(unsigned long long *o)
{
  int n = (GODOT_ERR_FILE_ALREADY_IN_USE) <= 0;
  *o = (unsigned long long)((GODOT_ERR_FILE_ALREADY_IN_USE) | 0);  /* check that GODOT_ERR_FILE_ALREADY_IN_USE is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_FILE_CANT_OPEN(unsigned long long *o)
{
  int n = (GODOT_ERR_FILE_CANT_OPEN) <= 0;
  *o = (unsigned long long)((GODOT_ERR_FILE_CANT_OPEN) | 0);  /* check that GODOT_ERR_FILE_CANT_OPEN is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_FILE_CANT_WRITE(unsigned long long *o)
{
  int n = (GODOT_ERR_FILE_CANT_WRITE) <= 0;
  *o = (unsigned long long)((GODOT_ERR_FILE_CANT_WRITE) | 0);  /* check that GODOT_ERR_FILE_CANT_WRITE is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_FILE_CANT_READ(unsigned long long *o)
{
  int n = (GODOT_ERR_FILE_CANT_READ) <= 0;
  *o = (unsigned long long)((GODOT_ERR_FILE_CANT_READ) | 0);  /* check that GODOT_ERR_FILE_CANT_READ is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_FILE_UNRECOGNIZED(unsigned long long *o)
{
  int n = (GODOT_ERR_FILE_UNRECOGNIZED) <= 0;
  *o = (unsigned long long)((GODOT_ERR_FILE_UNRECOGNIZED) | 0);  /* check that GODOT_ERR_FILE_UNRECOGNIZED is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_FILE_CORRUPT(unsigned long long *o)
{
  int n = (GODOT_ERR_FILE_CORRUPT) <= 0;
  *o = (unsigned long long)((GODOT_ERR_FILE_CORRUPT) | 0);  /* check that GODOT_ERR_FILE_CORRUPT is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_FILE_MISSING_DEPENDENCIES(unsigned long long *o)
{
  int n = (GODOT_ERR_FILE_MISSING_DEPENDENCIES) <= 0;
  *o = (unsigned long long)((GODOT_ERR_FILE_MISSING_DEPENDENCIES) | 0);  /* check that GODOT_ERR_FILE_MISSING_DEPENDENCIES is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_FILE_EOF(unsigned long long *o)
{
  int n = (GODOT_ERR_FILE_EOF) <= 0;
  *o = (unsigned long long)((GODOT_ERR_FILE_EOF) | 0);  /* check that GODOT_ERR_FILE_EOF is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_CANT_OPEN(unsigned long long *o)
{
  int n = (GODOT_ERR_CANT_OPEN) <= 0;
  *o = (unsigned long long)((GODOT_ERR_CANT_OPEN) | 0);  /* check that GODOT_ERR_CANT_OPEN is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_CANT_CREATE(unsigned long long *o)
{
  int n = (GODOT_ERR_CANT_CREATE) <= 0;
  *o = (unsigned long long)((GODOT_ERR_CANT_CREATE) | 0);  /* check that GODOT_ERR_CANT_CREATE is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_QUERY_FAILED(unsigned long long *o)
{
  int n = (GODOT_ERR_QUERY_FAILED) <= 0;
  *o = (unsigned long long)((GODOT_ERR_QUERY_FAILED) | 0);  /* check that GODOT_ERR_QUERY_FAILED is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_ALREADY_IN_USE(unsigned long long *o)
{
  int n = (GODOT_ERR_ALREADY_IN_USE) <= 0;
  *o = (unsigned long long)((GODOT_ERR_ALREADY_IN_USE) | 0);  /* check that GODOT_ERR_ALREADY_IN_USE is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_LOCKED(unsigned long long *o)
{
  int n = (GODOT_ERR_LOCKED) <= 0;
  *o = (unsigned long long)((GODOT_ERR_LOCKED) | 0);  /* check that GODOT_ERR_LOCKED is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_TIMEOUT(unsigned long long *o)
{
  int n = (GODOT_ERR_TIMEOUT) <= 0;
  *o = (unsigned long long)((GODOT_ERR_TIMEOUT) | 0);  /* check that GODOT_ERR_TIMEOUT is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_CANT_CONNECT(unsigned long long *o)
{
  int n = (GODOT_ERR_CANT_CONNECT) <= 0;
  *o = (unsigned long long)((GODOT_ERR_CANT_CONNECT) | 0);  /* check that GODOT_ERR_CANT_CONNECT is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_CANT_RESOLVE(unsigned long long *o)
{
  int n = (GODOT_ERR_CANT_RESOLVE) <= 0;
  *o = (unsigned long long)((GODOT_ERR_CANT_RESOLVE) | 0);  /* check that GODOT_ERR_CANT_RESOLVE is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_CONNECTION_ERROR(unsigned long long *o)
{
  int n = (GODOT_ERR_CONNECTION_ERROR) <= 0;
  *o = (unsigned long long)((GODOT_ERR_CONNECTION_ERROR) | 0);  /* check that GODOT_ERR_CONNECTION_ERROR is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_CANT_AQUIRE_RESOURCE(unsigned long long *o)
{
  int n = (GODOT_ERR_CANT_AQUIRE_RESOURCE) <= 0;
  *o = (unsigned long long)((GODOT_ERR_CANT_AQUIRE_RESOURCE) | 0);  /* check that GODOT_ERR_CANT_AQUIRE_RESOURCE is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_CANT_FORK(unsigned long long *o)
{
  int n = (GODOT_ERR_CANT_FORK) <= 0;
  *o = (unsigned long long)((GODOT_ERR_CANT_FORK) | 0);  /* check that GODOT_ERR_CANT_FORK is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_INVALID_DATA(unsigned long long *o)
{
  int n = (GODOT_ERR_INVALID_DATA) <= 0;
  *o = (unsigned long long)((GODOT_ERR_INVALID_DATA) | 0);  /* check that GODOT_ERR_INVALID_DATA is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_INVALID_PARAMETER(unsigned long long *o)
{
  int n = (GODOT_ERR_INVALID_PARAMETER) <= 0;
  *o = (unsigned long long)((GODOT_ERR_INVALID_PARAMETER) | 0);  /* check that GODOT_ERR_INVALID_PARAMETER is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_ALREADY_EXISTS(unsigned long long *o)
{
  int n = (GODOT_ERR_ALREADY_EXISTS) <= 0;
  *o = (unsigned long long)((GODOT_ERR_ALREADY_EXISTS) | 0);  /* check that GODOT_ERR_ALREADY_EXISTS is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_DOES_NOT_EXIST(unsigned long long *o)
{
  int n = (GODOT_ERR_DOES_NOT_EXIST) <= 0;
  *o = (unsigned long long)((GODOT_ERR_DOES_NOT_EXIST) | 0);  /* check that GODOT_ERR_DOES_NOT_EXIST is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_DATABASE_CANT_READ(unsigned long long *o)
{
  int n = (GODOT_ERR_DATABASE_CANT_READ) <= 0;
  *o = (unsigned long long)((GODOT_ERR_DATABASE_CANT_READ) | 0);  /* check that GODOT_ERR_DATABASE_CANT_READ is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_DATABASE_CANT_WRITE(unsigned long long *o)
{
  int n = (GODOT_ERR_DATABASE_CANT_WRITE) <= 0;
  *o = (unsigned long long)((GODOT_ERR_DATABASE_CANT_WRITE) | 0);  /* check that GODOT_ERR_DATABASE_CANT_WRITE is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_COMPILATION_FAILED(unsigned long long *o)
{
  int n = (GODOT_ERR_COMPILATION_FAILED) <= 0;
  *o = (unsigned long long)((GODOT_ERR_COMPILATION_FAILED) | 0);  /* check that GODOT_ERR_COMPILATION_FAILED is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_METHOD_NOT_FOUND(unsigned long long *o)
{
  int n = (GODOT_ERR_METHOD_NOT_FOUND) <= 0;
  *o = (unsigned long long)((GODOT_ERR_METHOD_NOT_FOUND) | 0);  /* check that GODOT_ERR_METHOD_NOT_FOUND is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_LINK_FAILED(unsigned long long *o)
{
  int n = (GODOT_ERR_LINK_FAILED) <= 0;
  *o = (unsigned long long)((GODOT_ERR_LINK_FAILED) | 0);  /* check that GODOT_ERR_LINK_FAILED is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_SCRIPT_FAILED(unsigned long long *o)
{
  int n = (GODOT_ERR_SCRIPT_FAILED) <= 0;
  *o = (unsigned long long)((GODOT_ERR_SCRIPT_FAILED) | 0);  /* check that GODOT_ERR_SCRIPT_FAILED is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_CYCLIC_LINK(unsigned long long *o)
{
  int n = (GODOT_ERR_CYCLIC_LINK) <= 0;
  *o = (unsigned long long)((GODOT_ERR_CYCLIC_LINK) | 0);  /* check that GODOT_ERR_CYCLIC_LINK is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_INVALID_DECLARATION(unsigned long long *o)
{
  int n = (GODOT_ERR_INVALID_DECLARATION) <= 0;
  *o = (unsigned long long)((GODOT_ERR_INVALID_DECLARATION) | 0);  /* check that GODOT_ERR_INVALID_DECLARATION is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_DUPLICATE_SYMBOL(unsigned long long *o)
{
  int n = (GODOT_ERR_DUPLICATE_SYMBOL) <= 0;
  *o = (unsigned long long)((GODOT_ERR_DUPLICATE_SYMBOL) | 0);  /* check that GODOT_ERR_DUPLICATE_SYMBOL is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_PARSE_ERROR(unsigned long long *o)
{
  int n = (GODOT_ERR_PARSE_ERROR) <= 0;
  *o = (unsigned long long)((GODOT_ERR_PARSE_ERROR) | 0);  /* check that GODOT_ERR_PARSE_ERROR is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_BUSY(unsigned long long *o)
{
  int n = (GODOT_ERR_BUSY) <= 0;
  *o = (unsigned long long)((GODOT_ERR_BUSY) | 0);  /* check that GODOT_ERR_BUSY is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_SKIP(unsigned long long *o)
{
  int n = (GODOT_ERR_SKIP) <= 0;
  *o = (unsigned long long)((GODOT_ERR_SKIP) | 0);  /* check that GODOT_ERR_SKIP is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_HELP(unsigned long long *o)
{
  int n = (GODOT_ERR_HELP) <= 0;
  *o = (unsigned long long)((GODOT_ERR_HELP) | 0);  /* check that GODOT_ERR_HELP is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_BUG(unsigned long long *o)
{
  int n = (GODOT_ERR_BUG) <= 0;
  *o = (unsigned long long)((GODOT_ERR_BUG) | 0);  /* check that GODOT_ERR_BUG is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_PRINTER_ON_FIRE(unsigned long long *o)
{
  int n = (GODOT_ERR_PRINTER_ON_FIRE) <= 0;
  *o = (unsigned long long)((GODOT_ERR_PRINTER_ON_FIRE) | 0);  /* check that GODOT_ERR_PRINTER_ON_FIRE is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_OMFG_THIS_IS_VERY_VERY_BAD(unsigned long long *o)
{
  int n = (GODOT_ERR_OMFG_THIS_IS_VERY_VERY_BAD) <= 0;
  *o = (unsigned long long)((GODOT_ERR_OMFG_THIS_IS_VERY_VERY_BAD) | 0);  /* check that GODOT_ERR_OMFG_THIS_IS_VERY_VERY_BAD is an integer */
  return n;
}

static int _cffi_const_GODOT_ERR_WTF(unsigned long long *o)
{
  int n = (GODOT_ERR_WTF) <= 0;
  *o = (unsigned long long)((GODOT_ERR_WTF) | 0);  /* check that GODOT_ERR_WTF is an integer */
  return n;
}

static int _cffi_const_GODOT_INPUT_EVENT_TYPE_NONE(unsigned long long *o)
{
  int n = (GODOT_INPUT_EVENT_TYPE_NONE) <= 0;
  *o = (unsigned long long)((GODOT_INPUT_EVENT_TYPE_NONE) | 0);  /* check that GODOT_INPUT_EVENT_TYPE_NONE is an integer */
  return n;
}

static int _cffi_const_GODOT_INPUT_EVENT_TYPE_KEY(unsigned long long *o)
{
  int n = (GODOT_INPUT_EVENT_TYPE_KEY) <= 0;
  *o = (unsigned long long)((GODOT_INPUT_EVENT_TYPE_KEY) | 0);  /* check that GODOT_INPUT_EVENT_TYPE_KEY is an integer */
  return n;
}

static int _cffi_const_GODOT_INPUT_EVENT_TYPE_MOUSE_MOTION(unsigned long long *o)
{
  int n = (GODOT_INPUT_EVENT_TYPE_MOUSE_MOTION) <= 0;
  *o = (unsigned long long)((GODOT_INPUT_EVENT_TYPE_MOUSE_MOTION) | 0);  /* check that GODOT_INPUT_EVENT_TYPE_MOUSE_MOTION is an integer */
  return n;
}

static int _cffi_const_GODOT_INPUT_EVENT_TYPE_MOUSE_BUTTON(unsigned long long *o)
{
  int n = (GODOT_INPUT_EVENT_TYPE_MOUSE_BUTTON) <= 0;
  *o = (unsigned long long)((GODOT_INPUT_EVENT_TYPE_MOUSE_BUTTON) | 0);  /* check that GODOT_INPUT_EVENT_TYPE_MOUSE_BUTTON is an integer */
  return n;
}

static int _cffi_const_GODOT_INPUT_EVENT_TYPE_JOYPAD_MOTION(unsigned long long *o)
{
  int n = (GODOT_INPUT_EVENT_TYPE_JOYPAD_MOTION) <= 0;
  *o = (unsigned long long)((GODOT_INPUT_EVENT_TYPE_JOYPAD_MOTION) | 0);  /* check that GODOT_INPUT_EVENT_TYPE_JOYPAD_MOTION is an integer */
  return n;
}

static int _cffi_const_GODOT_INPUT_EVENT_TYPE_JOYPAD_BUTTON(unsigned long long *o)
{
  int n = (GODOT_INPUT_EVENT_TYPE_JOYPAD_BUTTON) <= 0;
  *o = (unsigned long long)((GODOT_INPUT_EVENT_TYPE_JOYPAD_BUTTON) | 0);  /* check that GODOT_INPUT_EVENT_TYPE_JOYPAD_BUTTON is an integer */
  return n;
}

static int _cffi_const_GODOT_INPUT_EVENT_TYPE_SCREEN_TOUCH(unsigned long long *o)
{
  int n = (GODOT_INPUT_EVENT_TYPE_SCREEN_TOUCH) <= 0;
  *o = (unsigned long long)((GODOT_INPUT_EVENT_TYPE_SCREEN_TOUCH) | 0);  /* check that GODOT_INPUT_EVENT_TYPE_SCREEN_TOUCH is an integer */
  return n;
}

static int _cffi_const_GODOT_INPUT_EVENT_TYPE_SCREEN_DRAG(unsigned long long *o)
{
  int n = (GODOT_INPUT_EVENT_TYPE_SCREEN_DRAG) <= 0;
  *o = (unsigned long long)((GODOT_INPUT_EVENT_TYPE_SCREEN_DRAG) | 0);  /* check that GODOT_INPUT_EVENT_TYPE_SCREEN_DRAG is an integer */
  return n;
}

static int _cffi_const_GODOT_INPUT_EVENT_TYPE_ACTION(unsigned long long *o)
{
  int n = (GODOT_INPUT_EVENT_TYPE_ACTION) <= 0;
  *o = (unsigned long long)((GODOT_INPUT_EVENT_TYPE_ACTION) | 0);  /* check that GODOT_INPUT_EVENT_TYPE_ACTION is an integer */
  return n;
}

static int _cffi_const_GODOT_INPUT_EVENT_TYPE_TYPE_MAX(unsigned long long *o)
{
  int n = (GODOT_INPUT_EVENT_TYPE_TYPE_MAX) <= 0;
  *o = (unsigned long long)((GODOT_INPUT_EVENT_TYPE_TYPE_MAX) | 0);  /* check that GODOT_INPUT_EVENT_TYPE_TYPE_MAX is an integer */
  return n;
}

static int _cffi_const_GODOT_METHOD_RPC_MODE_DISABLED(unsigned long long *o)
{
  int n = (GODOT_METHOD_RPC_MODE_DISABLED) <= 0;
  *o = (unsigned long long)((GODOT_METHOD_RPC_MODE_DISABLED) | 0);  /* check that GODOT_METHOD_RPC_MODE_DISABLED is an integer */
  return n;
}

static int _cffi_const_GODOT_METHOD_RPC_MODE_REMOTE(unsigned long long *o)
{
  int n = (GODOT_METHOD_RPC_MODE_REMOTE) <= 0;
  *o = (unsigned long long)((GODOT_METHOD_RPC_MODE_REMOTE) | 0);  /* check that GODOT_METHOD_RPC_MODE_REMOTE is an integer */
  return n;
}

static int _cffi_const_GODOT_METHOD_RPC_MODE_SYNC(unsigned long long *o)
{
  int n = (GODOT_METHOD_RPC_MODE_SYNC) <= 0;
  *o = (unsigned long long)((GODOT_METHOD_RPC_MODE_SYNC) | 0);  /* check that GODOT_METHOD_RPC_MODE_SYNC is an integer */
  return n;
}

static int _cffi_const_GODOT_METHOD_RPC_MODE_MASTER(unsigned long long *o)
{
  int n = (GODOT_METHOD_RPC_MODE_MASTER) <= 0;
  *o = (unsigned long long)((GODOT_METHOD_RPC_MODE_MASTER) | 0);  /* check that GODOT_METHOD_RPC_MODE_MASTER is an integer */
  return n;
}

static int _cffi_const_GODOT_METHOD_RPC_MODE_SLAVE(unsigned long long *o)
{
  int n = (GODOT_METHOD_RPC_MODE_SLAVE) <= 0;
  *o = (unsigned long long)((GODOT_METHOD_RPC_MODE_SLAVE) | 0);  /* check that GODOT_METHOD_RPC_MODE_SLAVE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_NONE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_NONE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_NONE) | 0);  /* check that GODOT_PROPERTY_HINT_NONE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_RANGE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_RANGE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_RANGE) | 0);  /* check that GODOT_PROPERTY_HINT_RANGE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_EXP_RANGE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_EXP_RANGE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_EXP_RANGE) | 0);  /* check that GODOT_PROPERTY_HINT_EXP_RANGE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_ENUM(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_ENUM) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_ENUM) | 0);  /* check that GODOT_PROPERTY_HINT_ENUM is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_EXP_EASING(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_EXP_EASING) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_EXP_EASING) | 0);  /* check that GODOT_PROPERTY_HINT_EXP_EASING is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_LENGTH(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_LENGTH) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_LENGTH) | 0);  /* check that GODOT_PROPERTY_HINT_LENGTH is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_SPRITE_FRAME(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_SPRITE_FRAME) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_SPRITE_FRAME) | 0);  /* check that GODOT_PROPERTY_HINT_SPRITE_FRAME is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_KEY_ACCEL(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_KEY_ACCEL) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_KEY_ACCEL) | 0);  /* check that GODOT_PROPERTY_HINT_KEY_ACCEL is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_FLAGS(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_FLAGS) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_FLAGS) | 0);  /* check that GODOT_PROPERTY_HINT_FLAGS is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_LAYERS_2D_RENDER(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_LAYERS_2D_RENDER) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_LAYERS_2D_RENDER) | 0);  /* check that GODOT_PROPERTY_HINT_LAYERS_2D_RENDER is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_LAYERS_2D_PHYSICS(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_LAYERS_2D_PHYSICS) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_LAYERS_2D_PHYSICS) | 0);  /* check that GODOT_PROPERTY_HINT_LAYERS_2D_PHYSICS is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_LAYERS_3D_RENDER(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_LAYERS_3D_RENDER) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_LAYERS_3D_RENDER) | 0);  /* check that GODOT_PROPERTY_HINT_LAYERS_3D_RENDER is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_LAYERS_3D_PHYSICS(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_LAYERS_3D_PHYSICS) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_LAYERS_3D_PHYSICS) | 0);  /* check that GODOT_PROPERTY_HINT_LAYERS_3D_PHYSICS is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_FILE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_FILE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_FILE) | 0);  /* check that GODOT_PROPERTY_HINT_FILE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_DIR(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_DIR) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_DIR) | 0);  /* check that GODOT_PROPERTY_HINT_DIR is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_GLOBAL_FILE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_GLOBAL_FILE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_GLOBAL_FILE) | 0);  /* check that GODOT_PROPERTY_HINT_GLOBAL_FILE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_GLOBAL_DIR(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_GLOBAL_DIR) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_GLOBAL_DIR) | 0);  /* check that GODOT_PROPERTY_HINT_GLOBAL_DIR is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_RESOURCE_TYPE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_RESOURCE_TYPE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_RESOURCE_TYPE) | 0);  /* check that GODOT_PROPERTY_HINT_RESOURCE_TYPE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_MULTILINE_TEXT(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_MULTILINE_TEXT) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_MULTILINE_TEXT) | 0);  /* check that GODOT_PROPERTY_HINT_MULTILINE_TEXT is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_COLOR_NO_ALPHA(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_COLOR_NO_ALPHA) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_COLOR_NO_ALPHA) | 0);  /* check that GODOT_PROPERTY_HINT_COLOR_NO_ALPHA is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSY(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSY) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSY) | 0);  /* check that GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSY is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS) | 0);  /* check that GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_OBJECT_ID(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_OBJECT_ID) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_OBJECT_ID) | 0);  /* check that GODOT_PROPERTY_HINT_OBJECT_ID is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_TYPE_STRING(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_TYPE_STRING) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_TYPE_STRING) | 0);  /* check that GODOT_PROPERTY_HINT_TYPE_STRING is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE) | 0);  /* check that GODOT_PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_METHOD_OF_VARIANT_TYPE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_METHOD_OF_VARIANT_TYPE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_METHOD_OF_VARIANT_TYPE) | 0);  /* check that GODOT_PROPERTY_HINT_METHOD_OF_VARIANT_TYPE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_METHOD_OF_BASE_TYPE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_METHOD_OF_BASE_TYPE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_METHOD_OF_BASE_TYPE) | 0);  /* check that GODOT_PROPERTY_HINT_METHOD_OF_BASE_TYPE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_METHOD_OF_INSTANCE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_METHOD_OF_INSTANCE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_METHOD_OF_INSTANCE) | 0);  /* check that GODOT_PROPERTY_HINT_METHOD_OF_INSTANCE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_METHOD_OF_SCRIPT(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_METHOD_OF_SCRIPT) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_METHOD_OF_SCRIPT) | 0);  /* check that GODOT_PROPERTY_HINT_METHOD_OF_SCRIPT is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_PROPERTY_OF_VARIANT_TYPE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_PROPERTY_OF_VARIANT_TYPE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_PROPERTY_OF_VARIANT_TYPE) | 0);  /* check that GODOT_PROPERTY_HINT_PROPERTY_OF_VARIANT_TYPE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_PROPERTY_OF_BASE_TYPE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_PROPERTY_OF_BASE_TYPE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_PROPERTY_OF_BASE_TYPE) | 0);  /* check that GODOT_PROPERTY_HINT_PROPERTY_OF_BASE_TYPE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_PROPERTY_OF_INSTANCE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_PROPERTY_OF_INSTANCE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_PROPERTY_OF_INSTANCE) | 0);  /* check that GODOT_PROPERTY_HINT_PROPERTY_OF_INSTANCE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_PROPERTY_OF_SCRIPT(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_PROPERTY_OF_SCRIPT) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_PROPERTY_OF_SCRIPT) | 0);  /* check that GODOT_PROPERTY_HINT_PROPERTY_OF_SCRIPT is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_HINT_MAX(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_HINT_MAX) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_HINT_MAX) | 0);  /* check that GODOT_PROPERTY_HINT_MAX is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_STORAGE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_STORAGE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_STORAGE) | 0);  /* check that GODOT_PROPERTY_USAGE_STORAGE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_EDITOR(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_EDITOR) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_EDITOR) | 0);  /* check that GODOT_PROPERTY_USAGE_EDITOR is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_NETWORK(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_NETWORK) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_NETWORK) | 0);  /* check that GODOT_PROPERTY_USAGE_NETWORK is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_EDITOR_HELPER(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_EDITOR_HELPER) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_EDITOR_HELPER) | 0);  /* check that GODOT_PROPERTY_USAGE_EDITOR_HELPER is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_CHECKABLE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_CHECKABLE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_CHECKABLE) | 0);  /* check that GODOT_PROPERTY_USAGE_CHECKABLE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_CHECKED(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_CHECKED) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_CHECKED) | 0);  /* check that GODOT_PROPERTY_USAGE_CHECKED is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_INTERNATIONALIZED(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_INTERNATIONALIZED) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_INTERNATIONALIZED) | 0);  /* check that GODOT_PROPERTY_USAGE_INTERNATIONALIZED is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_GROUP(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_GROUP) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_GROUP) | 0);  /* check that GODOT_PROPERTY_USAGE_GROUP is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_CATEGORY(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_CATEGORY) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_CATEGORY) | 0);  /* check that GODOT_PROPERTY_USAGE_CATEGORY is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_STORE_IF_NONZERO(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_STORE_IF_NONZERO) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_STORE_IF_NONZERO) | 0);  /* check that GODOT_PROPERTY_USAGE_STORE_IF_NONZERO is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_STORE_IF_NONONE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_STORE_IF_NONONE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_STORE_IF_NONONE) | 0);  /* check that GODOT_PROPERTY_USAGE_STORE_IF_NONONE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_NO_INSTANCE_STATE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_NO_INSTANCE_STATE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_NO_INSTANCE_STATE) | 0);  /* check that GODOT_PROPERTY_USAGE_NO_INSTANCE_STATE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_RESTART_IF_CHANGED(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_RESTART_IF_CHANGED) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_RESTART_IF_CHANGED) | 0);  /* check that GODOT_PROPERTY_USAGE_RESTART_IF_CHANGED is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_SCRIPT_VARIABLE(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_SCRIPT_VARIABLE) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_SCRIPT_VARIABLE) | 0);  /* check that GODOT_PROPERTY_USAGE_SCRIPT_VARIABLE is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_STORE_IF_NULL(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_STORE_IF_NULL) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_STORE_IF_NULL) | 0);  /* check that GODOT_PROPERTY_USAGE_STORE_IF_NULL is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_ANIMATE_AS_TRIGGER(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_ANIMATE_AS_TRIGGER) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_ANIMATE_AS_TRIGGER) | 0);  /* check that GODOT_PROPERTY_USAGE_ANIMATE_AS_TRIGGER is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_UPDATE_ALL_IF_MODIFIED(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_UPDATE_ALL_IF_MODIFIED) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_UPDATE_ALL_IF_MODIFIED) | 0);  /* check that GODOT_PROPERTY_USAGE_UPDATE_ALL_IF_MODIFIED is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_DEFAULT(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_DEFAULT) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_DEFAULT) | 0);  /* check that GODOT_PROPERTY_USAGE_DEFAULT is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_DEFAULT_INTL(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_DEFAULT_INTL) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_DEFAULT_INTL) | 0);  /* check that GODOT_PROPERTY_USAGE_DEFAULT_INTL is an integer */
  return n;
}

static int _cffi_const_GODOT_PROPERTY_USAGE_NOEDITOR(unsigned long long *o)
{
  int n = (GODOT_PROPERTY_USAGE_NOEDITOR) <= 0;
  *o = (unsigned long long)((GODOT_PROPERTY_USAGE_NOEDITOR) | 0);  /* check that GODOT_PROPERTY_USAGE_NOEDITOR is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_NIL(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_NIL) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_NIL) | 0);  /* check that GODOT_VARIANT_TYPE_NIL is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_BOOL(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_BOOL) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_BOOL) | 0);  /* check that GODOT_VARIANT_TYPE_BOOL is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_INT(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_INT) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_INT) | 0);  /* check that GODOT_VARIANT_TYPE_INT is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_REAL(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_REAL) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_REAL) | 0);  /* check that GODOT_VARIANT_TYPE_REAL is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_STRING(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_STRING) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_STRING) | 0);  /* check that GODOT_VARIANT_TYPE_STRING is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_VECTOR2(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_VECTOR2) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_VECTOR2) | 0);  /* check that GODOT_VARIANT_TYPE_VECTOR2 is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_RECT2(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_RECT2) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_RECT2) | 0);  /* check that GODOT_VARIANT_TYPE_RECT2 is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_VECTOR3(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_VECTOR3) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_VECTOR3) | 0);  /* check that GODOT_VARIANT_TYPE_VECTOR3 is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_TRANSFORM2D(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_TRANSFORM2D) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_TRANSFORM2D) | 0);  /* check that GODOT_VARIANT_TYPE_TRANSFORM2D is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_PLANE(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_PLANE) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_PLANE) | 0);  /* check that GODOT_VARIANT_TYPE_PLANE is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_QUAT(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_QUAT) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_QUAT) | 0);  /* check that GODOT_VARIANT_TYPE_QUAT is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_RECT3(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_RECT3) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_RECT3) | 0);  /* check that GODOT_VARIANT_TYPE_RECT3 is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_BASIS(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_BASIS) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_BASIS) | 0);  /* check that GODOT_VARIANT_TYPE_BASIS is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_TRANSFORM(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_TRANSFORM) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_TRANSFORM) | 0);  /* check that GODOT_VARIANT_TYPE_TRANSFORM is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_COLOR(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_COLOR) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_COLOR) | 0);  /* check that GODOT_VARIANT_TYPE_COLOR is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_IMAGE(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_IMAGE) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_IMAGE) | 0);  /* check that GODOT_VARIANT_TYPE_IMAGE is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_NODE_PATH(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_NODE_PATH) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_NODE_PATH) | 0);  /* check that GODOT_VARIANT_TYPE_NODE_PATH is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_RID(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_RID) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_RID) | 0);  /* check that GODOT_VARIANT_TYPE_RID is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_OBJECT(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_OBJECT) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_OBJECT) | 0);  /* check that GODOT_VARIANT_TYPE_OBJECT is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_INPUT_EVENT(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_INPUT_EVENT) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_INPUT_EVENT) | 0);  /* check that GODOT_VARIANT_TYPE_INPUT_EVENT is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_DICTIONARY(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_DICTIONARY) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_DICTIONARY) | 0);  /* check that GODOT_VARIANT_TYPE_DICTIONARY is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_ARRAY(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_ARRAY) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_ARRAY) | 0);  /* check that GODOT_VARIANT_TYPE_ARRAY is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_POOL_BYTE_ARRAY(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_POOL_BYTE_ARRAY) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_POOL_BYTE_ARRAY) | 0);  /* check that GODOT_VARIANT_TYPE_POOL_BYTE_ARRAY is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_POOL_INT_ARRAY(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_POOL_INT_ARRAY) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_POOL_INT_ARRAY) | 0);  /* check that GODOT_VARIANT_TYPE_POOL_INT_ARRAY is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_POOL_REAL_ARRAY(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_POOL_REAL_ARRAY) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_POOL_REAL_ARRAY) | 0);  /* check that GODOT_VARIANT_TYPE_POOL_REAL_ARRAY is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_POOL_STRING_ARRAY(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_POOL_STRING_ARRAY) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_POOL_STRING_ARRAY) | 0);  /* check that GODOT_VARIANT_TYPE_POOL_STRING_ARRAY is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_POOL_VECTOR2_ARRAY(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_POOL_VECTOR2_ARRAY) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_POOL_VECTOR2_ARRAY) | 0);  /* check that GODOT_VARIANT_TYPE_POOL_VECTOR2_ARRAY is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_POOL_VECTOR3_ARRAY(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_POOL_VECTOR3_ARRAY) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_POOL_VECTOR3_ARRAY) | 0);  /* check that GODOT_VARIANT_TYPE_POOL_VECTOR3_ARRAY is an integer */
  return n;
}

static int _cffi_const_GODOT_VARIANT_TYPE_POOL_COLOR_ARRAY(unsigned long long *o)
{
  int n = (GODOT_VARIANT_TYPE_POOL_COLOR_ARRAY) <= 0;
  *o = (unsigned long long)((GODOT_VARIANT_TYPE_POOL_COLOR_ARRAY) | 0);  /* check that GODOT_VARIANT_TYPE_POOL_COLOR_ARRAY is an integer */
  return n;
}

static void * _cffi_d_godot_alloc(int x0)
{
  return godot_alloc(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_alloc(PyObject *self, PyObject *arg0)
{
  int x0;
  void * result;

  x0 = _cffi_to_c_int(arg0, int);
  if (x0 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_alloc(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(114));
}
#else
#  define _cffi_f_godot_alloc _cffi_d_godot_alloc
#endif

static void _cffi_d_godot_array_append(godot_array * x0, godot_variant const * x1)
{
  godot_array_append(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_append(PyObject *self, PyObject *args)
{
  godot_array * x0;
  godot_variant const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_append", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_append(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_append _cffi_d_godot_array_append
#endif

static godot_variant _cffi_d_godot_array_back(godot_array const * x0)
{
  return godot_array_back(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_back(PyObject *self, PyObject *arg0)
{
  godot_array const * x0;
  Py_ssize_t datasize;
  godot_variant result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(4), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_back(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(1452));
}
#else
static void _cffi_f_godot_array_back(godot_variant *result, godot_array const * x0)
{
  { *result = godot_array_back(x0); }
}
#endif

static void _cffi_d_godot_array_clear(godot_array * x0)
{
  godot_array_clear(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_clear(PyObject *self, PyObject *arg0)
{
  godot_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_clear(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_clear _cffi_d_godot_array_clear
#endif

static int _cffi_d_godot_array_count(godot_array * x0, godot_variant const * x1)
{
  return godot_array_count(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_count(PyObject *self, PyObject *args)
{
  godot_array * x0;
  godot_variant const * x1;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_count", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_count(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_array_count _cffi_d_godot_array_count
#endif

static void _cffi_d_godot_array_destroy(godot_array * x0)
{
  godot_array_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_destroy(PyObject *self, PyObject *arg0)
{
  godot_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_destroy _cffi_d_godot_array_destroy
#endif

static _Bool _cffi_d_godot_array_empty(godot_array const * x0)
{
  return godot_array_empty(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_empty(PyObject *self, PyObject *arg0)
{
  godot_array const * x0;
  Py_ssize_t datasize;
  _Bool result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(4), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_empty(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_array_empty _cffi_d_godot_array_empty
#endif

static void _cffi_d_godot_array_erase(godot_array * x0, godot_variant const * x1)
{
  godot_array_erase(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_erase(PyObject *self, PyObject *args)
{
  godot_array * x0;
  godot_variant const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_erase", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_erase(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_erase _cffi_d_godot_array_erase
#endif

static int _cffi_d_godot_array_find(godot_array const * x0, godot_variant const * x1, int x2)
{
  return godot_array_find(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_find(PyObject *self, PyObject *args)
{
  godot_array const * x0;
  godot_variant const * x1;
  int x2;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_array_find", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(4), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_find(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_array_find _cffi_d_godot_array_find
#endif

static int _cffi_d_godot_array_find_last(godot_array const * x0, godot_variant const * x1)
{
  return godot_array_find_last(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_find_last(PyObject *self, PyObject *args)
{
  godot_array const * x0;
  godot_variant const * x1;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_find_last", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(4), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_find_last(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_array_find_last _cffi_d_godot_array_find_last
#endif

static godot_variant _cffi_d_godot_array_front(godot_array const * x0)
{
  return godot_array_front(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_front(PyObject *self, PyObject *arg0)
{
  godot_array const * x0;
  Py_ssize_t datasize;
  godot_variant result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(4), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_front(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(1452));
}
#else
static void _cffi_f_godot_array_front(godot_variant *result, godot_array const * x0)
{
  { *result = godot_array_front(x0); }
}
#endif

static godot_variant * _cffi_d_godot_array_get(godot_array * x0, int x1)
{
  return godot_array_get(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_get(PyObject *self, PyObject *args)
{
  godot_array * x0;
  int x1;
  Py_ssize_t datasize;
  godot_variant * result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_get", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_get(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(123));
}
#else
#  define _cffi_f_godot_array_get _cffi_d_godot_array_get
#endif

static _Bool _cffi_d_godot_array_has(godot_array const * x0, godot_variant const * x1)
{
  return godot_array_has(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_has(PyObject *self, PyObject *args)
{
  godot_array const * x0;
  godot_variant const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_has", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(4), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_has(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_array_has _cffi_d_godot_array_has
#endif

static uint32_t _cffi_d_godot_array_hash(godot_array const * x0)
{
  return godot_array_hash(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_hash(PyObject *self, PyObject *arg0)
{
  godot_array const * x0;
  Py_ssize_t datasize;
  uint32_t result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(4), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_hash(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, uint32_t);
}
#else
#  define _cffi_f_godot_array_hash _cffi_d_godot_array_hash
#endif

static void _cffi_d_godot_array_insert(godot_array * x0, int x1, godot_variant const * x2)
{
  godot_array_insert(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_insert(PyObject *self, PyObject *args)
{
  godot_array * x0;
  int x1;
  godot_variant const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_array_insert", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(8), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_insert(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_insert _cffi_d_godot_array_insert
#endif

static void _cffi_d_godot_array_invert(godot_array * x0)
{
  godot_array_invert(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_invert(PyObject *self, PyObject *arg0)
{
  godot_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_invert(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_invert _cffi_d_godot_array_invert
#endif

static _Bool _cffi_d_godot_array_is_shared(godot_array const * x0)
{
  return godot_array_is_shared(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_is_shared(PyObject *self, PyObject *arg0)
{
  godot_array const * x0;
  Py_ssize_t datasize;
  _Bool result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(4), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_is_shared(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_array_is_shared _cffi_d_godot_array_is_shared
#endif

static void _cffi_d_godot_array_new(godot_array * x0)
{
  godot_array_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_new(PyObject *self, PyObject *arg0)
{
  godot_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_new _cffi_d_godot_array_new
#endif

static void _cffi_d_godot_array_new_pool_byte_array(godot_array * x0, godot_pool_byte_array const * x1)
{
  godot_array_new_pool_byte_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_new_pool_byte_array(PyObject *self, PyObject *args)
{
  godot_array * x0;
  godot_pool_byte_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_new_pool_byte_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(467), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_byte_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(467), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_new_pool_byte_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_new_pool_byte_array _cffi_d_godot_array_new_pool_byte_array
#endif

static void _cffi_d_godot_array_new_pool_color_array(godot_array * x0, godot_pool_color_array const * x1)
{
  godot_array_new_pool_color_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_new_pool_color_array(PyObject *self, PyObject *args)
{
  godot_array * x0;
  godot_pool_color_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_new_pool_color_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(471), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_color_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(471), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_new_pool_color_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_new_pool_color_array _cffi_d_godot_array_new_pool_color_array
#endif

static void _cffi_d_godot_array_new_pool_int_array(godot_array * x0, godot_pool_int_array const * x1)
{
  godot_array_new_pool_int_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_new_pool_int_array(PyObject *self, PyObject *args)
{
  godot_array * x0;
  godot_pool_int_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_new_pool_int_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(475), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_int_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(475), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_new_pool_int_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_new_pool_int_array _cffi_d_godot_array_new_pool_int_array
#endif

static void _cffi_d_godot_array_new_pool_real_array(godot_array * x0, godot_pool_real_array const * x1)
{
  godot_array_new_pool_real_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_new_pool_real_array(PyObject *self, PyObject *args)
{
  godot_array * x0;
  godot_pool_real_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_new_pool_real_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(479), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_real_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(479), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_new_pool_real_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_new_pool_real_array _cffi_d_godot_array_new_pool_real_array
#endif

static void _cffi_d_godot_array_new_pool_string_array(godot_array * x0, godot_pool_string_array const * x1)
{
  godot_array_new_pool_string_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_new_pool_string_array(PyObject *self, PyObject *args)
{
  godot_array * x0;
  godot_pool_string_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_new_pool_string_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(483), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_string_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(483), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_new_pool_string_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_new_pool_string_array _cffi_d_godot_array_new_pool_string_array
#endif

static void _cffi_d_godot_array_new_pool_vector2_array(godot_array * x0, godot_pool_vector2_array const * x1)
{
  godot_array_new_pool_vector2_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_new_pool_vector2_array(PyObject *self, PyObject *args)
{
  godot_array * x0;
  godot_pool_vector2_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_new_pool_vector2_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(487), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_vector2_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(487), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_new_pool_vector2_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_new_pool_vector2_array _cffi_d_godot_array_new_pool_vector2_array
#endif

static void _cffi_d_godot_array_new_pool_vector3_array(godot_array * x0, godot_pool_vector3_array const * x1)
{
  godot_array_new_pool_vector3_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_new_pool_vector3_array(PyObject *self, PyObject *args)
{
  godot_array * x0;
  godot_pool_vector3_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_new_pool_vector3_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(491), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_vector3_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(491), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_new_pool_vector3_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_new_pool_vector3_array _cffi_d_godot_array_new_pool_vector3_array
#endif

static godot_variant _cffi_d_godot_array_pop_back(godot_array * x0)
{
  return godot_array_pop_back(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_pop_back(PyObject *self, PyObject *arg0)
{
  godot_array * x0;
  Py_ssize_t datasize;
  godot_variant result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_pop_back(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(1452));
}
#else
static void _cffi_f_godot_array_pop_back(godot_variant *result, godot_array * x0)
{
  { *result = godot_array_pop_back(x0); }
}
#endif

static godot_variant _cffi_d_godot_array_pop_front(godot_array * x0)
{
  return godot_array_pop_front(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_pop_front(PyObject *self, PyObject *arg0)
{
  godot_array * x0;
  Py_ssize_t datasize;
  godot_variant result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_pop_front(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(1452));
}
#else
static void _cffi_f_godot_array_pop_front(godot_variant *result, godot_array * x0)
{
  { *result = godot_array_pop_front(x0); }
}
#endif

static void _cffi_d_godot_array_push_back(godot_array * x0, godot_variant const * x1)
{
  godot_array_push_back(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_push_back(PyObject *self, PyObject *args)
{
  godot_array * x0;
  godot_variant const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_push_back", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_push_back(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_push_back _cffi_d_godot_array_push_back
#endif

static void _cffi_d_godot_array_push_front(godot_array * x0, godot_variant const * x1)
{
  godot_array_push_front(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_push_front(PyObject *self, PyObject *args)
{
  godot_array * x0;
  godot_variant const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_push_front", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_push_front(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_push_front _cffi_d_godot_array_push_front
#endif

static void _cffi_d_godot_array_remove(godot_array * x0, int x1)
{
  godot_array_remove(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_remove(PyObject *self, PyObject *args)
{
  godot_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_remove", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_remove(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_remove _cffi_d_godot_array_remove
#endif

static void _cffi_d_godot_array_resize(godot_array * x0, int x1)
{
  godot_array_resize(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_resize(PyObject *self, PyObject *args)
{
  godot_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_array_resize", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_resize(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_resize _cffi_d_godot_array_resize
#endif

static int _cffi_d_godot_array_rfind(godot_array const * x0, godot_variant const * x1, int x2)
{
  return godot_array_rfind(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_rfind(PyObject *self, PyObject *args)
{
  godot_array const * x0;
  godot_variant const * x1;
  int x2;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_array_rfind", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(4), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_rfind(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_array_rfind _cffi_d_godot_array_rfind
#endif

static void _cffi_d_godot_array_set(godot_array * x0, int x1, godot_variant const * x2)
{
  godot_array_set(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_set(PyObject *self, PyObject *args)
{
  godot_array * x0;
  int x1;
  godot_variant const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_array_set", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(8), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_set(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_set _cffi_d_godot_array_set
#endif

static int _cffi_d_godot_array_size(godot_array const * x0)
{
  return godot_array_size(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_size(PyObject *self, PyObject *arg0)
{
  godot_array const * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(4), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_array_size(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_array_size _cffi_d_godot_array_size
#endif

static void _cffi_d_godot_array_sort(godot_array * x0)
{
  godot_array_sort(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_sort(PyObject *self, PyObject *arg0)
{
  godot_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_sort(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_sort _cffi_d_godot_array_sort
#endif

static void _cffi_d_godot_array_sort_custom(godot_array * x0, void * x1, godot_string const * x2)
{
  godot_array_sort_custom(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_array_sort_custom(PyObject *self, PyObject *args)
{
  godot_array * x0;
  void * x1;
  godot_string const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_array_sort_custom", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(233), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(114), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (void *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(114), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(29), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_array_sort_custom(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_array_sort_custom _cffi_d_godot_array_sort_custom
#endif

static void _cffi_d_godot_basis_as_string(godot_basis * x0, godot_string * x1)
{
  godot_basis_as_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_as_string(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_basis_as_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_as_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_as_string _cffi_d_godot_basis_as_string
#endif

static float _cffi_d_godot_basis_determinant(godot_basis * x0)
{
  return godot_basis_determinant(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_determinant(PyObject *self, PyObject *arg0)
{
  godot_basis * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_basis_determinant(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_basis_determinant _cffi_d_godot_basis_determinant
#endif

static void _cffi_d_godot_basis_get_euler(godot_basis * x0, godot_vector3 * x1)
{
  godot_basis_get_euler(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_get_euler(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_vector3 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_basis_get_euler", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_get_euler(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_get_euler _cffi_d_godot_basis_get_euler
#endif

static int _cffi_d_godot_basis_get_orthogonal_index(godot_basis * x0)
{
  return godot_basis_get_orthogonal_index(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_get_orthogonal_index(PyObject *self, PyObject *arg0)
{
  godot_basis * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_basis_get_orthogonal_index(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_basis_get_orthogonal_index _cffi_d_godot_basis_get_orthogonal_index
#endif

static void _cffi_d_godot_basis_get_scale(godot_basis * x0, godot_vector3 * x1)
{
  godot_basis_get_scale(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_get_scale(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_vector3 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_basis_get_scale", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_get_scale(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_get_scale _cffi_d_godot_basis_get_scale
#endif

static void _cffi_d_godot_basis_inverse(godot_basis * x0, godot_basis * x1)
{
  godot_basis_inverse(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_inverse(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_basis * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_basis_inverse", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(158), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_inverse(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_inverse _cffi_d_godot_basis_inverse
#endif

static void _cffi_d_godot_basis_new(godot_basis * x0)
{
  godot_basis_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_new(PyObject *self, PyObject *arg0)
{
  godot_basis * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_new _cffi_d_godot_basis_new
#endif

static void _cffi_d_godot_basis_new1(godot_basis * x0, godot_vector3 const * x1, godot_vector3 const * x2, godot_vector3 const * x3)
{
  godot_basis_new1(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_new1(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_vector3 const * x1;
  godot_vector3 const * x2;
  godot_vector3 const * x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_basis_new1", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(36), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_new1(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_new1 _cffi_d_godot_basis_new1
#endif

static void _cffi_d_godot_basis_new2(godot_basis * x0, godot_vector3 const * x1, float x2)
{
  godot_basis_new2(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_new2(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_vector3 const * x1;
  float x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_basis_new2", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_new2(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_new2 _cffi_d_godot_basis_new2
#endif

static void _cffi_d_godot_basis_new_with_axis_and_angle(godot_basis * x0, godot_vector3 x1, float x2)
{
  godot_basis_new_with_axis_and_angle(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_new_with_axis_and_angle(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_vector3 x1;
  float x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_basis_new_with_axis_and_angle", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(111), arg1) < 0)
    return NULL;

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_new_with_axis_and_angle(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
static void _cffi_f_godot_basis_new_with_axis_and_angle(godot_basis * x0, godot_vector3 *x1, float x2)
{
  { godot_basis_new_with_axis_and_angle(x0, *x1, x2); }
}
#endif

static void _cffi_d_godot_basis_new_with_euler(godot_basis * x0, godot_vector3 x1)
{
  godot_basis_new_with_euler(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_new_with_euler(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_vector3 x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_basis_new_with_euler", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(111), arg1) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_new_with_euler(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
static void _cffi_f_godot_basis_new_with_euler(godot_basis * x0, godot_vector3 *x1)
{
  { godot_basis_new_with_euler(x0, *x1); }
}
#endif

static void _cffi_d_godot_basis_new_with_euler_quat(godot_basis * x0, godot_quat const * x1)
{
  godot_basis_new_with_euler_quat(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_new_with_euler_quat(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_quat const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_basis_new_with_euler_quat", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(180), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_quat const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(180), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_new_with_euler_quat(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_new_with_euler_quat _cffi_d_godot_basis_new_with_euler_quat
#endif

static void _cffi_d_godot_basis_new_with_rows(godot_basis * x0, godot_vector3 x1, godot_vector3 x2, godot_vector3 x3)
{
  godot_basis_new_with_rows(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_new_with_rows(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_vector3 x1;
  godot_vector3 x2;
  godot_vector3 x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_basis_new_with_rows", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(111), arg1) < 0)
    return NULL;

  if (_cffi_to_c((char *)&x2, _cffi_type(111), arg2) < 0)
    return NULL;

  if (_cffi_to_c((char *)&x3, _cffi_type(111), arg3) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_new_with_rows(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
static void _cffi_f_godot_basis_new_with_rows(godot_basis * x0, godot_vector3 *x1, godot_vector3 *x2, godot_vector3 *x3)
{
  { godot_basis_new_with_rows(x0, *x1, *x2, *x3); }
}
#endif

static void _cffi_d_godot_basis_orthonormalized(godot_basis * x0, godot_basis * x1)
{
  godot_basis_orthonormalized(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_orthonormalized(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_basis * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_basis_orthonormalized", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(158), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_orthonormalized(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_orthonormalized _cffi_d_godot_basis_orthonormalized
#endif

static void _cffi_d_godot_basis_rotated(godot_basis * x0, godot_basis * x1, godot_vector3 const * x2, float x3)
{
  godot_basis_rotated(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_rotated(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_basis * x1;
  godot_vector3 const * x2;
  float x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_basis_rotated", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(158), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_rotated(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_rotated _cffi_d_godot_basis_rotated
#endif

static void _cffi_d_godot_basis_scaled(godot_basis * x0, godot_basis * x1, godot_vector3 const * x2)
{
  godot_basis_scaled(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_scaled(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_basis * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_basis_scaled", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(158), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_scaled(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_scaled _cffi_d_godot_basis_scaled
#endif

static float _cffi_d_godot_basis_tdotx(godot_basis * x0, godot_vector3 const * x1)
{
  return godot_basis_tdotx(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_tdotx(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_vector3 const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_basis_tdotx", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_basis_tdotx(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_basis_tdotx _cffi_d_godot_basis_tdotx
#endif

static float _cffi_d_godot_basis_tdoty(godot_basis * x0, godot_vector3 const * x1)
{
  return godot_basis_tdoty(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_tdoty(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_vector3 const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_basis_tdoty", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_basis_tdoty(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_basis_tdoty _cffi_d_godot_basis_tdoty
#endif

static float _cffi_d_godot_basis_tdotz(godot_basis * x0, godot_vector3 const * x1)
{
  return godot_basis_tdotz(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_tdotz(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_vector3 const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_basis_tdotz", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_basis_tdotz(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_basis_tdotz _cffi_d_godot_basis_tdotz
#endif

static void _cffi_d_godot_basis_transposed(godot_basis * x0, godot_basis * x1)
{
  godot_basis_transposed(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_transposed(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_basis * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_basis_transposed", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(158), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_transposed(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_transposed _cffi_d_godot_basis_transposed
#endif

static void _cffi_d_godot_basis_xform(godot_basis * x0, godot_vector3 * x1, godot_vector3 const * x2)
{
  godot_basis_xform(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_xform(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_basis_xform", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_xform(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_xform _cffi_d_godot_basis_xform
#endif

static void _cffi_d_godot_basis_xform_inv(godot_basis * x0, godot_vector3 * x1, godot_vector3 const * x2)
{
  godot_basis_xform_inv(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_basis_xform_inv(PyObject *self, PyObject *args)
{
  godot_basis * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_basis_xform_inv", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(158), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_basis_xform_inv(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_basis_xform_inv _cffi_d_godot_basis_xform_inv
#endif

static void _cffi_d_godot_color_as_string(godot_color * x0, godot_string * x1)
{
  godot_color_as_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_color_as_string(PyObject *self, PyObject *args)
{
  godot_color * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_color_as_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(165), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_color_as_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_color_as_string _cffi_d_godot_color_as_string
#endif

static void _cffi_d_godot_color_blend(godot_color * x0, godot_color * x1, godot_color const * x2)
{
  godot_color_blend(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_color_blend(PyObject *self, PyObject *args)
{
  godot_color * x0;
  godot_color * x1;
  godot_color const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_color_blend", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(165), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(165), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(333), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_color const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(333), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_color_blend(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_color_blend _cffi_d_godot_color_blend
#endif

static void _cffi_d_godot_color_contrasted(godot_color * x0, godot_color * x1)
{
  godot_color_contrasted(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_color_contrasted(PyObject *self, PyObject *args)
{
  godot_color * x0;
  godot_color * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_color_contrasted", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(165), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(165), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_color_contrasted(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_color_contrasted _cffi_d_godot_color_contrasted
#endif

static float _cffi_d_godot_color_gray(godot_color * x0)
{
  return godot_color_gray(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_color_gray(PyObject *self, PyObject *arg0)
{
  godot_color * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(165), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_color_gray(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_color_gray _cffi_d_godot_color_gray
#endif

static void _cffi_d_godot_color_inverted(godot_color * x0, godot_color * x1)
{
  godot_color_inverted(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_color_inverted(PyObject *self, PyObject *args)
{
  godot_color * x0;
  godot_color * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_color_inverted", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(165), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(165), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_color_inverted(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_color_inverted _cffi_d_godot_color_inverted
#endif

static void _cffi_d_godot_color_linear_interpolate(godot_color * x0, godot_color * x1, godot_color const * x2, float x3)
{
  godot_color_linear_interpolate(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_color_linear_interpolate(PyObject *self, PyObject *args)
{
  godot_color * x0;
  godot_color * x1;
  godot_color const * x2;
  float x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_color_linear_interpolate", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(165), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(165), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(333), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_color const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(333), arg2) < 0)
      return NULL;
  }

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_color_linear_interpolate(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_color_linear_interpolate _cffi_d_godot_color_linear_interpolate
#endif

static void _cffi_d_godot_color_new1(godot_color * x0, float x1, float x2, float x3, float x4)
{
  godot_color_new1(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_color_new1(PyObject *self, PyObject *args)
{
  godot_color * x0;
  float x1;
  float x2;
  float x3;
  float x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "godot_color_new1", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(165), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  x4 = (float)_cffi_to_c_float(arg4);
  if (x4 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_color_new1(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_color_new1 _cffi_d_godot_color_new1
#endif

static void _cffi_d_godot_color_new2(godot_color * x0, float x1, float x2, float x3)
{
  godot_color_new2(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_color_new2(PyObject *self, PyObject *args)
{
  godot_color * x0;
  float x1;
  float x2;
  float x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_color_new2", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(165), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_color_new2(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_color_new2 _cffi_d_godot_color_new2
#endif

static int _cffi_d_godot_color_to_32(godot_color * x0)
{
  return godot_color_to_32(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_color_to_32(PyObject *self, PyObject *arg0)
{
  godot_color * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(165), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_color_to_32(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_color_to_32 _cffi_d_godot_color_to_32
#endif

static int _cffi_d_godot_color_to_ARGB32(godot_color * x0)
{
  return godot_color_to_ARGB32(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_color_to_ARGB32(PyObject *self, PyObject *arg0)
{
  godot_color * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(165), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_color_to_ARGB32(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_color_to_ARGB32 _cffi_d_godot_color_to_ARGB32
#endif

static void _cffi_d_godot_color_to_html(godot_color * x0, godot_string * x1, _Bool x2)
{
  godot_color_to_html(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_color_to_html(PyObject *self, PyObject *args)
{
  godot_color * x0;
  godot_string * x1;
  _Bool x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_color_to_html", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(165), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  x2 = (_Bool)_cffi_to_c__Bool(arg2);
  if (x2 == (_Bool)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_color_to_html(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_color_to_html _cffi_d_godot_color_to_html
#endif

static void _cffi_d_godot_dictionary_clear(godot_dictionary * x0)
{
  godot_dictionary_clear(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_dictionary_clear(PyObject *self, PyObject *arg0)
{
  godot_dictionary * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(11), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_dictionary *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(11), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_dictionary_clear(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_dictionary_clear _cffi_d_godot_dictionary_clear
#endif

static void _cffi_d_godot_dictionary_destroy(godot_dictionary * x0)
{
  godot_dictionary_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_dictionary_destroy(PyObject *self, PyObject *arg0)
{
  godot_dictionary * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(11), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_dictionary *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(11), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_dictionary_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_dictionary_destroy _cffi_d_godot_dictionary_destroy
#endif

static _Bool _cffi_d_godot_dictionary_empty(godot_dictionary * x0)
{
  return godot_dictionary_empty(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_dictionary_empty(PyObject *self, PyObject *arg0)
{
  godot_dictionary * x0;
  Py_ssize_t datasize;
  _Bool result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(11), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_dictionary *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(11), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_dictionary_empty(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_dictionary_empty _cffi_d_godot_dictionary_empty
#endif

static void _cffi_d_godot_dictionary_erase(godot_dictionary * x0, godot_variant const * x1)
{
  godot_dictionary_erase(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_dictionary_erase(PyObject *self, PyObject *args)
{
  godot_dictionary * x0;
  godot_variant const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_dictionary_erase", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(11), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_dictionary *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(11), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_dictionary_erase(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_dictionary_erase _cffi_d_godot_dictionary_erase
#endif

static _Bool _cffi_d_godot_dictionary_has(godot_dictionary * x0, godot_variant const * x1)
{
  return godot_dictionary_has(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_dictionary_has(PyObject *self, PyObject *args)
{
  godot_dictionary * x0;
  godot_variant const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_dictionary_has", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(11), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_dictionary *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(11), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_dictionary_has(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_dictionary_has _cffi_d_godot_dictionary_has
#endif

static _Bool _cffi_d_godot_dictionary_has_all(godot_dictionary * x0, godot_array const * x1)
{
  return godot_dictionary_has_all(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_dictionary_has_all(PyObject *self, PyObject *args)
{
  godot_dictionary * x0;
  godot_array const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_dictionary_has_all", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(11), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_dictionary *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(11), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(4), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_dictionary_has_all(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_dictionary_has_all _cffi_d_godot_dictionary_has_all
#endif

static int _cffi_d_godot_dictionary_hash(godot_dictionary * x0)
{
  return godot_dictionary_hash(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_dictionary_hash(PyObject *self, PyObject *arg0)
{
  godot_dictionary * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(11), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_dictionary *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(11), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_dictionary_hash(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_dictionary_hash _cffi_d_godot_dictionary_hash
#endif

static void _cffi_d_godot_dictionary_keys(godot_dictionary * x0, godot_array * x1)
{
  godot_dictionary_keys(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_dictionary_keys(PyObject *self, PyObject *args)
{
  godot_dictionary * x0;
  godot_array * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_dictionary_keys", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(11), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_dictionary *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(11), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(233), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_dictionary_keys(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_dictionary_keys _cffi_d_godot_dictionary_keys
#endif

static void _cffi_d_godot_dictionary_new(godot_dictionary * x0)
{
  godot_dictionary_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_dictionary_new(PyObject *self, PyObject *arg0)
{
  godot_dictionary * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(11), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_dictionary *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(11), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_dictionary_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_dictionary_new _cffi_d_godot_dictionary_new
#endif

static void _cffi_d_godot_dictionary_operator_index(godot_dictionary * x0, godot_variant * x1, godot_variant const * x2)
{
  godot_dictionary_operator_index(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_dictionary_operator_index(PyObject *self, PyObject *args)
{
  godot_dictionary * x0;
  godot_variant * x1;
  godot_variant const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_dictionary_operator_index", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(11), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_dictionary *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(11), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(123), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(8), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_dictionary_operator_index(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_dictionary_operator_index _cffi_d_godot_dictionary_operator_index
#endif

static int _cffi_d_godot_dictionary_size(godot_dictionary * x0)
{
  return godot_dictionary_size(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_dictionary_size(PyObject *self, PyObject *arg0)
{
  godot_dictionary * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(11), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_dictionary *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(11), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_dictionary_size(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_dictionary_size _cffi_d_godot_dictionary_size
#endif

static void _cffi_d_godot_dictionary_to_json(godot_dictionary const * x0, godot_string * x1)
{
  godot_dictionary_to_json(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_dictionary_to_json(PyObject *self, PyObject *args)
{
  godot_dictionary const * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_dictionary_to_json", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(626), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_dictionary const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(626), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_dictionary_to_json(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_dictionary_to_json _cffi_d_godot_dictionary_to_json
#endif

static void _cffi_d_godot_dictionary_values(godot_dictionary * x0, godot_array * x1)
{
  godot_dictionary_values(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_dictionary_values(PyObject *self, PyObject *args)
{
  godot_dictionary * x0;
  godot_array * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_dictionary_values", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(11), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_dictionary *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(11), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(233), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_dictionary_values(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_dictionary_values _cffi_d_godot_dictionary_values
#endif

static void _cffi_d_godot_free(void * x0)
{
  godot_free(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_free(PyObject *self, PyObject *arg0)
{
  void * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(114), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (void *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(114), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_free(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_free _cffi_d_godot_free
#endif

static void *(* _cffi_d_godot_get_class_constructor(char const * x0))(void)
{
  return godot_get_class_constructor(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_get_class_constructor(PyObject *self, PyObject *arg0)
{
  char const * x0;
  Py_ssize_t datasize;
  void *(* result)(void);

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(219), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (char const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(219), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_get_class_constructor(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1544));
}
#else
#  define _cffi_f_godot_get_class_constructor _cffi_d_godot_get_class_constructor
#endif

static godot_dictionary _cffi_d_godot_get_global_constants(void)
{
  return godot_get_global_constants();
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_get_global_constants(PyObject *self, PyObject *noarg)
{
  godot_dictionary result;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_get_global_constants(); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  (void)noarg; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(1486));
}
#else
static void _cffi_f_godot_get_global_constants(godot_dictionary *result)
{
  { *result = godot_get_global_constants(); }
}
#endif

static void * _cffi_d_godot_global_get_singleton(char * x0)
{
  return godot_global_get_singleton(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_global_get_singleton(PyObject *self, PyObject *arg0)
{
  char * x0;
  Py_ssize_t datasize;
  void * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(409), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (char *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(409), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_global_get_singleton(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(114));
}
#else
#  define _cffi_f_godot_global_get_singleton _cffi_d_godot_global_get_singleton
#endif

static void _cffi_d_godot_image_blit_rect(godot_image * x0, godot_image const * x1, godot_rect2 const * x2, godot_vector2 const * x3)
{
  godot_image_blit_rect(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_blit_rect(PyObject *self, PyObject *args)
{
  godot_image * x0;
  godot_image const * x1;
  godot_rect2 const * x2;
  godot_vector2 const * x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_image_blit_rect", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(655), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_image const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(655), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(60), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_rect2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(60), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(64), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_image_blit_rect(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_image_blit_rect _cffi_d_godot_image_blit_rect
#endif

static void _cffi_d_godot_image_compressed(godot_image * x0, godot_image * x1, int x2)
{
  godot_image_compressed(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_compressed(PyObject *self, PyObject *args)
{
  godot_image * x0;
  godot_image * x1;
  int x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_image_compressed", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(22), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_image_compressed(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_image_compressed _cffi_d_godot_image_compressed
#endif

static void _cffi_d_godot_image_converted(godot_image * x0, godot_image * x1, int x2)
{
  godot_image_converted(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_converted(PyObject *self, PyObject *args)
{
  godot_image * x0;
  godot_image * x1;
  int x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_image_converted", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(22), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_image_converted(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_image_converted _cffi_d_godot_image_converted
#endif

static void _cffi_d_godot_image_decompressed(godot_image * x0, godot_image * x1)
{
  godot_image_decompressed(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_decompressed(PyObject *self, PyObject *args)
{
  godot_image * x0;
  godot_image * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_image_decompressed", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(22), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_image_decompressed(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_image_decompressed _cffi_d_godot_image_decompressed
#endif

static void _cffi_d_godot_image_destroy(godot_image * x0)
{
  godot_image_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_destroy(PyObject *self, PyObject *arg0)
{
  godot_image * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_image_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_image_destroy _cffi_d_godot_image_destroy
#endif

static _Bool _cffi_d_godot_image_empty(godot_image * x0)
{
  return godot_image_empty(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_empty(PyObject *self, PyObject *arg0)
{
  godot_image * x0;
  Py_ssize_t datasize;
  _Bool result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_image_empty(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_image_empty _cffi_d_godot_image_empty
#endif

static void _cffi_d_godot_image_fix_alpha_edges(godot_image * x0)
{
  godot_image_fix_alpha_edges(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_fix_alpha_edges(PyObject *self, PyObject *arg0)
{
  godot_image * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_image_fix_alpha_edges(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_image_fix_alpha_edges _cffi_d_godot_image_fix_alpha_edges
#endif

static void _cffi_d_godot_image_get_data(godot_image * x0, godot_pool_byte_array * x1)
{
  godot_image_get_data(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_get_data(PyObject *self, PyObject *args)
{
  godot_image * x0;
  godot_pool_byte_array * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_image_get_data", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(320), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_image_get_data(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_image_get_data _cffi_d_godot_image_get_data
#endif

static int _cffi_d_godot_image_get_format(godot_image * x0)
{
  return godot_image_get_format(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_get_format(PyObject *self, PyObject *arg0)
{
  godot_image * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_image_get_format(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_image_get_format _cffi_d_godot_image_get_format
#endif

static int _cffi_d_godot_image_get_height(godot_image * x0)
{
  return godot_image_get_height(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_get_height(PyObject *self, PyObject *arg0)
{
  godot_image * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_image_get_height(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_image_get_height _cffi_d_godot_image_get_height
#endif

static void _cffi_d_godot_image_get_rect(godot_image * x0, godot_image * x1, godot_rect2 const * x2)
{
  godot_image_get_rect(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_get_rect(PyObject *self, PyObject *args)
{
  godot_image * x0;
  godot_image * x1;
  godot_rect2 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_image_get_rect", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(22), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(60), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_rect2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(60), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_image_get_rect(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_image_get_rect _cffi_d_godot_image_get_rect
#endif

static void _cffi_d_godot_image_get_used_rect(godot_image * x0, godot_rect2 * x1)
{
  godot_image_get_used_rect(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_get_used_rect(PyObject *self, PyObject *args)
{
  godot_image * x0;
  godot_rect2 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_image_get_used_rect", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(56), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_image_get_used_rect(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_image_get_used_rect _cffi_d_godot_image_get_used_rect
#endif

static int _cffi_d_godot_image_get_width(godot_image * x0)
{
  return godot_image_get_width(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_get_width(PyObject *self, PyObject *arg0)
{
  godot_image * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_image_get_width(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_image_get_width _cffi_d_godot_image_get_width
#endif

static int _cffi_d_godot_image_load(godot_image * x0, godot_string const * x1)
{
  return godot_image_load(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_load(PyObject *self, PyObject *args)
{
  godot_image * x0;
  godot_string const * x1;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_image_load", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_image_load(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_image_load _cffi_d_godot_image_load
#endif

static void _cffi_d_godot_image_new(godot_image * x0, int x1, int x2, _Bool x3, int x4)
{
  godot_image_new(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_new(PyObject *self, PyObject *args)
{
  godot_image * x0;
  int x1;
  int x2;
  _Bool x3;
  int x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "godot_image_new", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  x3 = (_Bool)_cffi_to_c__Bool(arg3);
  if (x3 == (_Bool)-1 && PyErr_Occurred())
    return NULL;

  x4 = _cffi_to_c_int(arg4, int);
  if (x4 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_image_new(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_image_new _cffi_d_godot_image_new
#endif

static void _cffi_d_godot_image_resized(godot_image * x0, godot_image * x1, int x2, int x3, int x4)
{
  godot_image_resized(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_resized(PyObject *self, PyObject *args)
{
  godot_image * x0;
  godot_image * x1;
  int x2;
  int x3;
  int x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "godot_image_resized", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(22), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  x3 = _cffi_to_c_int(arg3, int);
  if (x3 == (int)-1 && PyErr_Occurred())
    return NULL;

  x4 = _cffi_to_c_int(arg4, int);
  if (x4 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_image_resized(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_image_resized _cffi_d_godot_image_resized
#endif

static int _cffi_d_godot_image_save_png(godot_image * x0, godot_string const * x1)
{
  return godot_image_save_png(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_image_save_png(PyObject *self, PyObject *args)
{
  godot_image * x0;
  godot_string const * x1;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_image_save_png", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(22), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_image_save_png(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_image_save_png _cffi_d_godot_image_save_png
#endif

static godot_string _cffi_d_godot_input_event_as_string(godot_input_event const * x0)
{
  return godot_input_event_as_string(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_as_string(PyObject *self, PyObject *arg0)
{
  godot_input_event const * x0;
  Py_ssize_t datasize;
  godot_string result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(25), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(25), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_as_string(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(1515));
}
#else
static void _cffi_f_godot_input_event_as_string(godot_string *result, godot_input_event const * x0)
{
  { *result = godot_input_event_as_string(x0); }
}
#endif

static int * _cffi_d_godot_input_event_get_device(godot_input_event * x0)
{
  return godot_input_event_get_device(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_get_device(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  int * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_get_device(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(133));
}
#else
#  define _cffi_f_godot_input_event_get_device _cffi_d_godot_input_event_get_device
#endif

static uint32_t * _cffi_d_godot_input_event_get_id(godot_input_event * x0)
{
  return godot_input_event_get_id(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_get_id(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  uint32_t * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_get_id(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1523));
}
#else
#  define _cffi_f_godot_input_event_get_id _cffi_d_godot_input_event_get_id
#endif

static enum godot_input_event_type * _cffi_d_godot_input_event_get_type(godot_input_event * x0)
{
  return godot_input_event_get_type(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_get_type(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  enum godot_input_event_type * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_get_type(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1480));
}
#else
#  define _cffi_f_godot_input_event_get_type _cffi_d_godot_input_event_get_type
#endif

static _Bool _cffi_d_godot_input_event_is_action(godot_input_event const * x0, godot_string const * x1)
{
  return godot_input_event_is_action(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_is_action(PyObject *self, PyObject *args)
{
  godot_input_event const * x0;
  godot_string const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_input_event_is_action", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(25), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(25), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_is_action(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_input_event_is_action _cffi_d_godot_input_event_is_action
#endif

static _Bool _cffi_d_godot_input_event_is_action_pressed(godot_input_event const * x0, godot_string const * x1)
{
  return godot_input_event_is_action_pressed(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_is_action_pressed(PyObject *self, PyObject *args)
{
  godot_input_event const * x0;
  godot_string const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_input_event_is_action_pressed", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(25), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(25), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_is_action_pressed(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_input_event_is_action_pressed _cffi_d_godot_input_event_is_action_pressed
#endif

static _Bool _cffi_d_godot_input_event_is_action_released(godot_input_event const * x0, godot_string const * x1)
{
  return godot_input_event_is_action_released(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_is_action_released(PyObject *self, PyObject *args)
{
  godot_input_event const * x0;
  godot_string const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_input_event_is_action_released", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(25), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(25), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_is_action_released(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_input_event_is_action_released _cffi_d_godot_input_event_is_action_released
#endif

static _Bool _cffi_d_godot_input_event_is_echo(godot_input_event const * x0)
{
  return godot_input_event_is_echo(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_is_echo(PyObject *self, PyObject *arg0)
{
  godot_input_event const * x0;
  Py_ssize_t datasize;
  _Bool result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(25), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(25), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_is_echo(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_input_event_is_echo _cffi_d_godot_input_event_is_echo
#endif

static _Bool _cffi_d_godot_input_event_is_pressed(godot_input_event const * x0)
{
  return godot_input_event_is_pressed(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_is_pressed(PyObject *self, PyObject *arg0)
{
  godot_input_event const * x0;
  Py_ssize_t datasize;
  _Bool result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(25), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(25), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_is_pressed(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_input_event_is_pressed _cffi_d_godot_input_event_is_pressed
#endif

static int * _cffi_d_godot_input_event_joypad_button_get_button_index(godot_input_event * x0)
{
  return godot_input_event_joypad_button_get_button_index(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_joypad_button_get_button_index(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  int * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_joypad_button_get_button_index(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(133));
}
#else
#  define _cffi_f_godot_input_event_joypad_button_get_button_index _cffi_d_godot_input_event_joypad_button_get_button_index
#endif

static _Bool * _cffi_d_godot_input_event_joypad_button_get_pressed(godot_input_event * x0)
{
  return godot_input_event_joypad_button_get_pressed(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_joypad_button_get_pressed(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  _Bool * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_joypad_button_get_pressed(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(95));
}
#else
#  define _cffi_f_godot_input_event_joypad_button_get_pressed _cffi_d_godot_input_event_joypad_button_get_pressed
#endif

static float * _cffi_d_godot_input_event_joypad_button_get_pressure(godot_input_event * x0)
{
  return godot_input_event_joypad_button_get_pressure(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_joypad_button_get_pressure(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_joypad_button_get_pressure(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_joypad_button_get_pressure _cffi_d_godot_input_event_joypad_button_get_pressure
#endif

static int * _cffi_d_godot_input_event_joypad_motion_get_axis(godot_input_event * x0)
{
  return godot_input_event_joypad_motion_get_axis(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_joypad_motion_get_axis(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  int * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_joypad_motion_get_axis(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(133));
}
#else
#  define _cffi_f_godot_input_event_joypad_motion_get_axis _cffi_d_godot_input_event_joypad_motion_get_axis
#endif

static float * _cffi_d_godot_input_event_joypad_motion_get_axis_value(godot_input_event * x0)
{
  return godot_input_event_joypad_motion_get_axis_value(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_joypad_motion_get_axis_value(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_joypad_motion_get_axis_value(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_joypad_motion_get_axis_value _cffi_d_godot_input_event_joypad_motion_get_axis_value
#endif

static _Bool * _cffi_d_godot_input_event_key_get_echo(godot_input_event * x0)
{
  return godot_input_event_key_get_echo(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_key_get_echo(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  _Bool * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_key_get_echo(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(95));
}
#else
#  define _cffi_f_godot_input_event_key_get_echo _cffi_d_godot_input_event_key_get_echo
#endif

static _Bool * _cffi_d_godot_input_event_key_get_pressed(godot_input_event * x0)
{
  return godot_input_event_key_get_pressed(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_key_get_pressed(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  _Bool * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_key_get_pressed(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(95));
}
#else
#  define _cffi_f_godot_input_event_key_get_pressed _cffi_d_godot_input_event_key_get_pressed
#endif

static uint32_t * _cffi_d_godot_input_event_key_get_scancode(godot_input_event * x0)
{
  return godot_input_event_key_get_scancode(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_key_get_scancode(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  uint32_t * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_key_get_scancode(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1523));
}
#else
#  define _cffi_f_godot_input_event_key_get_scancode _cffi_d_godot_input_event_key_get_scancode
#endif

static uint32_t * _cffi_d_godot_input_event_key_get_unicode(godot_input_event * x0)
{
  return godot_input_event_key_get_unicode(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_key_get_unicode(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  uint32_t * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_key_get_unicode(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1523));
}
#else
#  define _cffi_f_godot_input_event_key_get_unicode _cffi_d_godot_input_event_key_get_unicode
#endif

static _Bool * _cffi_d_godot_input_event_mod_get_alt(godot_input_event * x0)
{
  return godot_input_event_mod_get_alt(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mod_get_alt(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  _Bool * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mod_get_alt(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(95));
}
#else
#  define _cffi_f_godot_input_event_mod_get_alt _cffi_d_godot_input_event_mod_get_alt
#endif

static _Bool * _cffi_d_godot_input_event_mod_get_command(godot_input_event * x0)
{
  return godot_input_event_mod_get_command(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mod_get_command(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  _Bool * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mod_get_command(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(95));
}
#else
#  define _cffi_f_godot_input_event_mod_get_command _cffi_d_godot_input_event_mod_get_command
#endif

static _Bool * _cffi_d_godot_input_event_mod_get_ctrl(godot_input_event * x0)
{
  return godot_input_event_mod_get_ctrl(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mod_get_ctrl(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  _Bool * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mod_get_ctrl(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(95));
}
#else
#  define _cffi_f_godot_input_event_mod_get_ctrl _cffi_d_godot_input_event_mod_get_ctrl
#endif

static _Bool * _cffi_d_godot_input_event_mod_get_meta(godot_input_event * x0)
{
  return godot_input_event_mod_get_meta(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mod_get_meta(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  _Bool * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mod_get_meta(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(95));
}
#else
#  define _cffi_f_godot_input_event_mod_get_meta _cffi_d_godot_input_event_mod_get_meta
#endif

static _Bool * _cffi_d_godot_input_event_mod_get_shift(godot_input_event * x0)
{
  return godot_input_event_mod_get_shift(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mod_get_shift(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  _Bool * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mod_get_shift(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(95));
}
#else
#  define _cffi_f_godot_input_event_mod_get_shift _cffi_d_godot_input_event_mod_get_shift
#endif

static int * _cffi_d_godot_input_event_mouse_button_get_button_index(godot_input_event * x0)
{
  return godot_input_event_mouse_button_get_button_index(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mouse_button_get_button_index(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  int * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mouse_button_get_button_index(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(133));
}
#else
#  define _cffi_f_godot_input_event_mouse_button_get_button_index _cffi_d_godot_input_event_mouse_button_get_button_index
#endif

static _Bool * _cffi_d_godot_input_event_mouse_button_get_doubleclick(godot_input_event * x0)
{
  return godot_input_event_mouse_button_get_doubleclick(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mouse_button_get_doubleclick(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  _Bool * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mouse_button_get_doubleclick(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(95));
}
#else
#  define _cffi_f_godot_input_event_mouse_button_get_doubleclick _cffi_d_godot_input_event_mouse_button_get_doubleclick
#endif

static _Bool * _cffi_d_godot_input_event_mouse_button_get_pressed(godot_input_event * x0)
{
  return godot_input_event_mouse_button_get_pressed(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mouse_button_get_pressed(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  _Bool * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mouse_button_get_pressed(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(95));
}
#else
#  define _cffi_f_godot_input_event_mouse_button_get_pressed _cffi_d_godot_input_event_mouse_button_get_pressed
#endif

static int * _cffi_d_godot_input_event_mouse_get_button_mask(godot_input_event * x0)
{
  return godot_input_event_mouse_get_button_mask(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mouse_get_button_mask(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  int * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mouse_get_button_mask(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(133));
}
#else
#  define _cffi_f_godot_input_event_mouse_get_button_mask _cffi_d_godot_input_event_mouse_get_button_mask
#endif

static float * _cffi_d_godot_input_event_mouse_get_global_x(godot_input_event * x0)
{
  return godot_input_event_mouse_get_global_x(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mouse_get_global_x(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mouse_get_global_x(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_mouse_get_global_x _cffi_d_godot_input_event_mouse_get_global_x
#endif

static float * _cffi_d_godot_input_event_mouse_get_global_y(godot_input_event * x0)
{
  return godot_input_event_mouse_get_global_y(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mouse_get_global_y(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mouse_get_global_y(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_mouse_get_global_y _cffi_d_godot_input_event_mouse_get_global_y
#endif

static float * _cffi_d_godot_input_event_mouse_get_x(godot_input_event * x0)
{
  return godot_input_event_mouse_get_x(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mouse_get_x(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mouse_get_x(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_mouse_get_x _cffi_d_godot_input_event_mouse_get_x
#endif

static float * _cffi_d_godot_input_event_mouse_get_y(godot_input_event * x0)
{
  return godot_input_event_mouse_get_y(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mouse_get_y(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mouse_get_y(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_mouse_get_y _cffi_d_godot_input_event_mouse_get_y
#endif

static float * _cffi_d_godot_input_event_mouse_motion_get_relative_x(godot_input_event * x0)
{
  return godot_input_event_mouse_motion_get_relative_x(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mouse_motion_get_relative_x(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mouse_motion_get_relative_x(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_mouse_motion_get_relative_x _cffi_d_godot_input_event_mouse_motion_get_relative_x
#endif

static float * _cffi_d_godot_input_event_mouse_motion_get_relative_y(godot_input_event * x0)
{
  return godot_input_event_mouse_motion_get_relative_y(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mouse_motion_get_relative_y(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mouse_motion_get_relative_y(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_mouse_motion_get_relative_y _cffi_d_godot_input_event_mouse_motion_get_relative_y
#endif

static float * _cffi_d_godot_input_event_mouse_motion_get_speed_x(godot_input_event * x0)
{
  return godot_input_event_mouse_motion_get_speed_x(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mouse_motion_get_speed_x(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mouse_motion_get_speed_x(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_mouse_motion_get_speed_x _cffi_d_godot_input_event_mouse_motion_get_speed_x
#endif

static float * _cffi_d_godot_input_event_mouse_motion_get_speed_y(godot_input_event * x0)
{
  return godot_input_event_mouse_motion_get_speed_y(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_mouse_motion_get_speed_y(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_mouse_motion_get_speed_y(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_mouse_motion_get_speed_y _cffi_d_godot_input_event_mouse_motion_get_speed_y
#endif

static void _cffi_d_godot_input_event_new(godot_input_event * x0)
{
  godot_input_event_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_new(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_input_event_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_input_event_new _cffi_d_godot_input_event_new
#endif

static int * _cffi_d_godot_input_event_screen_drag_get_index(godot_input_event * x0)
{
  return godot_input_event_screen_drag_get_index(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_screen_drag_get_index(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  int * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_screen_drag_get_index(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(133));
}
#else
#  define _cffi_f_godot_input_event_screen_drag_get_index _cffi_d_godot_input_event_screen_drag_get_index
#endif

static float * _cffi_d_godot_input_event_screen_drag_get_relative_x(godot_input_event * x0)
{
  return godot_input_event_screen_drag_get_relative_x(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_screen_drag_get_relative_x(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_screen_drag_get_relative_x(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_screen_drag_get_relative_x _cffi_d_godot_input_event_screen_drag_get_relative_x
#endif

static float * _cffi_d_godot_input_event_screen_drag_get_relative_y(godot_input_event * x0)
{
  return godot_input_event_screen_drag_get_relative_y(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_screen_drag_get_relative_y(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_screen_drag_get_relative_y(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_screen_drag_get_relative_y _cffi_d_godot_input_event_screen_drag_get_relative_y
#endif

static float * _cffi_d_godot_input_event_screen_drag_get_speed_x(godot_input_event * x0)
{
  return godot_input_event_screen_drag_get_speed_x(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_screen_drag_get_speed_x(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_screen_drag_get_speed_x(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_screen_drag_get_speed_x _cffi_d_godot_input_event_screen_drag_get_speed_x
#endif

static float * _cffi_d_godot_input_event_screen_drag_get_speed_y(godot_input_event * x0)
{
  return godot_input_event_screen_drag_get_speed_y(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_screen_drag_get_speed_y(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_screen_drag_get_speed_y(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_screen_drag_get_speed_y _cffi_d_godot_input_event_screen_drag_get_speed_y
#endif

static float * _cffi_d_godot_input_event_screen_drag_get_x(godot_input_event * x0)
{
  return godot_input_event_screen_drag_get_x(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_screen_drag_get_x(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_screen_drag_get_x(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_screen_drag_get_x _cffi_d_godot_input_event_screen_drag_get_x
#endif

static float * _cffi_d_godot_input_event_screen_drag_get_y(godot_input_event * x0)
{
  return godot_input_event_screen_drag_get_y(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_screen_drag_get_y(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_screen_drag_get_y(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_screen_drag_get_y _cffi_d_godot_input_event_screen_drag_get_y
#endif

static int * _cffi_d_godot_input_event_screen_touch_get_index(godot_input_event * x0)
{
  return godot_input_event_screen_touch_get_index(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_screen_touch_get_index(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  int * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_screen_touch_get_index(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(133));
}
#else
#  define _cffi_f_godot_input_event_screen_touch_get_index _cffi_d_godot_input_event_screen_touch_get_index
#endif

static _Bool * _cffi_d_godot_input_event_screen_touch_get_pressed(godot_input_event * x0)
{
  return godot_input_event_screen_touch_get_pressed(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_screen_touch_get_pressed(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  _Bool * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_screen_touch_get_pressed(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(95));
}
#else
#  define _cffi_f_godot_input_event_screen_touch_get_pressed _cffi_d_godot_input_event_screen_touch_get_pressed
#endif

static float * _cffi_d_godot_input_event_screen_touch_get_x(godot_input_event * x0)
{
  return godot_input_event_screen_touch_get_x(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_screen_touch_get_x(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_screen_touch_get_x(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_screen_touch_get_x _cffi_d_godot_input_event_screen_touch_get_x
#endif

static float * _cffi_d_godot_input_event_screen_touch_get_y(godot_input_event * x0)
{
  return godot_input_event_screen_touch_get_y(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_screen_touch_get_y(PyObject *self, PyObject *arg0)
{
  godot_input_event * x0;
  Py_ssize_t datasize;
  float * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_input_event_screen_touch_get_y(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1482));
}
#else
#  define _cffi_f_godot_input_event_screen_touch_get_y _cffi_d_godot_input_event_screen_touch_get_y
#endif

static void _cffi_d_godot_input_event_set_as_action(godot_input_event * x0, godot_string const * x1, _Bool x2)
{
  godot_input_event_set_as_action(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_input_event_set_as_action(PyObject *self, PyObject *args)
{
  godot_input_event * x0;
  godot_string const * x1;
  _Bool x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_input_event_set_as_action", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  x2 = (_Bool)_cffi_to_c__Bool(arg2);
  if (x2 == (_Bool)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_input_event_set_as_action(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_input_event_set_as_action _cffi_d_godot_input_event_set_as_action
#endif

static godot_method_bind * _cffi_d_godot_method_bind_get_method(char const * x0, char const * x1)
{
  return godot_method_bind_get_method(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_method_bind_get_method(PyObject *self, PyObject *args)
{
  char const * x0;
  char const * x1;
  Py_ssize_t datasize;
  godot_method_bind * result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_method_bind_get_method", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(219), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (char const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(219), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(219), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (char const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(219), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_method_bind_get_method(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(683));
}
#else
#  define _cffi_f_godot_method_bind_get_method _cffi_d_godot_method_bind_get_method
#endif

static void _cffi_d_godot_method_bind_ptrcall(godot_method_bind * x0, void * x1, void const * * x2, void * x3)
{
  godot_method_bind_ptrcall(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_method_bind_ptrcall(PyObject *self, PyObject *args)
{
  godot_method_bind * x0;
  void * x1;
  void const * * x2;
  void * x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_method_bind_ptrcall", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(683), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_method_bind *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(683), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(114), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (void *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(114), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(685), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (void const * *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(685), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(114), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (void *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(114), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_method_bind_ptrcall(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_method_bind_ptrcall _cffi_d_godot_method_bind_ptrcall
#endif

static void * _cffi_d_godot_native_get_userdata(void * x0)
{
  return godot_native_get_userdata(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_native_get_userdata(PyObject *self, PyObject *arg0)
{
  void * x0;
  Py_ssize_t datasize;
  void * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(114), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (void *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(114), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_native_get_userdata(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(114));
}
#else
#  define _cffi_f_godot_native_get_userdata _cffi_d_godot_native_get_userdata
#endif

static void _cffi_d_godot_node_path_as_string(godot_node_path * x0, godot_string * x1)
{
  godot_node_path_as_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_node_path_as_string(PyObject *self, PyObject *args)
{
  godot_node_path * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_node_path_as_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(32), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_node_path *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(32), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_node_path_as_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_node_path_as_string _cffi_d_godot_node_path_as_string
#endif

static void _cffi_d_godot_node_path_destroy(godot_node_path * x0)
{
  godot_node_path_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_node_path_destroy(PyObject *self, PyObject *arg0)
{
  godot_node_path * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(32), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_node_path *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(32), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_node_path_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_node_path_destroy _cffi_d_godot_node_path_destroy
#endif

static void _cffi_d_godot_node_path_get_name(godot_node_path * x0, godot_string * x1, int x2)
{
  godot_node_path_get_name(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_node_path_get_name(PyObject *self, PyObject *args)
{
  godot_node_path * x0;
  godot_string * x1;
  int x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_node_path_get_name", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(32), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_node_path *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(32), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_node_path_get_name(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_node_path_get_name _cffi_d_godot_node_path_get_name
#endif

static int _cffi_d_godot_node_path_get_name_count(godot_node_path * x0)
{
  return godot_node_path_get_name_count(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_node_path_get_name_count(PyObject *self, PyObject *arg0)
{
  godot_node_path * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(32), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_node_path *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(32), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_node_path_get_name_count(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_node_path_get_name_count _cffi_d_godot_node_path_get_name_count
#endif

static void _cffi_d_godot_node_path_get_property(godot_node_path * x0, godot_string * x1)
{
  godot_node_path_get_property(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_node_path_get_property(PyObject *self, PyObject *args)
{
  godot_node_path * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_node_path_get_property", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(32), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_node_path *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(32), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_node_path_get_property(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_node_path_get_property _cffi_d_godot_node_path_get_property
#endif

static void _cffi_d_godot_node_path_get_subname(godot_node_path * x0, godot_string * x1, int x2)
{
  godot_node_path_get_subname(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_node_path_get_subname(PyObject *self, PyObject *args)
{
  godot_node_path * x0;
  godot_string * x1;
  int x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_node_path_get_subname", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(32), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_node_path *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(32), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_node_path_get_subname(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_node_path_get_subname _cffi_d_godot_node_path_get_subname
#endif

static int _cffi_d_godot_node_path_get_subname_count(godot_node_path * x0)
{
  return godot_node_path_get_subname_count(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_node_path_get_subname_count(PyObject *self, PyObject *arg0)
{
  godot_node_path * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(32), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_node_path *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(32), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_node_path_get_subname_count(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_node_path_get_subname_count _cffi_d_godot_node_path_get_subname_count
#endif

static _Bool _cffi_d_godot_node_path_is_absolute(godot_node_path * x0)
{
  return godot_node_path_is_absolute(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_node_path_is_absolute(PyObject *self, PyObject *arg0)
{
  godot_node_path * x0;
  Py_ssize_t datasize;
  _Bool result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(32), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_node_path *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(32), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_node_path_is_absolute(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_node_path_is_absolute _cffi_d_godot_node_path_is_absolute
#endif

static _Bool _cffi_d_godot_node_path_is_empty(godot_node_path * x0)
{
  return godot_node_path_is_empty(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_node_path_is_empty(PyObject *self, PyObject *arg0)
{
  godot_node_path * x0;
  Py_ssize_t datasize;
  _Bool result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(32), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_node_path *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(32), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_node_path_is_empty(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_node_path_is_empty _cffi_d_godot_node_path_is_empty
#endif

static void _cffi_d_godot_node_path_new(godot_node_path * x0)
{
  godot_node_path_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_node_path_new(PyObject *self, PyObject *arg0)
{
  godot_node_path * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(32), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_node_path *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(32), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_node_path_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_node_path_new _cffi_d_godot_node_path_new
#endif

static void _cffi_d_godot_object_destroy(void * x0)
{
  godot_object_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_object_destroy(PyObject *self, PyObject *arg0)
{
  void * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(114), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (void *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(114), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_object_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_object_destroy _cffi_d_godot_object_destroy
#endif

static void _cffi_d_godot_plane_as_string(godot_plane * x0, godot_string * x1)
{
  godot_plane_as_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_as_string(PyObject *self, PyObject *args)
{
  godot_plane * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_plane_as_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(35), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(35), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_plane_as_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_plane_as_string _cffi_d_godot_plane_as_string
#endif

static void _cffi_d_godot_plane_center(godot_plane * x0, godot_vector3 * x1)
{
  godot_plane_center(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_center(PyObject *self, PyObject *args)
{
  godot_plane * x0;
  godot_vector3 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_plane_center", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(35), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(35), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_plane_center(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_plane_center _cffi_d_godot_plane_center
#endif

static float _cffi_d_godot_plane_distance_to(godot_plane * x0, godot_vector3 const * x1)
{
  return godot_plane_distance_to(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_distance_to(PyObject *self, PyObject *args)
{
  godot_plane * x0;
  godot_vector3 const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_plane_distance_to", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(35), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(35), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_plane_distance_to(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_plane_distance_to _cffi_d_godot_plane_distance_to
#endif

static void _cffi_d_godot_plane_get_any_point(godot_plane * x0, godot_vector3 * x1)
{
  godot_plane_get_any_point(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_get_any_point(PyObject *self, PyObject *args)
{
  godot_plane * x0;
  godot_vector3 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_plane_get_any_point", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(35), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(35), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_plane_get_any_point(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_plane_get_any_point _cffi_d_godot_plane_get_any_point
#endif

static _Bool _cffi_d_godot_plane_has_point(godot_plane * x0, godot_vector3 const * x1, float x2)
{
  return godot_plane_has_point(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_has_point(PyObject *self, PyObject *args)
{
  godot_plane * x0;
  godot_vector3 const * x1;
  float x2;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_plane_has_point", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(35), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(35), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_plane_has_point(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_plane_has_point _cffi_d_godot_plane_has_point
#endif

static _Bool _cffi_d_godot_plane_intersect_3(godot_plane const * x0, godot_vector3 * x1, godot_plane const * x2, godot_plane const * x3)
{
  return godot_plane_intersect_3(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_intersect_3(PyObject *self, PyObject *args)
{
  godot_plane const * x0;
  godot_vector3 * x1;
  godot_plane const * x2;
  godot_plane const * x3;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_plane_intersect_3", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(44), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(44), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(44), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_plane const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(44), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(44), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (godot_plane const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(44), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_plane_intersect_3(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_plane_intersect_3 _cffi_d_godot_plane_intersect_3
#endif

static _Bool _cffi_d_godot_plane_intersects_ray(godot_plane const * x0, godot_vector3 * x1, godot_vector3 const * x2, godot_vector3 const * x3)
{
  return godot_plane_intersects_ray(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_intersects_ray(PyObject *self, PyObject *args)
{
  godot_plane const * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  godot_vector3 const * x3;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_plane_intersects_ray", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(44), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(44), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(36), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_plane_intersects_ray(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_plane_intersects_ray _cffi_d_godot_plane_intersects_ray
#endif

static _Bool _cffi_d_godot_plane_intersects_segment(godot_plane const * x0, godot_vector3 * x1, godot_vector3 const * x2, godot_vector3 const * x3)
{
  return godot_plane_intersects_segment(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_intersects_segment(PyObject *self, PyObject *args)
{
  godot_plane const * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  godot_vector3 const * x3;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_plane_intersects_segment", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(44), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(44), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(36), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_plane_intersects_segment(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_plane_intersects_segment _cffi_d_godot_plane_intersects_segment
#endif

static _Bool _cffi_d_godot_plane_is_point_over(godot_plane * x0, godot_vector3 const * x1)
{
  return godot_plane_is_point_over(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_is_point_over(PyObject *self, PyObject *args)
{
  godot_plane * x0;
  godot_vector3 const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_plane_is_point_over", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(35), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(35), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_plane_is_point_over(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_plane_is_point_over _cffi_d_godot_plane_is_point_over
#endif

static void _cffi_d_godot_plane_new1(godot_plane * x0, float x1, float x2, float x3, float x4)
{
  godot_plane_new1(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_new1(PyObject *self, PyObject *args)
{
  godot_plane * x0;
  float x1;
  float x2;
  float x3;
  float x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "godot_plane_new1", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(35), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(35), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  x4 = (float)_cffi_to_c_float(arg4);
  if (x4 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_plane_new1(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_plane_new1 _cffi_d_godot_plane_new1
#endif

static void _cffi_d_godot_plane_new2(godot_plane * x0, godot_vector3 const * x1, godot_vector3 const * x2, godot_vector3 const * x3)
{
  godot_plane_new2(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_new2(PyObject *self, PyObject *args)
{
  godot_plane * x0;
  godot_vector3 const * x1;
  godot_vector3 const * x2;
  godot_vector3 const * x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_plane_new2", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(35), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(35), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(36), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_plane_new2(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_plane_new2 _cffi_d_godot_plane_new2
#endif

static void _cffi_d_godot_plane_new3(godot_plane * x0, godot_vector3 const * x1, float x2)
{
  godot_plane_new3(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_new3(PyObject *self, PyObject *args)
{
  godot_plane * x0;
  godot_vector3 const * x1;
  float x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_plane_new3", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(35), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(35), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_plane_new3(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_plane_new3 _cffi_d_godot_plane_new3
#endif

static void _cffi_d_godot_plane_normalized(godot_plane * x0, godot_plane * x1)
{
  godot_plane_normalized(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_normalized(PyObject *self, PyObject *args)
{
  godot_plane * x0;
  godot_plane * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_plane_normalized", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(35), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(35), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(35), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_plane *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(35), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_plane_normalized(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_plane_normalized _cffi_d_godot_plane_normalized
#endif

static void _cffi_d_godot_plane_project(godot_plane * x0, godot_vector3 * x1, godot_vector3 const * x2)
{
  godot_plane_project(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_plane_project(PyObject *self, PyObject *args)
{
  godot_plane * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_plane_project", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(35), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_plane *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(35), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_plane_project(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_plane_project _cffi_d_godot_plane_project
#endif

static void _cffi_d_godot_pool_byte_array_append(godot_pool_byte_array * x0, uint8_t x1)
{
  godot_pool_byte_array_append(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_byte_array_append(PyObject *self, PyObject *args)
{
  godot_pool_byte_array * x0;
  uint8_t x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_byte_array_append", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(320), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint8_t);
  if (x1 == (uint8_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_byte_array_append(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_byte_array_append _cffi_d_godot_pool_byte_array_append
#endif

static void _cffi_d_godot_pool_byte_array_append_array(godot_pool_byte_array * x0, godot_pool_byte_array const * x1)
{
  godot_pool_byte_array_append_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_byte_array_append_array(PyObject *self, PyObject *args)
{
  godot_pool_byte_array * x0;
  godot_pool_byte_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_byte_array_append_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(320), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(467), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_byte_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(467), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_byte_array_append_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_byte_array_append_array _cffi_d_godot_pool_byte_array_append_array
#endif

static void _cffi_d_godot_pool_byte_array_destroy(godot_pool_byte_array * x0)
{
  godot_pool_byte_array_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_byte_array_destroy(PyObject *self, PyObject *arg0)
{
  godot_pool_byte_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(320), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_byte_array_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_byte_array_destroy _cffi_d_godot_pool_byte_array_destroy
#endif

static uint8_t _cffi_d_godot_pool_byte_array_get(godot_pool_byte_array * x0, int x1)
{
  return godot_pool_byte_array_get(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_byte_array_get(PyObject *self, PyObject *args)
{
  godot_pool_byte_array * x0;
  int x1;
  Py_ssize_t datasize;
  uint8_t result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_byte_array_get", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(320), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_byte_array_get(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, uint8_t);
}
#else
#  define _cffi_f_godot_pool_byte_array_get _cffi_d_godot_pool_byte_array_get
#endif

static int _cffi_d_godot_pool_byte_array_insert(godot_pool_byte_array * x0, int x1, uint8_t x2)
{
  return godot_pool_byte_array_insert(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_byte_array_insert(PyObject *self, PyObject *args)
{
  godot_pool_byte_array * x0;
  int x1;
  uint8_t x2;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_byte_array_insert", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(320), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  x2 = _cffi_to_c_int(arg2, uint8_t);
  if (x2 == (uint8_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_byte_array_insert(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_byte_array_insert _cffi_d_godot_pool_byte_array_insert
#endif

static void _cffi_d_godot_pool_byte_array_invert(godot_pool_byte_array * x0)
{
  godot_pool_byte_array_invert(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_byte_array_invert(PyObject *self, PyObject *arg0)
{
  godot_pool_byte_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(320), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_byte_array_invert(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_byte_array_invert _cffi_d_godot_pool_byte_array_invert
#endif

static void _cffi_d_godot_pool_byte_array_new(godot_pool_byte_array * x0)
{
  godot_pool_byte_array_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_byte_array_new(PyObject *self, PyObject *arg0)
{
  godot_pool_byte_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(320), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_byte_array_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_byte_array_new _cffi_d_godot_pool_byte_array_new
#endif

static void _cffi_d_godot_pool_byte_array_new_with_array(godot_pool_byte_array * x0, godot_array const * x1)
{
  godot_pool_byte_array_new_with_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_byte_array_new_with_array(PyObject *self, PyObject *args)
{
  godot_pool_byte_array * x0;
  godot_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_byte_array_new_with_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(320), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(4), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_byte_array_new_with_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_byte_array_new_with_array _cffi_d_godot_pool_byte_array_new_with_array
#endif

static void _cffi_d_godot_pool_byte_array_push_back(godot_pool_byte_array * x0, uint8_t x1)
{
  godot_pool_byte_array_push_back(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_byte_array_push_back(PyObject *self, PyObject *args)
{
  godot_pool_byte_array * x0;
  uint8_t x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_byte_array_push_back", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(320), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint8_t);
  if (x1 == (uint8_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_byte_array_push_back(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_byte_array_push_back _cffi_d_godot_pool_byte_array_push_back
#endif

static void _cffi_d_godot_pool_byte_array_remove(godot_pool_byte_array * x0, int x1)
{
  godot_pool_byte_array_remove(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_byte_array_remove(PyObject *self, PyObject *args)
{
  godot_pool_byte_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_byte_array_remove", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(320), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_byte_array_remove(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_byte_array_remove _cffi_d_godot_pool_byte_array_remove
#endif

static void _cffi_d_godot_pool_byte_array_resize(godot_pool_byte_array * x0, int x1)
{
  godot_pool_byte_array_resize(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_byte_array_resize(PyObject *self, PyObject *args)
{
  godot_pool_byte_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_byte_array_resize", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(320), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_byte_array_resize(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_byte_array_resize _cffi_d_godot_pool_byte_array_resize
#endif

static void _cffi_d_godot_pool_byte_array_set(godot_pool_byte_array * x0, int x1, uint8_t x2)
{
  godot_pool_byte_array_set(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_byte_array_set(PyObject *self, PyObject *args)
{
  godot_pool_byte_array * x0;
  int x1;
  uint8_t x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_byte_array_set", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(320), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  x2 = _cffi_to_c_int(arg2, uint8_t);
  if (x2 == (uint8_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_byte_array_set(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_byte_array_set _cffi_d_godot_pool_byte_array_set
#endif

static int _cffi_d_godot_pool_byte_array_size(godot_pool_byte_array * x0)
{
  return godot_pool_byte_array_size(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_byte_array_size(PyObject *self, PyObject *arg0)
{
  godot_pool_byte_array * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(320), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_byte_array_size(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_byte_array_size _cffi_d_godot_pool_byte_array_size
#endif

static void _cffi_d_godot_pool_color_array_append(godot_pool_color_array * x0, godot_color const * x1)
{
  godot_pool_color_array_append(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_color_array_append(PyObject *self, PyObject *args)
{
  godot_pool_color_array * x0;
  godot_color const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_color_array_append", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(213), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(333), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_color const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(333), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_color_array_append(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_color_array_append _cffi_d_godot_pool_color_array_append
#endif

static void _cffi_d_godot_pool_color_array_append_array(godot_pool_color_array * x0, godot_pool_color_array const * x1)
{
  godot_pool_color_array_append_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_color_array_append_array(PyObject *self, PyObject *args)
{
  godot_pool_color_array * x0;
  godot_pool_color_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_color_array_append_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(213), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(471), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_color_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(471), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_color_array_append_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_color_array_append_array _cffi_d_godot_pool_color_array_append_array
#endif

static void _cffi_d_godot_pool_color_array_destroy(godot_pool_color_array * x0)
{
  godot_pool_color_array_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_color_array_destroy(PyObject *self, PyObject *arg0)
{
  godot_pool_color_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(213), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_color_array_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_color_array_destroy _cffi_d_godot_pool_color_array_destroy
#endif

static godot_color _cffi_d_godot_pool_color_array_get(godot_pool_color_array * x0, int x1)
{
  return godot_pool_color_array_get(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_color_array_get(PyObject *self, PyObject *args)
{
  godot_pool_color_array * x0;
  int x1;
  Py_ssize_t datasize;
  godot_color result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_color_array_get", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(213), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_color_array_get(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(1485));
}
#else
static void _cffi_f_godot_pool_color_array_get(godot_color *result, godot_pool_color_array * x0, int x1)
{
  { *result = godot_pool_color_array_get(x0, x1); }
}
#endif

static int _cffi_d_godot_pool_color_array_insert(godot_pool_color_array * x0, int x1, godot_color const * x2)
{
  return godot_pool_color_array_insert(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_color_array_insert(PyObject *self, PyObject *args)
{
  godot_pool_color_array * x0;
  int x1;
  godot_color const * x2;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_color_array_insert", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(213), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(333), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_color const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(333), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_color_array_insert(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_color_array_insert _cffi_d_godot_pool_color_array_insert
#endif

static void _cffi_d_godot_pool_color_array_invert(godot_pool_color_array * x0)
{
  godot_pool_color_array_invert(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_color_array_invert(PyObject *self, PyObject *arg0)
{
  godot_pool_color_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(213), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_color_array_invert(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_color_array_invert _cffi_d_godot_pool_color_array_invert
#endif

static void _cffi_d_godot_pool_color_array_new(godot_pool_color_array * x0)
{
  godot_pool_color_array_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_color_array_new(PyObject *self, PyObject *arg0)
{
  godot_pool_color_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(213), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_color_array_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_color_array_new _cffi_d_godot_pool_color_array_new
#endif

static void _cffi_d_godot_pool_color_array_new_with_array(godot_pool_color_array * x0, godot_array const * x1)
{
  godot_pool_color_array_new_with_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_color_array_new_with_array(PyObject *self, PyObject *args)
{
  godot_pool_color_array * x0;
  godot_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_color_array_new_with_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(213), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(4), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_color_array_new_with_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_color_array_new_with_array _cffi_d_godot_pool_color_array_new_with_array
#endif

static void _cffi_d_godot_pool_color_array_push_back(godot_pool_color_array * x0, godot_color const * x1)
{
  godot_pool_color_array_push_back(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_color_array_push_back(PyObject *self, PyObject *args)
{
  godot_pool_color_array * x0;
  godot_color const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_color_array_push_back", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(213), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(333), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_color const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(333), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_color_array_push_back(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_color_array_push_back _cffi_d_godot_pool_color_array_push_back
#endif

static void _cffi_d_godot_pool_color_array_remove(godot_pool_color_array * x0, int x1)
{
  godot_pool_color_array_remove(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_color_array_remove(PyObject *self, PyObject *args)
{
  godot_pool_color_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_color_array_remove", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(213), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_color_array_remove(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_color_array_remove _cffi_d_godot_pool_color_array_remove
#endif

static void _cffi_d_godot_pool_color_array_resize(godot_pool_color_array * x0, int x1)
{
  godot_pool_color_array_resize(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_color_array_resize(PyObject *self, PyObject *args)
{
  godot_pool_color_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_color_array_resize", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(213), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_color_array_resize(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_color_array_resize _cffi_d_godot_pool_color_array_resize
#endif

static void _cffi_d_godot_pool_color_array_set(godot_pool_color_array * x0, int x1, godot_color const * x2)
{
  godot_pool_color_array_set(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_color_array_set(PyObject *self, PyObject *args)
{
  godot_pool_color_array * x0;
  int x1;
  godot_color const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_color_array_set", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(213), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(333), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_color const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(333), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_color_array_set(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_color_array_set _cffi_d_godot_pool_color_array_set
#endif

static int _cffi_d_godot_pool_color_array_size(godot_pool_color_array * x0)
{
  return godot_pool_color_array_size(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_color_array_size(PyObject *self, PyObject *arg0)
{
  godot_pool_color_array * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(213), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_color_array_size(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_color_array_size _cffi_d_godot_pool_color_array_size
#endif

static void _cffi_d_godot_pool_int_array_append(godot_pool_int_array * x0, int x1)
{
  godot_pool_int_array_append(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_int_array_append(PyObject *self, PyObject *args)
{
  godot_pool_int_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_int_array_append", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(336), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_int_array_append(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_int_array_append _cffi_d_godot_pool_int_array_append
#endif

static void _cffi_d_godot_pool_int_array_append_array(godot_pool_int_array * x0, godot_pool_int_array const * x1)
{
  godot_pool_int_array_append_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_int_array_append_array(PyObject *self, PyObject *args)
{
  godot_pool_int_array * x0;
  godot_pool_int_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_int_array_append_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(336), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(475), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_int_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(475), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_int_array_append_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_int_array_append_array _cffi_d_godot_pool_int_array_append_array
#endif

static void _cffi_d_godot_pool_int_array_destroy(godot_pool_int_array * x0)
{
  godot_pool_int_array_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_int_array_destroy(PyObject *self, PyObject *arg0)
{
  godot_pool_int_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(336), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_int_array_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_int_array_destroy _cffi_d_godot_pool_int_array_destroy
#endif

static int _cffi_d_godot_pool_int_array_get(godot_pool_int_array * x0, int x1)
{
  return godot_pool_int_array_get(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_int_array_get(PyObject *self, PyObject *args)
{
  godot_pool_int_array * x0;
  int x1;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_int_array_get", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(336), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_int_array_get(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_int_array_get _cffi_d_godot_pool_int_array_get
#endif

static int _cffi_d_godot_pool_int_array_insert(godot_pool_int_array * x0, int x1, int x2)
{
  return godot_pool_int_array_insert(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_int_array_insert(PyObject *self, PyObject *args)
{
  godot_pool_int_array * x0;
  int x1;
  int x2;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_int_array_insert", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(336), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_int_array_insert(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_int_array_insert _cffi_d_godot_pool_int_array_insert
#endif

static void _cffi_d_godot_pool_int_array_invert(godot_pool_int_array * x0)
{
  godot_pool_int_array_invert(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_int_array_invert(PyObject *self, PyObject *arg0)
{
  godot_pool_int_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(336), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_int_array_invert(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_int_array_invert _cffi_d_godot_pool_int_array_invert
#endif

static void _cffi_d_godot_pool_int_array_new(godot_pool_int_array * x0)
{
  godot_pool_int_array_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_int_array_new(PyObject *self, PyObject *arg0)
{
  godot_pool_int_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(336), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_int_array_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_int_array_new _cffi_d_godot_pool_int_array_new
#endif

static void _cffi_d_godot_pool_int_array_new_with_array(godot_pool_int_array * x0, godot_array const * x1)
{
  godot_pool_int_array_new_with_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_int_array_new_with_array(PyObject *self, PyObject *args)
{
  godot_pool_int_array * x0;
  godot_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_int_array_new_with_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(336), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(4), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_int_array_new_with_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_int_array_new_with_array _cffi_d_godot_pool_int_array_new_with_array
#endif

static void _cffi_d_godot_pool_int_array_push_back(godot_pool_int_array * x0, int x1)
{
  godot_pool_int_array_push_back(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_int_array_push_back(PyObject *self, PyObject *args)
{
  godot_pool_int_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_int_array_push_back", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(336), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_int_array_push_back(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_int_array_push_back _cffi_d_godot_pool_int_array_push_back
#endif

static void _cffi_d_godot_pool_int_array_remove(godot_pool_int_array * x0, int x1)
{
  godot_pool_int_array_remove(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_int_array_remove(PyObject *self, PyObject *args)
{
  godot_pool_int_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_int_array_remove", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(336), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_int_array_remove(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_int_array_remove _cffi_d_godot_pool_int_array_remove
#endif

static void _cffi_d_godot_pool_int_array_resize(godot_pool_int_array * x0, int x1)
{
  godot_pool_int_array_resize(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_int_array_resize(PyObject *self, PyObject *args)
{
  godot_pool_int_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_int_array_resize", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(336), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_int_array_resize(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_int_array_resize _cffi_d_godot_pool_int_array_resize
#endif

static void _cffi_d_godot_pool_int_array_set(godot_pool_int_array * x0, int x1, int x2)
{
  godot_pool_int_array_set(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_int_array_set(PyObject *self, PyObject *args)
{
  godot_pool_int_array * x0;
  int x1;
  int x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_int_array_set", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(336), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_int_array_set(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_int_array_set _cffi_d_godot_pool_int_array_set
#endif

static int _cffi_d_godot_pool_int_array_size(godot_pool_int_array * x0)
{
  return godot_pool_int_array_size(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_int_array_size(PyObject *self, PyObject *arg0)
{
  godot_pool_int_array * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(336), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_int_array_size(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_int_array_size _cffi_d_godot_pool_int_array_size
#endif

static void _cffi_d_godot_pool_real_array_append(godot_pool_real_array * x0, float x1)
{
  godot_pool_real_array_append(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_real_array_append(PyObject *self, PyObject *args)
{
  godot_pool_real_array * x0;
  float x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_real_array_append", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(172), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_real_array_append(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_real_array_append _cffi_d_godot_pool_real_array_append
#endif

static void _cffi_d_godot_pool_real_array_append_array(godot_pool_real_array * x0, godot_pool_real_array const * x1)
{
  godot_pool_real_array_append_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_real_array_append_array(PyObject *self, PyObject *args)
{
  godot_pool_real_array * x0;
  godot_pool_real_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_real_array_append_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(172), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(479), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_real_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(479), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_real_array_append_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_real_array_append_array _cffi_d_godot_pool_real_array_append_array
#endif

static void _cffi_d_godot_pool_real_array_destroy(godot_pool_real_array * x0)
{
  godot_pool_real_array_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_real_array_destroy(PyObject *self, PyObject *arg0)
{
  godot_pool_real_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(172), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_real_array_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_real_array_destroy _cffi_d_godot_pool_real_array_destroy
#endif

static float _cffi_d_godot_pool_real_array_get(godot_pool_real_array * x0, int x1)
{
  return godot_pool_real_array_get(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_real_array_get(PyObject *self, PyObject *args)
{
  godot_pool_real_array * x0;
  int x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_real_array_get", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(172), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_real_array_get(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_pool_real_array_get _cffi_d_godot_pool_real_array_get
#endif

static int _cffi_d_godot_pool_real_array_insert(godot_pool_real_array * x0, int x1, float x2)
{
  return godot_pool_real_array_insert(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_real_array_insert(PyObject *self, PyObject *args)
{
  godot_pool_real_array * x0;
  int x1;
  float x2;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_real_array_insert", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(172), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_real_array_insert(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_real_array_insert _cffi_d_godot_pool_real_array_insert
#endif

static void _cffi_d_godot_pool_real_array_invert(godot_pool_real_array * x0)
{
  godot_pool_real_array_invert(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_real_array_invert(PyObject *self, PyObject *arg0)
{
  godot_pool_real_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(172), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_real_array_invert(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_real_array_invert _cffi_d_godot_pool_real_array_invert
#endif

static void _cffi_d_godot_pool_real_array_new(godot_pool_real_array * x0)
{
  godot_pool_real_array_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_real_array_new(PyObject *self, PyObject *arg0)
{
  godot_pool_real_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(172), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_real_array_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_real_array_new _cffi_d_godot_pool_real_array_new
#endif

static void _cffi_d_godot_pool_real_array_new_with_array(godot_pool_real_array * x0, godot_array const * x1)
{
  godot_pool_real_array_new_with_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_real_array_new_with_array(PyObject *self, PyObject *args)
{
  godot_pool_real_array * x0;
  godot_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_real_array_new_with_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(172), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(4), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_real_array_new_with_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_real_array_new_with_array _cffi_d_godot_pool_real_array_new_with_array
#endif

static void _cffi_d_godot_pool_real_array_push_back(godot_pool_real_array * x0, float x1)
{
  godot_pool_real_array_push_back(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_real_array_push_back(PyObject *self, PyObject *args)
{
  godot_pool_real_array * x0;
  float x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_real_array_push_back", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(172), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_real_array_push_back(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_real_array_push_back _cffi_d_godot_pool_real_array_push_back
#endif

static void _cffi_d_godot_pool_real_array_remove(godot_pool_real_array * x0, int x1)
{
  godot_pool_real_array_remove(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_real_array_remove(PyObject *self, PyObject *args)
{
  godot_pool_real_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_real_array_remove", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(172), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_real_array_remove(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_real_array_remove _cffi_d_godot_pool_real_array_remove
#endif

static void _cffi_d_godot_pool_real_array_resize(godot_pool_real_array * x0, int x1)
{
  godot_pool_real_array_resize(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_real_array_resize(PyObject *self, PyObject *args)
{
  godot_pool_real_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_real_array_resize", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(172), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_real_array_resize(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_real_array_resize _cffi_d_godot_pool_real_array_resize
#endif

static void _cffi_d_godot_pool_real_array_set(godot_pool_real_array * x0, int x1, float x2)
{
  godot_pool_real_array_set(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_real_array_set(PyObject *self, PyObject *args)
{
  godot_pool_real_array * x0;
  int x1;
  float x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_real_array_set", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(172), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_real_array_set(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_real_array_set _cffi_d_godot_pool_real_array_set
#endif

static int _cffi_d_godot_pool_real_array_size(godot_pool_real_array * x0)
{
  return godot_pool_real_array_size(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_real_array_size(PyObject *self, PyObject *arg0)
{
  godot_pool_real_array * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(172), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_real_array_size(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_real_array_size _cffi_d_godot_pool_real_array_size
#endif

static void _cffi_d_godot_pool_string_array_append(godot_pool_string_array * x0, godot_string const * x1)
{
  godot_pool_string_array_append(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_string_array_append(PyObject *self, PyObject *args)
{
  godot_pool_string_array * x0;
  godot_string const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_string_array_append", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(229), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_string_array_append(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_string_array_append _cffi_d_godot_pool_string_array_append
#endif

static void _cffi_d_godot_pool_string_array_append_array(godot_pool_string_array * x0, godot_pool_string_array const * x1)
{
  godot_pool_string_array_append_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_string_array_append_array(PyObject *self, PyObject *args)
{
  godot_pool_string_array * x0;
  godot_pool_string_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_string_array_append_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(229), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(483), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_string_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(483), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_string_array_append_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_string_array_append_array _cffi_d_godot_pool_string_array_append_array
#endif

static void _cffi_d_godot_pool_string_array_destroy(godot_pool_string_array * x0)
{
  godot_pool_string_array_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_string_array_destroy(PyObject *self, PyObject *arg0)
{
  godot_pool_string_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(229), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_string_array_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_string_array_destroy _cffi_d_godot_pool_string_array_destroy
#endif

static godot_string _cffi_d_godot_pool_string_array_get(godot_pool_string_array * x0, int x1)
{
  return godot_pool_string_array_get(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_string_array_get(PyObject *self, PyObject *args)
{
  godot_pool_string_array * x0;
  int x1;
  Py_ssize_t datasize;
  godot_string result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_string_array_get", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(229), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_string_array_get(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(1515));
}
#else
static void _cffi_f_godot_pool_string_array_get(godot_string *result, godot_pool_string_array * x0, int x1)
{
  { *result = godot_pool_string_array_get(x0, x1); }
}
#endif

static int _cffi_d_godot_pool_string_array_insert(godot_pool_string_array * x0, int x1, godot_string const * x2)
{
  return godot_pool_string_array_insert(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_string_array_insert(PyObject *self, PyObject *args)
{
  godot_pool_string_array * x0;
  int x1;
  godot_string const * x2;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_string_array_insert", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(229), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(29), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_string_array_insert(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_string_array_insert _cffi_d_godot_pool_string_array_insert
#endif

static void _cffi_d_godot_pool_string_array_invert(godot_pool_string_array * x0)
{
  godot_pool_string_array_invert(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_string_array_invert(PyObject *self, PyObject *arg0)
{
  godot_pool_string_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(229), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_string_array_invert(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_string_array_invert _cffi_d_godot_pool_string_array_invert
#endif

static void _cffi_d_godot_pool_string_array_new(godot_pool_string_array * x0)
{
  godot_pool_string_array_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_string_array_new(PyObject *self, PyObject *arg0)
{
  godot_pool_string_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(229), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_string_array_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_string_array_new _cffi_d_godot_pool_string_array_new
#endif

static void _cffi_d_godot_pool_string_array_new_with_array(godot_pool_string_array * x0, godot_array const * x1)
{
  godot_pool_string_array_new_with_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_string_array_new_with_array(PyObject *self, PyObject *args)
{
  godot_pool_string_array * x0;
  godot_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_string_array_new_with_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(229), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(4), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_string_array_new_with_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_string_array_new_with_array _cffi_d_godot_pool_string_array_new_with_array
#endif

static void _cffi_d_godot_pool_string_array_push_back(godot_pool_string_array * x0, godot_string const * x1)
{
  godot_pool_string_array_push_back(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_string_array_push_back(PyObject *self, PyObject *args)
{
  godot_pool_string_array * x0;
  godot_string const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_string_array_push_back", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(229), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_string_array_push_back(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_string_array_push_back _cffi_d_godot_pool_string_array_push_back
#endif

static void _cffi_d_godot_pool_string_array_remove(godot_pool_string_array * x0, int x1)
{
  godot_pool_string_array_remove(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_string_array_remove(PyObject *self, PyObject *args)
{
  godot_pool_string_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_string_array_remove", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(229), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_string_array_remove(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_string_array_remove _cffi_d_godot_pool_string_array_remove
#endif

static void _cffi_d_godot_pool_string_array_resize(godot_pool_string_array * x0, int x1)
{
  godot_pool_string_array_resize(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_string_array_resize(PyObject *self, PyObject *args)
{
  godot_pool_string_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_string_array_resize", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(229), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_string_array_resize(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_string_array_resize _cffi_d_godot_pool_string_array_resize
#endif

static void _cffi_d_godot_pool_string_array_set(godot_pool_string_array * x0, int x1, godot_string const * x2)
{
  godot_pool_string_array_set(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_string_array_set(PyObject *self, PyObject *args)
{
  godot_pool_string_array * x0;
  int x1;
  godot_string const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_string_array_set", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(229), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(29), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_string_array_set(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_string_array_set _cffi_d_godot_pool_string_array_set
#endif

static int _cffi_d_godot_pool_string_array_size(godot_pool_string_array * x0)
{
  return godot_pool_string_array_size(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_string_array_size(PyObject *self, PyObject *arg0)
{
  godot_pool_string_array * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(229), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_string_array_size(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_string_array_size _cffi_d_godot_pool_string_array_size
#endif

static void _cffi_d_godot_pool_vector2_array_append(godot_pool_vector2_array * x0, godot_vector2 const * x1)
{
  godot_pool_vector2_array_append(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector2_array_append(PyObject *self, PyObject *args)
{
  godot_pool_vector2_array * x0;
  godot_vector2 const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector2_array_append", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(258), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(64), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector2_array_append(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector2_array_append _cffi_d_godot_pool_vector2_array_append
#endif

static void _cffi_d_godot_pool_vector2_array_append_array(godot_pool_vector2_array * x0, godot_pool_vector2_array const * x1)
{
  godot_pool_vector2_array_append_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector2_array_append_array(PyObject *self, PyObject *args)
{
  godot_pool_vector2_array * x0;
  godot_pool_vector2_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector2_array_append_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(258), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(487), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_vector2_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(487), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector2_array_append_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector2_array_append_array _cffi_d_godot_pool_vector2_array_append_array
#endif

static void _cffi_d_godot_pool_vector2_array_destroy(godot_pool_vector2_array * x0)
{
  godot_pool_vector2_array_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector2_array_destroy(PyObject *self, PyObject *arg0)
{
  godot_pool_vector2_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(258), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector2_array_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector2_array_destroy _cffi_d_godot_pool_vector2_array_destroy
#endif

static godot_vector2 _cffi_d_godot_pool_vector2_array_get(godot_pool_vector2_array * x0, int x1)
{
  return godot_pool_vector2_array_get(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector2_array_get(PyObject *self, PyObject *args)
{
  godot_pool_vector2_array * x0;
  int x1;
  Py_ssize_t datasize;
  godot_vector2 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector2_array_get", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(258), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_vector2_array_get(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(107));
}
#else
static void _cffi_f_godot_pool_vector2_array_get(godot_vector2 *result, godot_pool_vector2_array * x0, int x1)
{
  { *result = godot_pool_vector2_array_get(x0, x1); }
}
#endif

static int _cffi_d_godot_pool_vector2_array_insert(godot_pool_vector2_array * x0, int x1, godot_vector2 const * x2)
{
  return godot_pool_vector2_array_insert(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector2_array_insert(PyObject *self, PyObject *args)
{
  godot_pool_vector2_array * x0;
  int x1;
  godot_vector2 const * x2;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector2_array_insert", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(258), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_vector2_array_insert(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_vector2_array_insert _cffi_d_godot_pool_vector2_array_insert
#endif

static void _cffi_d_godot_pool_vector2_array_invert(godot_pool_vector2_array * x0)
{
  godot_pool_vector2_array_invert(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector2_array_invert(PyObject *self, PyObject *arg0)
{
  godot_pool_vector2_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(258), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector2_array_invert(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector2_array_invert _cffi_d_godot_pool_vector2_array_invert
#endif

static void _cffi_d_godot_pool_vector2_array_new(godot_pool_vector2_array * x0)
{
  godot_pool_vector2_array_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector2_array_new(PyObject *self, PyObject *arg0)
{
  godot_pool_vector2_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(258), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector2_array_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector2_array_new _cffi_d_godot_pool_vector2_array_new
#endif

static void _cffi_d_godot_pool_vector2_array_new_with_array(godot_pool_vector2_array * x0, godot_array const * x1)
{
  godot_pool_vector2_array_new_with_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector2_array_new_with_array(PyObject *self, PyObject *args)
{
  godot_pool_vector2_array * x0;
  godot_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector2_array_new_with_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(258), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(4), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector2_array_new_with_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector2_array_new_with_array _cffi_d_godot_pool_vector2_array_new_with_array
#endif

static void _cffi_d_godot_pool_vector2_array_push_back(godot_pool_vector2_array * x0, godot_vector2 const * x1)
{
  godot_pool_vector2_array_push_back(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector2_array_push_back(PyObject *self, PyObject *args)
{
  godot_pool_vector2_array * x0;
  godot_vector2 const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector2_array_push_back", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(258), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(64), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector2_array_push_back(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector2_array_push_back _cffi_d_godot_pool_vector2_array_push_back
#endif

static void _cffi_d_godot_pool_vector2_array_remove(godot_pool_vector2_array * x0, int x1)
{
  godot_pool_vector2_array_remove(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector2_array_remove(PyObject *self, PyObject *args)
{
  godot_pool_vector2_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector2_array_remove", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(258), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector2_array_remove(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector2_array_remove _cffi_d_godot_pool_vector2_array_remove
#endif

static void _cffi_d_godot_pool_vector2_array_resize(godot_pool_vector2_array * x0, int x1)
{
  godot_pool_vector2_array_resize(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector2_array_resize(PyObject *self, PyObject *args)
{
  godot_pool_vector2_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector2_array_resize", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(258), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector2_array_resize(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector2_array_resize _cffi_d_godot_pool_vector2_array_resize
#endif

static void _cffi_d_godot_pool_vector2_array_set(godot_pool_vector2_array * x0, int x1, godot_vector2 const * x2)
{
  godot_pool_vector2_array_set(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector2_array_set(PyObject *self, PyObject *args)
{
  godot_pool_vector2_array * x0;
  int x1;
  godot_vector2 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector2_array_set", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(258), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector2_array_set(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector2_array_set _cffi_d_godot_pool_vector2_array_set
#endif

static int _cffi_d_godot_pool_vector2_array_size(godot_pool_vector2_array * x0)
{
  return godot_pool_vector2_array_size(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector2_array_size(PyObject *self, PyObject *arg0)
{
  godot_pool_vector2_array * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(258), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_vector2_array_size(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_vector2_array_size _cffi_d_godot_pool_vector2_array_size
#endif

static void _cffi_d_godot_pool_vector3_array_append(godot_pool_vector3_array * x0, godot_vector3 const * x1)
{
  godot_pool_vector3_array_append(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector3_array_append(PyObject *self, PyObject *args)
{
  godot_pool_vector3_array * x0;
  godot_vector3 const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector3_array_append", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(270), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector3_array_append(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector3_array_append _cffi_d_godot_pool_vector3_array_append
#endif

static void _cffi_d_godot_pool_vector3_array_append_array(godot_pool_vector3_array * x0, godot_pool_vector3_array const * x1)
{
  godot_pool_vector3_array_append_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector3_array_append_array(PyObject *self, PyObject *args)
{
  godot_pool_vector3_array * x0;
  godot_pool_vector3_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector3_array_append_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(270), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(491), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_vector3_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(491), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector3_array_append_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector3_array_append_array _cffi_d_godot_pool_vector3_array_append_array
#endif

static void _cffi_d_godot_pool_vector3_array_destroy(godot_pool_vector3_array * x0)
{
  godot_pool_vector3_array_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector3_array_destroy(PyObject *self, PyObject *arg0)
{
  godot_pool_vector3_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(270), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector3_array_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector3_array_destroy _cffi_d_godot_pool_vector3_array_destroy
#endif

static godot_vector3 _cffi_d_godot_pool_vector3_array_get(godot_pool_vector3_array * x0, int x1)
{
  return godot_pool_vector3_array_get(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector3_array_get(PyObject *self, PyObject *args)
{
  godot_pool_vector3_array * x0;
  int x1;
  Py_ssize_t datasize;
  godot_vector3 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector3_array_get", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(270), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_vector3_array_get(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(111));
}
#else
static void _cffi_f_godot_pool_vector3_array_get(godot_vector3 *result, godot_pool_vector3_array * x0, int x1)
{
  { *result = godot_pool_vector3_array_get(x0, x1); }
}
#endif

static int _cffi_d_godot_pool_vector3_array_insert(godot_pool_vector3_array * x0, int x1, godot_vector3 const * x2)
{
  return godot_pool_vector3_array_insert(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector3_array_insert(PyObject *self, PyObject *args)
{
  godot_pool_vector3_array * x0;
  int x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  int result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector3_array_insert", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(270), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_vector3_array_insert(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_vector3_array_insert _cffi_d_godot_pool_vector3_array_insert
#endif

static void _cffi_d_godot_pool_vector3_array_invert(godot_pool_vector3_array * x0)
{
  godot_pool_vector3_array_invert(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector3_array_invert(PyObject *self, PyObject *arg0)
{
  godot_pool_vector3_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(270), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector3_array_invert(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector3_array_invert _cffi_d_godot_pool_vector3_array_invert
#endif

static void _cffi_d_godot_pool_vector3_array_new(godot_pool_vector3_array * x0)
{
  godot_pool_vector3_array_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector3_array_new(PyObject *self, PyObject *arg0)
{
  godot_pool_vector3_array * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(270), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector3_array_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector3_array_new _cffi_d_godot_pool_vector3_array_new
#endif

static void _cffi_d_godot_pool_vector3_array_new_with_array(godot_pool_vector3_array * x0, godot_array const * x1)
{
  godot_pool_vector3_array_new_with_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector3_array_new_with_array(PyObject *self, PyObject *args)
{
  godot_pool_vector3_array * x0;
  godot_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector3_array_new_with_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(270), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(4), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector3_array_new_with_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector3_array_new_with_array _cffi_d_godot_pool_vector3_array_new_with_array
#endif

static void _cffi_d_godot_pool_vector3_array_push_back(godot_pool_vector3_array * x0, godot_vector3 const * x1)
{
  godot_pool_vector3_array_push_back(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector3_array_push_back(PyObject *self, PyObject *args)
{
  godot_pool_vector3_array * x0;
  godot_vector3 const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector3_array_push_back", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(270), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector3_array_push_back(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector3_array_push_back _cffi_d_godot_pool_vector3_array_push_back
#endif

static void _cffi_d_godot_pool_vector3_array_remove(godot_pool_vector3_array * x0, int x1)
{
  godot_pool_vector3_array_remove(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector3_array_remove(PyObject *self, PyObject *args)
{
  godot_pool_vector3_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector3_array_remove", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(270), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector3_array_remove(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector3_array_remove _cffi_d_godot_pool_vector3_array_remove
#endif

static void _cffi_d_godot_pool_vector3_array_resize(godot_pool_vector3_array * x0, int x1)
{
  godot_pool_vector3_array_resize(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector3_array_resize(PyObject *self, PyObject *args)
{
  godot_pool_vector3_array * x0;
  int x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector3_array_resize", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(270), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector3_array_resize(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector3_array_resize _cffi_d_godot_pool_vector3_array_resize
#endif

static void _cffi_d_godot_pool_vector3_array_set(godot_pool_vector3_array * x0, int x1, godot_vector3 const * x2)
{
  godot_pool_vector3_array_set(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector3_array_set(PyObject *self, PyObject *args)
{
  godot_pool_vector3_array * x0;
  int x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_pool_vector3_array_set", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(270), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_pool_vector3_array_set(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_pool_vector3_array_set _cffi_d_godot_pool_vector3_array_set
#endif

static int _cffi_d_godot_pool_vector3_array_size(godot_pool_vector3_array * x0)
{
  return godot_pool_vector3_array_size(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_pool_vector3_array_size(PyObject *self, PyObject *arg0)
{
  godot_pool_vector3_array * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(270), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_pool_vector3_array_size(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_pool_vector3_array_size _cffi_d_godot_pool_vector3_array_size
#endif

static void _cffi_d_godot_quat_as_string(godot_quat * x0, godot_string * x1)
{
  godot_quat_as_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_quat_as_string(PyObject *self, PyObject *args)
{
  godot_quat * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_quat_as_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(176), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_quat_as_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_quat_as_string _cffi_d_godot_quat_as_string
#endif

static void _cffi_d_godot_quat_cubic_slerp(godot_quat * x0, godot_quat * x1, godot_quat const * x2, godot_quat const * x3, godot_quat const * x4, float x5)
{
  godot_quat_cubic_slerp(x0, x1, x2, x3, x4, x5);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_quat_cubic_slerp(PyObject *self, PyObject *args)
{
  godot_quat * x0;
  godot_quat * x1;
  godot_quat const * x2;
  godot_quat const * x3;
  godot_quat const * x4;
  float x5;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;

  if (!PyArg_UnpackTuple(args, "godot_quat_cubic_slerp", 6, 6, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(176), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(176), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(180), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_quat const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(180), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(180), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (godot_quat const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(180), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(180), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (godot_quat const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(180), arg4) < 0)
      return NULL;
  }

  x5 = (float)_cffi_to_c_float(arg5);
  if (x5 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_quat_cubic_slerp(x0, x1, x2, x3, x4, x5); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_quat_cubic_slerp _cffi_d_godot_quat_cubic_slerp
#endif

static float _cffi_d_godot_quat_dot(godot_quat * x0, godot_quat const * x1)
{
  return godot_quat_dot(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_quat_dot(PyObject *self, PyObject *args)
{
  godot_quat * x0;
  godot_quat const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_quat_dot", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(176), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(180), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_quat const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(180), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_quat_dot(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_quat_dot _cffi_d_godot_quat_dot
#endif

static void _cffi_d_godot_quat_inverse(godot_quat * x0, godot_quat * x1)
{
  godot_quat_inverse(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_quat_inverse(PyObject *self, PyObject *args)
{
  godot_quat * x0;
  godot_quat * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_quat_inverse", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(176), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(176), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_quat_inverse(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_quat_inverse _cffi_d_godot_quat_inverse
#endif

static float _cffi_d_godot_quat_length(godot_quat * x0)
{
  return godot_quat_length(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_quat_length(PyObject *self, PyObject *arg0)
{
  godot_quat * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(176), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_quat_length(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_quat_length _cffi_d_godot_quat_length
#endif

static float _cffi_d_godot_quat_length_squared(godot_quat * x0)
{
  return godot_quat_length_squared(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_quat_length_squared(PyObject *self, PyObject *arg0)
{
  godot_quat * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(176), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_quat_length_squared(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_quat_length_squared _cffi_d_godot_quat_length_squared
#endif

static void _cffi_d_godot_quat_new1(godot_quat * x0, float x1, float x2, float x3, float x4)
{
  godot_quat_new1(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_quat_new1(PyObject *self, PyObject *args)
{
  godot_quat * x0;
  float x1;
  float x2;
  float x3;
  float x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "godot_quat_new1", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(176), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  x4 = (float)_cffi_to_c_float(arg4);
  if (x4 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_quat_new1(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_quat_new1 _cffi_d_godot_quat_new1
#endif

static void _cffi_d_godot_quat_new2(godot_quat * x0, godot_vector3 const * x1, float x2)
{
  godot_quat_new2(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_quat_new2(PyObject *self, PyObject *args)
{
  godot_quat * x0;
  godot_vector3 const * x1;
  float x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_quat_new2", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(176), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_quat_new2(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_quat_new2 _cffi_d_godot_quat_new2
#endif

static void _cffi_d_godot_quat_normalized(godot_quat * x0, godot_quat * x1)
{
  godot_quat_normalized(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_quat_normalized(PyObject *self, PyObject *args)
{
  godot_quat * x0;
  godot_quat * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_quat_normalized", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(176), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(176), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_quat_normalized(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_quat_normalized _cffi_d_godot_quat_normalized
#endif

static void _cffi_d_godot_quat_slerp(godot_quat * x0, godot_quat * x1, godot_quat const * x2, float x3)
{
  godot_quat_slerp(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_quat_slerp(PyObject *self, PyObject *args)
{
  godot_quat * x0;
  godot_quat * x1;
  godot_quat const * x2;
  float x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_quat_slerp", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(176), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(176), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(180), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_quat const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(180), arg2) < 0)
      return NULL;
  }

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_quat_slerp(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_quat_slerp _cffi_d_godot_quat_slerp
#endif

static void _cffi_d_godot_quat_slerpni(godot_quat * x0, godot_quat * x1, godot_quat const * x2, float x3)
{
  godot_quat_slerpni(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_quat_slerpni(PyObject *self, PyObject *args)
{
  godot_quat * x0;
  godot_quat * x1;
  godot_quat const * x2;
  float x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_quat_slerpni", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(176), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(176), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(180), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_quat const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(180), arg2) < 0)
      return NULL;
  }

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_quat_slerpni(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_quat_slerpni _cffi_d_godot_quat_slerpni
#endif

static void _cffi_d_godot_quat_xform(godot_quat * x0, godot_vector3 * x1, godot_vector3 const * x2)
{
  godot_quat_xform(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_quat_xform(PyObject *self, PyObject *args)
{
  godot_quat * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_quat_xform", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(176), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_quat_xform(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_quat_xform _cffi_d_godot_quat_xform
#endif

static void * _cffi_d_godot_realloc(void * x0, int x1)
{
  return godot_realloc(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_realloc(PyObject *self, PyObject *args)
{
  void * x0;
  int x1;
  Py_ssize_t datasize;
  void * result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_realloc", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(114), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (void *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(114), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_realloc(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(114));
}
#else
#  define _cffi_f_godot_realloc _cffi_d_godot_realloc
#endif

static void _cffi_d_godot_rect2_as_string(godot_rect2 * x0, godot_string * x1)
{
  godot_rect2_as_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect2_as_string(PyObject *self, PyObject *args)
{
  godot_rect2 * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_rect2_as_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(56), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect2_as_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect2_as_string _cffi_d_godot_rect2_as_string
#endif

static void _cffi_d_godot_rect2_clip(godot_rect2 * x0, godot_rect2 * x1, godot_rect2 const * x2)
{
  godot_rect2_clip(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect2_clip(PyObject *self, PyObject *args)
{
  godot_rect2 * x0;
  godot_rect2 * x1;
  godot_rect2 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_rect2_clip", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(56), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(56), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(60), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_rect2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(60), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect2_clip(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect2_clip _cffi_d_godot_rect2_clip
#endif

static _Bool _cffi_d_godot_rect2_encloses(godot_rect2 * x0, godot_rect2 const * x1)
{
  return godot_rect2_encloses(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect2_encloses(PyObject *self, PyObject *args)
{
  godot_rect2 * x0;
  godot_rect2 const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_rect2_encloses", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(56), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(60), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(60), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect2_encloses(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_rect2_encloses _cffi_d_godot_rect2_encloses
#endif

static void _cffi_d_godot_rect2_expand(godot_rect2 * x0, godot_rect2 * x1, godot_vector2 const * x2)
{
  godot_rect2_expand(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect2_expand(PyObject *self, PyObject *args)
{
  godot_rect2 * x0;
  godot_rect2 * x1;
  godot_vector2 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_rect2_expand", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(56), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(56), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect2_expand(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect2_expand _cffi_d_godot_rect2_expand
#endif

static float _cffi_d_godot_rect2_get_area(godot_rect2 * x0)
{
  return godot_rect2_get_area(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect2_get_area(PyObject *self, PyObject *arg0)
{
  godot_rect2 * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(56), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect2_get_area(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_rect2_get_area _cffi_d_godot_rect2_get_area
#endif

static void _cffi_d_godot_rect2_grow(godot_rect2 * x0, godot_rect2 * x1, float x2)
{
  godot_rect2_grow(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect2_grow(PyObject *self, PyObject *args)
{
  godot_rect2 * x0;
  godot_rect2 * x1;
  float x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_rect2_grow", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(56), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(56), arg1) < 0)
      return NULL;
  }

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect2_grow(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect2_grow _cffi_d_godot_rect2_grow
#endif

static _Bool _cffi_d_godot_rect2_has_no_area(godot_rect2 * x0)
{
  return godot_rect2_has_no_area(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect2_has_no_area(PyObject *self, PyObject *arg0)
{
  godot_rect2 * x0;
  Py_ssize_t datasize;
  _Bool result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(56), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect2_has_no_area(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_rect2_has_no_area _cffi_d_godot_rect2_has_no_area
#endif

static _Bool _cffi_d_godot_rect2_has_point(godot_rect2 * x0, godot_vector2 const * x1)
{
  return godot_rect2_has_point(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect2_has_point(PyObject *self, PyObject *args)
{
  godot_rect2 * x0;
  godot_vector2 const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_rect2_has_point", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(56), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(64), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect2_has_point(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_rect2_has_point _cffi_d_godot_rect2_has_point
#endif

static _Bool _cffi_d_godot_rect2_intersects(godot_rect2 * x0, godot_rect2 const * x1)
{
  return godot_rect2_intersects(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect2_intersects(PyObject *self, PyObject *args)
{
  godot_rect2 * x0;
  godot_rect2 const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_rect2_intersects", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(56), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(60), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(60), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect2_intersects(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_rect2_intersects _cffi_d_godot_rect2_intersects
#endif

static void _cffi_d_godot_rect2_merge(godot_rect2 * x0, godot_rect2 * x1, godot_rect2 const * x2)
{
  godot_rect2_merge(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect2_merge(PyObject *self, PyObject *args)
{
  godot_rect2 * x0;
  godot_rect2 * x1;
  godot_rect2 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_rect2_merge", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(56), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(56), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(60), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_rect2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(60), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect2_merge(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect2_merge _cffi_d_godot_rect2_merge
#endif

static void _cffi_d_godot_rect2_new(godot_rect2 * x0, float x1, float x2, float x3, float x4)
{
  godot_rect2_new(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect2_new(PyObject *self, PyObject *args)
{
  godot_rect2 * x0;
  float x1;
  float x2;
  float x3;
  float x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "godot_rect2_new", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(56), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  x4 = (float)_cffi_to_c_float(arg4);
  if (x4 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect2_new(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect2_new _cffi_d_godot_rect2_new
#endif

static void _cffi_d_godot_rect2_new1(godot_rect2 * x0, godot_vector2 const * x1, godot_vector2 const * x2)
{
  godot_rect2_new1(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect2_new1(PyObject *self, PyObject *args)
{
  godot_rect2 * x0;
  godot_vector2 const * x1;
  godot_vector2 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_rect2_new1", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(56), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(64), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect2_new1(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect2_new1 _cffi_d_godot_rect2_new1
#endif

static void _cffi_d_godot_rect3_as_string(godot_rect3 * x0, godot_string * x1)
{
  godot_rect3_as_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_as_string(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_rect3_as_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect3_as_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect3_as_string _cffi_d_godot_rect3_as_string
#endif

static _Bool _cffi_d_godot_rect3_encloses(godot_rect3 * x0, godot_rect3 const * x1)
{
  return godot_rect3_encloses(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_encloses(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_rect3 const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_rect3_encloses", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(75), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(75), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect3_encloses(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_rect3_encloses _cffi_d_godot_rect3_encloses
#endif

static void _cffi_d_godot_rect3_expand(godot_rect3 * x0, godot_rect3 * x1, godot_vector3 const * x2)
{
  godot_rect3_expand(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_expand(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_rect3 * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_rect3_expand", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(67), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect3_expand(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect3_expand _cffi_d_godot_rect3_expand
#endif

static float _cffi_d_godot_rect3_get_area(godot_rect3 * x0)
{
  return godot_rect3_get_area(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_get_area(PyObject *self, PyObject *arg0)
{
  godot_rect3 * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect3_get_area(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_rect3_get_area _cffi_d_godot_rect3_get_area
#endif

static void _cffi_d_godot_rect3_get_endpoint(godot_rect3 * x0, godot_vector3 * x1, int x2)
{
  godot_rect3_get_endpoint(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_get_endpoint(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_vector3 * x1;
  int x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_rect3_get_endpoint", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect3_get_endpoint(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect3_get_endpoint _cffi_d_godot_rect3_get_endpoint
#endif

static void _cffi_d_godot_rect3_get_longest_axis(godot_rect3 * x0, godot_vector3 * x1)
{
  godot_rect3_get_longest_axis(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_get_longest_axis(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_vector3 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_rect3_get_longest_axis", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect3_get_longest_axis(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect3_get_longest_axis _cffi_d_godot_rect3_get_longest_axis
#endif

static int _cffi_d_godot_rect3_get_longest_axis_index(godot_rect3 * x0)
{
  return godot_rect3_get_longest_axis_index(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_get_longest_axis_index(PyObject *self, PyObject *arg0)
{
  godot_rect3 * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect3_get_longest_axis_index(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_rect3_get_longest_axis_index _cffi_d_godot_rect3_get_longest_axis_index
#endif

static float _cffi_d_godot_rect3_get_longest_axis_size(godot_rect3 * x0)
{
  return godot_rect3_get_longest_axis_size(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_get_longest_axis_size(PyObject *self, PyObject *arg0)
{
  godot_rect3 * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect3_get_longest_axis_size(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_rect3_get_longest_axis_size _cffi_d_godot_rect3_get_longest_axis_size
#endif

static void _cffi_d_godot_rect3_get_shortest_axis(godot_rect3 * x0, godot_vector3 * x1)
{
  godot_rect3_get_shortest_axis(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_get_shortest_axis(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_vector3 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_rect3_get_shortest_axis", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect3_get_shortest_axis(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect3_get_shortest_axis _cffi_d_godot_rect3_get_shortest_axis
#endif

static int _cffi_d_godot_rect3_get_shortest_axis_index(godot_rect3 * x0)
{
  return godot_rect3_get_shortest_axis_index(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_get_shortest_axis_index(PyObject *self, PyObject *arg0)
{
  godot_rect3 * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect3_get_shortest_axis_index(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_rect3_get_shortest_axis_index _cffi_d_godot_rect3_get_shortest_axis_index
#endif

static float _cffi_d_godot_rect3_get_shortest_axis_size(godot_rect3 * x0)
{
  return godot_rect3_get_shortest_axis_size(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_get_shortest_axis_size(PyObject *self, PyObject *arg0)
{
  godot_rect3 * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect3_get_shortest_axis_size(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_rect3_get_shortest_axis_size _cffi_d_godot_rect3_get_shortest_axis_size
#endif

static void _cffi_d_godot_rect3_get_support(godot_rect3 * x0, godot_vector3 * x1, godot_vector3 const * x2)
{
  godot_rect3_get_support(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_get_support(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_rect3_get_support", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect3_get_support(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect3_get_support _cffi_d_godot_rect3_get_support
#endif

static void _cffi_d_godot_rect3_grow(godot_rect3 * x0, godot_rect3 * x1, float x2)
{
  godot_rect3_grow(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_grow(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_rect3 * x1;
  float x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_rect3_grow", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(67), arg1) < 0)
      return NULL;
  }

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect3_grow(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect3_grow _cffi_d_godot_rect3_grow
#endif

static _Bool _cffi_d_godot_rect3_has_no_area(godot_rect3 * x0)
{
  return godot_rect3_has_no_area(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_has_no_area(PyObject *self, PyObject *arg0)
{
  godot_rect3 * x0;
  Py_ssize_t datasize;
  _Bool result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect3_has_no_area(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_rect3_has_no_area _cffi_d_godot_rect3_has_no_area
#endif

static _Bool _cffi_d_godot_rect3_has_no_surface(godot_rect3 * x0)
{
  return godot_rect3_has_no_surface(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_has_no_surface(PyObject *self, PyObject *arg0)
{
  godot_rect3 * x0;
  Py_ssize_t datasize;
  _Bool result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect3_has_no_surface(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_rect3_has_no_surface _cffi_d_godot_rect3_has_no_surface
#endif

static _Bool _cffi_d_godot_rect3_has_point(godot_rect3 * x0, godot_vector3 const * x1)
{
  return godot_rect3_has_point(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_has_point(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_vector3 const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_rect3_has_point", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect3_has_point(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_rect3_has_point _cffi_d_godot_rect3_has_point
#endif

static void _cffi_d_godot_rect3_intersection(godot_rect3 * x0, godot_rect3 * x1, godot_rect3 const * x2)
{
  godot_rect3_intersection(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_intersection(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_rect3 * x1;
  godot_rect3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_rect3_intersection", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(67), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(75), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_rect3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(75), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect3_intersection(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect3_intersection _cffi_d_godot_rect3_intersection
#endif

static _Bool _cffi_d_godot_rect3_intersects(godot_rect3 * x0, godot_rect3 const * x1)
{
  return godot_rect3_intersects(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_intersects(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_rect3 const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_rect3_intersects", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(75), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(75), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect3_intersects(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_rect3_intersects _cffi_d_godot_rect3_intersects
#endif

static _Bool _cffi_d_godot_rect3_intersects_plane(godot_rect3 * x0, godot_plane const * x1)
{
  return godot_rect3_intersects_plane(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_intersects_plane(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_plane const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_rect3_intersects_plane", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(44), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_plane const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(44), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect3_intersects_plane(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_rect3_intersects_plane _cffi_d_godot_rect3_intersects_plane
#endif

static _Bool _cffi_d_godot_rect3_intersects_segment(godot_rect3 * x0, godot_vector3 const * x1, godot_vector3 const * x2)
{
  return godot_rect3_intersects_segment(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_intersects_segment(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_vector3 const * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_rect3_intersects_segment", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rect3_intersects_segment(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_rect3_intersects_segment _cffi_d_godot_rect3_intersects_segment
#endif

static void _cffi_d_godot_rect3_merge(godot_rect3 * x0, godot_rect3 * x1, godot_rect3 const * x2)
{
  godot_rect3_merge(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_merge(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_rect3 * x1;
  godot_rect3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_rect3_merge", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(67), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(75), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_rect3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(75), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect3_merge(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect3_merge _cffi_d_godot_rect3_merge
#endif

static void _cffi_d_godot_rect3_new(godot_rect3 * x0, godot_vector3 const * x1, godot_vector3 const * x2)
{
  godot_rect3_new(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rect3_new(PyObject *self, PyObject *args)
{
  godot_rect3 * x0;
  godot_vector3 const * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_rect3_new", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(67), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rect3_new(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rect3_new _cffi_d_godot_rect3_new
#endif

static int _cffi_d_godot_rid_get_id(godot_rid * x0)
{
  return godot_rid_get_id(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rid_get_id(PyObject *self, PyObject *arg0)
{
  godot_rid * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(383), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rid *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(383), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_rid_get_id(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_rid_get_id _cffi_d_godot_rid_get_id
#endif

static void _cffi_d_godot_rid_new(godot_rid * x0)
{
  godot_rid_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_rid_new(PyObject *self, PyObject *arg0)
{
  godot_rid * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(383), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_rid *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(383), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_rid_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_rid_new _cffi_d_godot_rid_new
#endif

static void _cffi_d_godot_script_register_class(char const * x0, char const * x1, godot_instance_create_func x2, godot_instance_destroy_func x3)
{
  godot_script_register_class(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_script_register_class(PyObject *self, PyObject *args)
{
  char const * x0;
  char const * x1;
  godot_instance_create_func x2;
  godot_instance_destroy_func x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_script_register_class", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(219), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (char const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(219), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(219), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (char const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(219), arg1) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x2, _cffi_type(442), arg2) < 0)
    return NULL;

  if (_cffi_to_c((char *)&x3, _cffi_type(443), arg3) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_script_register_class(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
static void _cffi_f_godot_script_register_class(char const * x0, char const * x1, godot_instance_create_func *x2, godot_instance_destroy_func *x3)
{
  { godot_script_register_class(x0, x1, *x2, *x3); }
}
#endif

static void _cffi_d_godot_script_register_method(char const * x0, char const * x1, godot_method_attributes x2, godot_instance_method x3)
{
  godot_script_register_method(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_script_register_method(PyObject *self, PyObject *args)
{
  char const * x0;
  char const * x1;
  godot_method_attributes x2;
  godot_instance_method x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_script_register_method", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(219), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (char const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(219), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(219), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (char const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(219), arg1) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x2, _cffi_type(448), arg2) < 0)
    return NULL;

  if (_cffi_to_c((char *)&x3, _cffi_type(449), arg3) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_script_register_method(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
static void _cffi_f_godot_script_register_method(char const * x0, char const * x1, godot_method_attributes *x2, godot_instance_method *x3)
{
  { godot_script_register_method(x0, x1, *x2, *x3); }
}
#endif

static void _cffi_d_godot_script_register_property(char const * x0, char const * x1, godot_property_attributes * x2, godot_property_set_func x3, godot_property_get_func x4)
{
  godot_script_register_property(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_script_register_property(PyObject *self, PyObject *args)
{
  char const * x0;
  char const * x1;
  godot_property_attributes * x2;
  godot_property_set_func x3;
  godot_property_get_func x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "godot_script_register_property", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(219), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (char const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(219), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(219), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (char const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(219), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(454), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_property_attributes *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(454), arg2) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x3, _cffi_type(455), arg3) < 0)
    return NULL;

  if (_cffi_to_c((char *)&x4, _cffi_type(456), arg4) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_script_register_property(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
static void _cffi_f_godot_script_register_property(char const * x0, char const * x1, godot_property_attributes * x2, godot_property_set_func *x3, godot_property_get_func *x4)
{
  { godot_script_register_property(x0, x1, x2, *x3, *x4); }
}
#endif

static void _cffi_d_godot_script_register_signal(char const * x0, godot_signal const * x1)
{
  godot_script_register_signal(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_script_register_signal(PyObject *self, PyObject *args)
{
  char const * x0;
  godot_signal const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_script_register_signal", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(219), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (char const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(219), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(460), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_signal const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(460), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_script_register_signal(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_script_register_signal _cffi_d_godot_script_register_signal
#endif

static void _cffi_d_godot_script_register_tool_class(char const * x0, char const * x1, godot_instance_create_func x2, godot_instance_destroy_func x3)
{
  godot_script_register_tool_class(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_script_register_tool_class(PyObject *self, PyObject *args)
{
  char const * x0;
  char const * x1;
  godot_instance_create_func x2;
  godot_instance_destroy_func x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_script_register_tool_class", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(219), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (char const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(219), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(219), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (char const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(219), arg1) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x2, _cffi_type(442), arg2) < 0)
    return NULL;

  if (_cffi_to_c((char *)&x3, _cffi_type(443), arg3) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_script_register_tool_class(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
static void _cffi_f_godot_script_register_tool_class(char const * x0, char const * x1, godot_instance_create_func *x2, godot_instance_destroy_func *x3)
{
  { godot_script_register_tool_class(x0, x1, *x2, *x3); }
}
#endif

static char const * _cffi_d_godot_string_c_str(godot_string const * x0)
{
  return godot_string_c_str(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_string_c_str(PyObject *self, PyObject *arg0)
{
  godot_string const * x0;
  Py_ssize_t datasize;
  char const * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(29), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_string_c_str(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(219));
}
#else
#  define _cffi_f_godot_string_c_str _cffi_d_godot_string_c_str
#endif

static void _cffi_d_godot_string_copy_string(godot_string const * x0, godot_string const * x1)
{
  godot_string_copy_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_string_copy_string(PyObject *self, PyObject *args)
{
  godot_string const * x0;
  godot_string const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_string_copy_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(29), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_string_copy_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_string_copy_string _cffi_d_godot_string_copy_string
#endif

static void _cffi_d_godot_string_destroy(godot_string * x0)
{
  godot_string_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_string_destroy(PyObject *self, PyObject *arg0)
{
  godot_string * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(535), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_string_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_string_destroy _cffi_d_godot_string_destroy
#endif

static void _cffi_d_godot_string_get_data(godot_string const * x0, char * x1, int * x2)
{
  godot_string_get_data(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_string_get_data(PyObject *self, PyObject *args)
{
  godot_string const * x0;
  char * x1;
  int * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_string_get_data", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(29), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(409), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (char *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(409), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(133), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (int *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(133), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_string_get_data(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_string_get_data _cffi_d_godot_string_get_data
#endif

static void _cffi_d_godot_string_new(godot_string * x0)
{
  godot_string_new(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_string_new(PyObject *self, PyObject *arg0)
{
  godot_string * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(535), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_string_new(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_string_new _cffi_d_godot_string_new
#endif

static void _cffi_d_godot_string_new_data(godot_string * x0, char const * x1, int x2)
{
  godot_string_new_data(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_string_new_data(PyObject *self, PyObject *args)
{
  godot_string * x0;
  char const * x1;
  int x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_string_new_data", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(535), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(219), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (char const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(219), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_string_new_data(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_string_new_data _cffi_d_godot_string_new_data
#endif

static void _cffi_d_godot_string_new_unicode_data(godot_string * x0, wchar_t const * x1, int x2)
{
  godot_string_new_unicode_data(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_string_new_unicode_data(PyObject *self, PyObject *args)
{
  godot_string * x0;
  wchar_t const * x1;
  int x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_string_new_unicode_data", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(535), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(118), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (wchar_t const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(118), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_string_new_unicode_data(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_string_new_unicode_data _cffi_d_godot_string_new_unicode_data
#endif

static _Bool _cffi_d_godot_string_operator_equal(godot_string const * x0, godot_string const * x1)
{
  return godot_string_operator_equal(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_string_operator_equal(PyObject *self, PyObject *args)
{
  godot_string const * x0;
  godot_string const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_string_operator_equal", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(29), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_string_operator_equal(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_string_operator_equal _cffi_d_godot_string_operator_equal
#endif

static wchar_t * _cffi_d_godot_string_operator_index(godot_string * x0, int x1)
{
  return godot_string_operator_index(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_string_operator_index(PyObject *self, PyObject *args)
{
  godot_string * x0;
  int x1;
  Py_ssize_t datasize;
  wchar_t * result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_string_operator_index", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(535), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_string_operator_index(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(1553));
}
#else
#  define _cffi_f_godot_string_operator_index _cffi_d_godot_string_operator_index
#endif

static _Bool _cffi_d_godot_string_operator_less(godot_string const * x0, godot_string const * x1)
{
  return godot_string_operator_less(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_string_operator_less(PyObject *self, PyObject *args)
{
  godot_string const * x0;
  godot_string const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_string_operator_less", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(29), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_string_operator_less(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_string_operator_less _cffi_d_godot_string_operator_less
#endif

static void _cffi_d_godot_string_operator_plus(godot_string * x0, godot_string const * x1, godot_string const * x2)
{
  godot_string_operator_plus(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_string_operator_plus(PyObject *self, PyObject *args)
{
  godot_string * x0;
  godot_string const * x1;
  godot_string const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_string_operator_plus", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(535), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(29), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_string_operator_plus(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_string_operator_plus _cffi_d_godot_string_operator_plus
#endif

static wchar_t const * _cffi_d_godot_string_unicode_str(godot_string const * x0)
{
  return godot_string_unicode_str(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_string_unicode_str(PyObject *self, PyObject *arg0)
{
  godot_string const * x0;
  Py_ssize_t datasize;
  wchar_t const * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(29), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_string_unicode_str(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(118));
}
#else
#  define _cffi_f_godot_string_unicode_str _cffi_d_godot_string_unicode_str
#endif

static void _cffi_d_godot_transform2d_affine_inverse(godot_transform2d * x0, godot_transform2d * x1)
{
  godot_transform2d_affine_inverse(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform2d_affine_inverse(PyObject *self, PyObject *args)
{
  godot_transform2d * x0;
  godot_transform2d * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_transform2d_affine_inverse", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(189), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(189), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform2d_affine_inverse(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform2d_affine_inverse _cffi_d_godot_transform2d_affine_inverse
#endif

static void _cffi_d_godot_transform2d_as_string(godot_transform2d * x0, godot_string * x1)
{
  godot_transform2d_as_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform2d_as_string(PyObject *self, PyObject *args)
{
  godot_transform2d * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_transform2d_as_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(189), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform2d_as_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform2d_as_string _cffi_d_godot_transform2d_as_string
#endif

static void _cffi_d_godot_transform2d_get_origin(godot_transform2d * x0, godot_vector2 * x1)
{
  godot_transform2d_get_origin(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform2d_get_origin(PyObject *self, PyObject *args)
{
  godot_transform2d * x0;
  godot_vector2 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_transform2d_get_origin", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(189), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform2d_get_origin(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform2d_get_origin _cffi_d_godot_transform2d_get_origin
#endif

static float _cffi_d_godot_transform2d_get_rotation(godot_transform2d * x0)
{
  return godot_transform2d_get_rotation(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform2d_get_rotation(PyObject *self, PyObject *arg0)
{
  godot_transform2d * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(189), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_transform2d_get_rotation(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_transform2d_get_rotation _cffi_d_godot_transform2d_get_rotation
#endif

static void _cffi_d_godot_transform2d_get_scale(godot_transform2d * x0, godot_vector2 * x1)
{
  godot_transform2d_get_scale(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform2d_get_scale(PyObject *self, PyObject *args)
{
  godot_transform2d * x0;
  godot_vector2 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_transform2d_get_scale", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(189), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform2d_get_scale(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform2d_get_scale _cffi_d_godot_transform2d_get_scale
#endif

static void _cffi_d_godot_transform2d_interpolate_with(godot_transform2d * x0, godot_transform2d * x1, godot_transform2d const * x2, float x3)
{
  godot_transform2d_interpolate_with(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform2d_interpolate_with(PyObject *self, PyObject *args)
{
  godot_transform2d * x0;
  godot_transform2d * x1;
  godot_transform2d const * x2;
  float x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_transform2d_interpolate_with", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(189), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(189), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1095), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_transform2d const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1095), arg2) < 0)
      return NULL;
  }

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform2d_interpolate_with(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform2d_interpolate_with _cffi_d_godot_transform2d_interpolate_with
#endif

static void _cffi_d_godot_transform2d_inverse(godot_transform2d * x0, godot_transform2d * x1)
{
  godot_transform2d_inverse(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform2d_inverse(PyObject *self, PyObject *args)
{
  godot_transform2d * x0;
  godot_transform2d * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_transform2d_inverse", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(189), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(189), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform2d_inverse(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform2d_inverse _cffi_d_godot_transform2d_inverse
#endif

static void _cffi_d_godot_transform2d_new2(godot_transform2d * x0, float x1, godot_vector2 const * x2)
{
  godot_transform2d_new2(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform2d_new2(PyObject *self, PyObject *args)
{
  godot_transform2d * x0;
  float x1;
  godot_vector2 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_transform2d_new2", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(189), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform2d_new2(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform2d_new2 _cffi_d_godot_transform2d_new2
#endif

static void _cffi_d_godot_transform2d_new3(godot_transform2d * x0, godot_vector2 const * x1, godot_vector2 const * x2, godot_vector2 const * x3)
{
  godot_transform2d_new3(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform2d_new3(PyObject *self, PyObject *args)
{
  godot_transform2d * x0;
  godot_vector2 const * x1;
  godot_vector2 const * x2;
  godot_vector2 const * x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_transform2d_new3", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(189), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(64), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(64), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform2d_new3(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform2d_new3 _cffi_d_godot_transform2d_new3
#endif

static void _cffi_d_godot_transform2d_orthonormalized(godot_transform2d * x0, godot_transform2d * x1)
{
  godot_transform2d_orthonormalized(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform2d_orthonormalized(PyObject *self, PyObject *args)
{
  godot_transform2d * x0;
  godot_transform2d * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_transform2d_orthonormalized", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(189), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(189), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform2d_orthonormalized(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform2d_orthonormalized _cffi_d_godot_transform2d_orthonormalized
#endif

static void _cffi_d_godot_transform2d_rotated(godot_transform2d * x0, godot_transform2d * x1, float x2)
{
  godot_transform2d_rotated(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform2d_rotated(PyObject *self, PyObject *args)
{
  godot_transform2d * x0;
  godot_transform2d * x1;
  float x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_transform2d_rotated", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(189), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(189), arg1) < 0)
      return NULL;
  }

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform2d_rotated(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform2d_rotated _cffi_d_godot_transform2d_rotated
#endif

static void _cffi_d_godot_transform2d_scaled(godot_transform2d * x0, godot_transform2d * x1, godot_vector2 const * x2)
{
  godot_transform2d_scaled(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform2d_scaled(PyObject *self, PyObject *args)
{
  godot_transform2d * x0;
  godot_transform2d * x1;
  godot_vector2 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_transform2d_scaled", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(189), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(189), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform2d_scaled(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform2d_scaled _cffi_d_godot_transform2d_scaled
#endif

static void _cffi_d_godot_transform2d_translated(godot_transform2d * x0, godot_transform2d * x1, godot_vector2 const * x2)
{
  godot_transform2d_translated(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform2d_translated(PyObject *self, PyObject *args)
{
  godot_transform2d * x0;
  godot_transform2d * x1;
  godot_vector2 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_transform2d_translated", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(189), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(189), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform2d_translated(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform2d_translated _cffi_d_godot_transform2d_translated
#endif

static void _cffi_d_godot_transform_affine_inverse(godot_transform * x0, godot_transform * x1)
{
  godot_transform_affine_inverse(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform_affine_inverse(PyObject *self, PyObject *args)
{
  godot_transform * x0;
  godot_transform * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_transform_affine_inverse", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1038), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1038), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform_affine_inverse(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform_affine_inverse _cffi_d_godot_transform_affine_inverse
#endif

static void _cffi_d_godot_transform_as_string(godot_transform * x0, godot_string * x1)
{
  godot_transform_as_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform_as_string(PyObject *self, PyObject *args)
{
  godot_transform * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_transform_as_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1038), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform_as_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform_as_string _cffi_d_godot_transform_as_string
#endif

static void _cffi_d_godot_transform_inverse(godot_transform * x0, godot_transform * x1)
{
  godot_transform_inverse(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform_inverse(PyObject *self, PyObject *args)
{
  godot_transform * x0;
  godot_transform * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_transform_inverse", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1038), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1038), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform_inverse(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform_inverse _cffi_d_godot_transform_inverse
#endif

static void _cffi_d_godot_transform_looking_at(godot_transform * x0, godot_transform * x1, godot_vector3 const * x2, godot_vector3 const * x3)
{
  godot_transform_looking_at(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform_looking_at(PyObject *self, PyObject *args)
{
  godot_transform * x0;
  godot_transform * x1;
  godot_vector3 const * x2;
  godot_vector3 const * x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_transform_looking_at", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1038), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1038), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(36), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform_looking_at(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform_looking_at _cffi_d_godot_transform_looking_at
#endif

static void _cffi_d_godot_transform_new1(godot_transform * x0, godot_vector3 const * x1, godot_vector3 const * x2, godot_vector3 const * x3, godot_vector3 const * x4)
{
  godot_transform_new1(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform_new1(PyObject *self, PyObject *args)
{
  godot_transform * x0;
  godot_vector3 const * x1;
  godot_vector3 const * x2;
  godot_vector3 const * x3;
  godot_vector3 const * x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "godot_transform_new1", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1038), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(36), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(36), arg4) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform_new1(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform_new1 _cffi_d_godot_transform_new1
#endif

static void _cffi_d_godot_transform_new2(godot_transform * x0, godot_basis const * x1, godot_vector3 const * x2)
{
  godot_transform_new2(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform_new2(PyObject *self, PyObject *args)
{
  godot_transform * x0;
  godot_basis const * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_transform_new2", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1038), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1039), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_basis const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1039), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform_new2(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform_new2 _cffi_d_godot_transform_new2
#endif

static void _cffi_d_godot_transform_orthonormalized(godot_transform * x0, godot_transform * x1)
{
  godot_transform_orthonormalized(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform_orthonormalized(PyObject *self, PyObject *args)
{
  godot_transform * x0;
  godot_transform * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_transform_orthonormalized", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1038), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1038), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform_orthonormalized(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform_orthonormalized _cffi_d_godot_transform_orthonormalized
#endif

static void _cffi_d_godot_transform_rotated(godot_transform * x0, godot_transform * x1, godot_vector3 const * x2, float x3)
{
  godot_transform_rotated(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform_rotated(PyObject *self, PyObject *args)
{
  godot_transform * x0;
  godot_transform * x1;
  godot_vector3 const * x2;
  float x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_transform_rotated", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1038), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1038), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform_rotated(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform_rotated _cffi_d_godot_transform_rotated
#endif

static void _cffi_d_godot_transform_scaled(godot_transform * x0, godot_transform * x1, godot_vector3 const * x2)
{
  godot_transform_scaled(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform_scaled(PyObject *self, PyObject *args)
{
  godot_transform * x0;
  godot_transform * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_transform_scaled", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1038), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1038), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform_scaled(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform_scaled _cffi_d_godot_transform_scaled
#endif

static void _cffi_d_godot_transform_translated(godot_transform * x0, godot_transform * x1, godot_vector3 const * x2)
{
  godot_transform_translated(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_transform_translated(PyObject *self, PyObject *args)
{
  godot_transform * x0;
  godot_transform * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_transform_translated", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1038), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1038), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_transform_translated(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_transform_translated _cffi_d_godot_transform_translated
#endif

static void _cffi_d_godot_variant_as_array(godot_variant const * x0, godot_array * x1)
{
  godot_variant_as_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_array(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_array * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(233), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_array *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(233), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_array _cffi_d_godot_variant_as_array
#endif

static void _cffi_d_godot_variant_as_basis(godot_variant const * x0, godot_basis * x1)
{
  godot_variant_as_basis(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_basis(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_basis * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_basis", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(158), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_basis(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_basis _cffi_d_godot_variant_as_basis
#endif

static _Bool _cffi_d_godot_variant_as_bool(godot_variant const * x0)
{
  return godot_variant_as_bool(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_bool(PyObject *self, PyObject *arg0)
{
  godot_variant const * x0;
  Py_ssize_t datasize;
  _Bool result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_variant_as_bool(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_variant_as_bool _cffi_d_godot_variant_as_bool
#endif

static void _cffi_d_godot_variant_as_color(godot_variant const * x0, godot_color * x1)
{
  godot_variant_as_color(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_color(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_color * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_color", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(165), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_color *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(165), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_color(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_color _cffi_d_godot_variant_as_color
#endif

static void _cffi_d_godot_variant_as_dictionary(godot_variant const * x0, godot_dictionary * x1)
{
  godot_variant_as_dictionary(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_dictionary(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_dictionary * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_dictionary", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(11), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_dictionary *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(11), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_dictionary(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_dictionary _cffi_d_godot_variant_as_dictionary
#endif

static void _cffi_d_godot_variant_as_image(godot_variant const * x0, godot_image * x1)
{
  godot_variant_as_image(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_image(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_image * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_image", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(22), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_image *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(22), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_image(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_image _cffi_d_godot_variant_as_image
#endif

static void _cffi_d_godot_variant_as_input_event(godot_variant const * x0, godot_input_event * x1)
{
  godot_variant_as_input_event(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_input_event(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_input_event * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_input_event", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_input_event *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_input_event(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_input_event _cffi_d_godot_variant_as_input_event
#endif

static int64_t _cffi_d_godot_variant_as_int(godot_variant const * x0)
{
  return godot_variant_as_int(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_int(PyObject *self, PyObject *arg0)
{
  godot_variant const * x0;
  Py_ssize_t datasize;
  int64_t result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_variant_as_int(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int64_t);
}
#else
#  define _cffi_f_godot_variant_as_int _cffi_d_godot_variant_as_int
#endif

static void _cffi_d_godot_variant_as_node_path(godot_variant const * x0, godot_node_path * x1)
{
  godot_variant_as_node_path(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_node_path(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_node_path * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_node_path", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(32), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_node_path *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(32), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_node_path(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_node_path _cffi_d_godot_variant_as_node_path
#endif

static void * _cffi_d_godot_variant_as_object(godot_variant const * x0)
{
  return godot_variant_as_object(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_object(PyObject *self, PyObject *arg0)
{
  godot_variant const * x0;
  Py_ssize_t datasize;
  void * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_variant_as_object(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(114));
}
#else
#  define _cffi_f_godot_variant_as_object _cffi_d_godot_variant_as_object
#endif

static void _cffi_d_godot_variant_as_plane(godot_variant const * x0, godot_plane * x1)
{
  godot_variant_as_plane(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_plane(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_plane * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_plane", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(35), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_plane *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(35), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_plane(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_plane _cffi_d_godot_variant_as_plane
#endif

static void _cffi_d_godot_variant_as_pool_byte_array(godot_variant const * x0, godot_pool_byte_array * x1)
{
  godot_variant_as_pool_byte_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_pool_byte_array(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_pool_byte_array * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_pool_byte_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(320), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_byte_array *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(320), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_pool_byte_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_pool_byte_array _cffi_d_godot_variant_as_pool_byte_array
#endif

static void _cffi_d_godot_variant_as_pool_color_array(godot_variant const * x0, godot_pool_color_array * x1)
{
  godot_variant_as_pool_color_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_pool_color_array(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_pool_color_array * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_pool_color_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(213), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_color_array *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(213), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_pool_color_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_pool_color_array _cffi_d_godot_variant_as_pool_color_array
#endif

static void _cffi_d_godot_variant_as_pool_int_array(godot_variant const * x0, godot_pool_int_array * x1)
{
  godot_variant_as_pool_int_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_pool_int_array(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_pool_int_array * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_pool_int_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(336), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_int_array *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(336), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_pool_int_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_pool_int_array _cffi_d_godot_variant_as_pool_int_array
#endif

static void _cffi_d_godot_variant_as_pool_real_array(godot_variant const * x0, godot_pool_real_array * x1)
{
  godot_variant_as_pool_real_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_pool_real_array(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_pool_real_array * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_pool_real_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(172), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_real_array *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(172), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_pool_real_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_pool_real_array _cffi_d_godot_variant_as_pool_real_array
#endif

static void _cffi_d_godot_variant_as_pool_string_array(godot_variant const * x0, godot_pool_string_array * x1)
{
  godot_variant_as_pool_string_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_pool_string_array(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_pool_string_array * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_pool_string_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(229), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_string_array *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(229), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_pool_string_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_pool_string_array _cffi_d_godot_variant_as_pool_string_array
#endif

static void _cffi_d_godot_variant_as_pool_vector2_array(godot_variant const * x0, godot_pool_vector2_array * x1)
{
  godot_variant_as_pool_vector2_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_pool_vector2_array(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_pool_vector2_array * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_pool_vector2_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(258), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_vector2_array *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(258), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_pool_vector2_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_pool_vector2_array _cffi_d_godot_variant_as_pool_vector2_array
#endif

static void _cffi_d_godot_variant_as_pool_vector3_array(godot_variant const * x0, godot_pool_vector3_array * x1)
{
  godot_variant_as_pool_vector3_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_pool_vector3_array(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_pool_vector3_array * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_pool_vector3_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(270), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_vector3_array *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(270), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_pool_vector3_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_pool_vector3_array _cffi_d_godot_variant_as_pool_vector3_array
#endif

static void _cffi_d_godot_variant_as_quat(godot_variant const * x0, godot_quat * x1)
{
  godot_variant_as_quat(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_quat(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_quat * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_quat", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(176), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_quat *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(176), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_quat(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_quat _cffi_d_godot_variant_as_quat
#endif

static double _cffi_d_godot_variant_as_real(godot_variant const * x0)
{
  return godot_variant_as_real(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_real(PyObject *self, PyObject *arg0)
{
  godot_variant const * x0;
  Py_ssize_t datasize;
  double result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_variant_as_real(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_double(result);
}
#else
#  define _cffi_f_godot_variant_as_real _cffi_d_godot_variant_as_real
#endif

static void _cffi_d_godot_variant_as_rect2(godot_variant const * x0, godot_rect2 * x1)
{
  godot_variant_as_rect2(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_rect2(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_rect2 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_rect2", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(56), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_rect2(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_rect2 _cffi_d_godot_variant_as_rect2
#endif

static void _cffi_d_godot_variant_as_rect3(godot_variant const * x0, godot_rect3 * x1)
{
  godot_variant_as_rect3(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_rect3(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_rect3 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_rect3", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(67), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(67), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_rect3(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_rect3 _cffi_d_godot_variant_as_rect3
#endif

static void _cffi_d_godot_variant_as_rid(godot_variant const * x0, godot_rid * x1)
{
  godot_variant_as_rid(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_rid(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_rid * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_rid", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(383), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rid *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(383), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_rid(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_rid _cffi_d_godot_variant_as_rid
#endif

static void _cffi_d_godot_variant_as_string(godot_variant const * x0, godot_string * x1)
{
  godot_variant_as_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_string(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_string _cffi_d_godot_variant_as_string
#endif

static void _cffi_d_godot_variant_as_transform(godot_variant const * x0, godot_transform * x1)
{
  godot_variant_as_transform(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_transform(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_transform * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_transform", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1038), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1038), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_transform(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_transform _cffi_d_godot_variant_as_transform
#endif

static void _cffi_d_godot_variant_as_transform2d(godot_variant const * x0, godot_transform2d * x1)
{
  godot_variant_as_transform2d(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_transform2d(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_transform2d * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_transform2d", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(189), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform2d *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(189), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_transform2d(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_transform2d _cffi_d_godot_variant_as_transform2d
#endif

static uint64_t _cffi_d_godot_variant_as_uint(godot_variant const * x0)
{
  return godot_variant_as_uint(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_uint(PyObject *self, PyObject *arg0)
{
  godot_variant const * x0;
  Py_ssize_t datasize;
  uint64_t result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_variant_as_uint(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, uint64_t);
}
#else
#  define _cffi_f_godot_variant_as_uint _cffi_d_godot_variant_as_uint
#endif

static void _cffi_d_godot_variant_as_vector2(godot_variant const * x0, godot_vector2 * x1)
{
  godot_variant_as_vector2(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_vector2(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_vector2 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_vector2", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_vector2(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_vector2 _cffi_d_godot_variant_as_vector2
#endif

static void _cffi_d_godot_variant_as_vector3(godot_variant const * x0, godot_vector3 * x1)
{
  godot_variant_as_vector3(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_as_vector3(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_vector3 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_as_vector3", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_as_vector3(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_as_vector3 _cffi_d_godot_variant_as_vector3
#endif

static _Bool _cffi_d_godot_variant_booleanize(godot_variant const * x0, _Bool * x1)
{
  return godot_variant_booleanize(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_booleanize(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  _Bool * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_booleanize", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(95), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (_Bool *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(95), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_variant_booleanize(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_variant_booleanize _cffi_d_godot_variant_booleanize
#endif

static void _cffi_d_godot_variant_call(godot_variant * x0, godot_variant * x1, godot_string const * x2, godot_variant const * * x3, int x4)
{
  godot_variant_call(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_call(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_variant * x1;
  godot_string const * x2;
  godot_variant const * * x3;
  int x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "godot_variant_call", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(123), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(29), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1216), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (godot_variant const * *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(1216), arg3) < 0)
      return NULL;
  }

  x4 = _cffi_to_c_int(arg4, int);
  if (x4 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_call(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_call _cffi_d_godot_variant_call
#endif

static void _cffi_d_godot_variant_copy(godot_variant * x0, godot_variant const * x1)
{
  godot_variant_copy(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_copy(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_variant const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_copy", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_copy(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_copy _cffi_d_godot_variant_copy
#endif

static void _cffi_d_godot_variant_destroy(godot_variant * x0)
{
  godot_variant_destroy(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_destroy(PyObject *self, PyObject *arg0)
{
  godot_variant * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_destroy(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_destroy _cffi_d_godot_variant_destroy
#endif

static godot_variant_type _cffi_d_godot_variant_get_type(godot_variant const * x0)
{
  return godot_variant_get_type(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_get_type(PyObject *self, PyObject *arg0)
{
  godot_variant const * x0;
  Py_ssize_t datasize;
  godot_variant_type result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_variant_get_type(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_deref((char *)&result, _cffi_type(1520));
}
#else
#  define _cffi_f_godot_variant_get_type _cffi_d_godot_variant_get_type
#endif

static _Bool _cffi_d_godot_variant_has_method(godot_variant const * x0, godot_string const * x1)
{
  return godot_variant_has_method(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_has_method(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_string const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_has_method", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_variant_has_method(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_variant_has_method _cffi_d_godot_variant_has_method
#endif

static _Bool _cffi_d_godot_variant_hash_compare(godot_variant const * x0, godot_variant const * x1)
{
  return godot_variant_hash_compare(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_hash_compare(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_variant const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_hash_compare", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_variant_hash_compare(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_variant_hash_compare _cffi_d_godot_variant_hash_compare
#endif

static void _cffi_d_godot_variant_new_array(godot_variant * x0, godot_array const * x1)
{
  godot_variant_new_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_array(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(4), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(4), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_array _cffi_d_godot_variant_new_array
#endif

static void _cffi_d_godot_variant_new_basis(godot_variant * x0, godot_basis const * x1)
{
  godot_variant_new_basis(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_basis(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_basis const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_basis", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1039), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_basis const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1039), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_basis(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_basis _cffi_d_godot_variant_new_basis
#endif

static void _cffi_d_godot_variant_new_bool(godot_variant * x0, _Bool x1)
{
  godot_variant_new_bool(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_bool(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  _Bool x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_bool", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  x1 = (_Bool)_cffi_to_c__Bool(arg1);
  if (x1 == (_Bool)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_bool(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_bool _cffi_d_godot_variant_new_bool
#endif

static void _cffi_d_godot_variant_new_color(godot_variant * x0, godot_color const * x1)
{
  godot_variant_new_color(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_color(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_color const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_color", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(333), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_color const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(333), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_color(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_color _cffi_d_godot_variant_new_color
#endif

static void _cffi_d_godot_variant_new_dictionary(godot_variant * x0, godot_dictionary const * x1)
{
  godot_variant_new_dictionary(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_dictionary(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_dictionary const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_dictionary", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(626), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_dictionary const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(626), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_dictionary(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_dictionary _cffi_d_godot_variant_new_dictionary
#endif

static void _cffi_d_godot_variant_new_image(godot_variant * x0, godot_image const * x1)
{
  godot_variant_new_image(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_image(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_image const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_image", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(655), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_image const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(655), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_image(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_image _cffi_d_godot_variant_new_image
#endif

static void _cffi_d_godot_variant_new_input_event(godot_variant * x0, godot_input_event const * x1)
{
  godot_variant_new_input_event(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_input_event(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_input_event const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_input_event", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(25), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_input_event const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(25), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_input_event(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_input_event _cffi_d_godot_variant_new_input_event
#endif

static void _cffi_d_godot_variant_new_int(godot_variant * x0, int64_t x1)
{
  godot_variant_new_int(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_int(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  int64_t x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_int", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int64_t);
  if (x1 == (int64_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_int(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_int _cffi_d_godot_variant_new_int
#endif

static void _cffi_d_godot_variant_new_nil(godot_variant * x0)
{
  godot_variant_new_nil(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_nil(PyObject *self, PyObject *arg0)
{
  godot_variant * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_nil(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_nil _cffi_d_godot_variant_new_nil
#endif

static void _cffi_d_godot_variant_new_node_path(godot_variant * x0, godot_node_path const * x1)
{
  godot_variant_new_node_path(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_node_path(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_node_path const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_node_path", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1150), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_node_path const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1150), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_node_path(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_node_path _cffi_d_godot_variant_new_node_path
#endif

static void _cffi_d_godot_variant_new_object(godot_variant * x0, void const * x1)
{
  godot_variant_new_object(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_object(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  void const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_object", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1241), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (void const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1241), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_object(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_object _cffi_d_godot_variant_new_object
#endif

static void _cffi_d_godot_variant_new_plane(godot_variant * x0, godot_plane const * x1)
{
  godot_variant_new_plane(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_plane(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_plane const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_plane", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(44), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_plane const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(44), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_plane(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_plane _cffi_d_godot_variant_new_plane
#endif

static void _cffi_d_godot_variant_new_pool_byte_array(godot_variant * x0, godot_pool_byte_array const * x1)
{
  godot_variant_new_pool_byte_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_pool_byte_array(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_pool_byte_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_pool_byte_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(467), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_byte_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(467), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_pool_byte_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_pool_byte_array _cffi_d_godot_variant_new_pool_byte_array
#endif

static void _cffi_d_godot_variant_new_pool_color_array(godot_variant * x0, godot_pool_color_array const * x1)
{
  godot_variant_new_pool_color_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_pool_color_array(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_pool_color_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_pool_color_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(471), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_color_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(471), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_pool_color_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_pool_color_array _cffi_d_godot_variant_new_pool_color_array
#endif

static void _cffi_d_godot_variant_new_pool_int_array(godot_variant * x0, godot_pool_int_array const * x1)
{
  godot_variant_new_pool_int_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_pool_int_array(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_pool_int_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_pool_int_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(475), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_int_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(475), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_pool_int_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_pool_int_array _cffi_d_godot_variant_new_pool_int_array
#endif

static void _cffi_d_godot_variant_new_pool_real_array(godot_variant * x0, godot_pool_real_array const * x1)
{
  godot_variant_new_pool_real_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_pool_real_array(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_pool_real_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_pool_real_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(479), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_real_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(479), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_pool_real_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_pool_real_array _cffi_d_godot_variant_new_pool_real_array
#endif

static void _cffi_d_godot_variant_new_pool_string_array(godot_variant * x0, godot_pool_string_array const * x1)
{
  godot_variant_new_pool_string_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_pool_string_array(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_pool_string_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_pool_string_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(483), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_string_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(483), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_pool_string_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_pool_string_array _cffi_d_godot_variant_new_pool_string_array
#endif

static void _cffi_d_godot_variant_new_pool_vector2_array(godot_variant * x0, godot_pool_vector2_array const * x1)
{
  godot_variant_new_pool_vector2_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_pool_vector2_array(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_pool_vector2_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_pool_vector2_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(487), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_vector2_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(487), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_pool_vector2_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_pool_vector2_array _cffi_d_godot_variant_new_pool_vector2_array
#endif

static void _cffi_d_godot_variant_new_pool_vector3_array(godot_variant * x0, godot_pool_vector3_array const * x1)
{
  godot_variant_new_pool_vector3_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_pool_vector3_array(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_pool_vector3_array const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_pool_vector3_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(491), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_pool_vector3_array const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(491), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_pool_vector3_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_pool_vector3_array _cffi_d_godot_variant_new_pool_vector3_array
#endif

static void _cffi_d_godot_variant_new_quat(godot_variant * x0, godot_quat const * x1)
{
  godot_variant_new_quat(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_quat(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_quat const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_quat", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(180), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_quat const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(180), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_quat(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_quat _cffi_d_godot_variant_new_quat
#endif

static void _cffi_d_godot_variant_new_real(godot_variant * x0, double x1)
{
  godot_variant_new_real(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_real(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  double x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_real", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  x1 = (double)_cffi_to_c_double(arg1);
  if (x1 == (double)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_real(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_real _cffi_d_godot_variant_new_real
#endif

static void _cffi_d_godot_variant_new_rect2(godot_variant * x0, godot_rect2 const * x1)
{
  godot_variant_new_rect2(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_rect2(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_rect2 const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_rect2", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(60), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(60), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_rect2(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_rect2 _cffi_d_godot_variant_new_rect2
#endif

static void _cffi_d_godot_variant_new_rect3(godot_variant * x0, godot_rect3 const * x1)
{
  godot_variant_new_rect3(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_rect3(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_rect3 const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_rect3", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(75), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rect3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(75), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_rect3(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_rect3 _cffi_d_godot_variant_new_rect3
#endif

static void _cffi_d_godot_variant_new_rid(godot_variant * x0, godot_rid const * x1)
{
  godot_variant_new_rid(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_rid(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_rid const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_rid", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1198), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_rid const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1198), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_rid(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_rid _cffi_d_godot_variant_new_rid
#endif

static void _cffi_d_godot_variant_new_string(godot_variant * x0, godot_string const * x1)
{
  godot_variant_new_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_string(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_string const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(29), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(29), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_string _cffi_d_godot_variant_new_string
#endif

static void _cffi_d_godot_variant_new_transform(godot_variant * x0, godot_transform const * x1)
{
  godot_variant_new_transform(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_transform(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_transform const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_transform", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1206), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1206), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_transform(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_transform _cffi_d_godot_variant_new_transform
#endif

static void _cffi_d_godot_variant_new_transform2d(godot_variant * x0, godot_transform2d const * x1)
{
  godot_variant_new_transform2d(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_transform2d(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_transform2d const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_transform2d", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1095), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_transform2d const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1095), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_transform2d(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_transform2d _cffi_d_godot_variant_new_transform2d
#endif

static void _cffi_d_godot_variant_new_uint(godot_variant * x0, uint64_t x1)
{
  godot_variant_new_uint(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_uint(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  uint64_t x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_uint", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint64_t);
  if (x1 == (uint64_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_uint(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_uint _cffi_d_godot_variant_new_uint
#endif

static void _cffi_d_godot_variant_new_vector2(godot_variant * x0, godot_vector2 const * x1)
{
  godot_variant_new_vector2(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_vector2(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_vector2 const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_vector2", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(64), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_vector2(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_vector2 _cffi_d_godot_variant_new_vector2
#endif

static void _cffi_d_godot_variant_new_vector3(godot_variant * x0, godot_vector3 const * x1)
{
  godot_variant_new_vector3(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_new_vector3(PyObject *self, PyObject *args)
{
  godot_variant * x0;
  godot_vector3 const * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_new_vector3", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(123), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(123), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_variant_new_vector3(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_variant_new_vector3 _cffi_d_godot_variant_new_vector3
#endif

static _Bool _cffi_d_godot_variant_operator_equal(godot_variant const * x0, godot_variant const * x1)
{
  return godot_variant_operator_equal(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_operator_equal(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_variant const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_operator_equal", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_variant_operator_equal(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_variant_operator_equal _cffi_d_godot_variant_operator_equal
#endif

static _Bool _cffi_d_godot_variant_operator_less(godot_variant const * x0, godot_variant const * x1)
{
  return godot_variant_operator_less(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_variant_operator_less(PyObject *self, PyObject *args)
{
  godot_variant const * x0;
  godot_variant const * x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_variant_operator_less", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_variant const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_variant_operator_less(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
#  define _cffi_f_godot_variant_operator_less _cffi_d_godot_variant_operator_less
#endif

static void _cffi_d_godot_vector2_abs(godot_vector2 * x0, godot_vector2 * x1)
{
  godot_vector2_abs(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_abs(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_abs", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_abs(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_abs _cffi_d_godot_vector2_abs
#endif

static float _cffi_d_godot_vector2_angle(godot_vector2 * x0)
{
  return godot_vector2_angle(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_angle(PyObject *self, PyObject *arg0)
{
  godot_vector2 * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_angle(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector2_angle _cffi_d_godot_vector2_angle
#endif

static float _cffi_d_godot_vector2_angle_to(godot_vector2 * x0, godot_vector2 const * x1)
{
  return godot_vector2_angle_to(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_angle_to(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_angle_to", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(64), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_angle_to(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector2_angle_to _cffi_d_godot_vector2_angle_to
#endif

static float _cffi_d_godot_vector2_angle_to_point(godot_vector2 * x0, godot_vector2 const * x1)
{
  return godot_vector2_angle_to_point(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_angle_to_point(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_angle_to_point", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(64), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_angle_to_point(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector2_angle_to_point _cffi_d_godot_vector2_angle_to_point
#endif

static void _cffi_d_godot_vector2_as_string(godot_vector2 * x0, godot_string * x1)
{
  godot_vector2_as_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_as_string(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_as_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_as_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_as_string _cffi_d_godot_vector2_as_string
#endif

static float _cffi_d_godot_vector2_aspect(godot_vector2 * x0)
{
  return godot_vector2_aspect(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_aspect(PyObject *self, PyObject *arg0)
{
  godot_vector2 * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_aspect(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector2_aspect _cffi_d_godot_vector2_aspect
#endif

static void _cffi_d_godot_vector2_bounce(godot_vector2 * x0, godot_vector2 * x1, godot_vector2 const * x2)
{
  godot_vector2_bounce(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_bounce(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 * x1;
  godot_vector2 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector2_bounce", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_bounce(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_bounce _cffi_d_godot_vector2_bounce
#endif

static void _cffi_d_godot_vector2_clamped(godot_vector2 * x0, godot_vector2 * x1, float x2)
{
  godot_vector2_clamped(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_clamped(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 * x1;
  float x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector2_clamped", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_clamped(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_clamped _cffi_d_godot_vector2_clamped
#endif

static void _cffi_d_godot_vector2_cubic_interpolate(godot_vector2 * x0, godot_vector2 * x1, godot_vector2 const * x2, godot_vector2 const * x3, godot_vector2 const * x4, float x5)
{
  godot_vector2_cubic_interpolate(x0, x1, x2, x3, x4, x5);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_cubic_interpolate(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 * x1;
  godot_vector2 const * x2;
  godot_vector2 const * x3;
  godot_vector2 const * x4;
  float x5;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;

  if (!PyArg_UnpackTuple(args, "godot_vector2_cubic_interpolate", 6, 6, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(64), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(64), arg4) < 0)
      return NULL;
  }

  x5 = (float)_cffi_to_c_float(arg5);
  if (x5 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_cubic_interpolate(x0, x1, x2, x3, x4, x5); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_cubic_interpolate _cffi_d_godot_vector2_cubic_interpolate
#endif

static float _cffi_d_godot_vector2_distance_squared_to(godot_vector2 * x0, godot_vector2 const * x1)
{
  return godot_vector2_distance_squared_to(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_distance_squared_to(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_distance_squared_to", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(64), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_distance_squared_to(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector2_distance_squared_to _cffi_d_godot_vector2_distance_squared_to
#endif

static float _cffi_d_godot_vector2_distance_to(godot_vector2 * x0, godot_vector2 const * x1)
{
  return godot_vector2_distance_to(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_distance_to(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_distance_to", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(64), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_distance_to(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector2_distance_to _cffi_d_godot_vector2_distance_to
#endif

static float _cffi_d_godot_vector2_dot(godot_vector2 * x0, godot_vector2 const * x1)
{
  return godot_vector2_dot(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_dot(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_dot", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(64), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_dot(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector2_dot _cffi_d_godot_vector2_dot
#endif

static void _cffi_d_godot_vector2_floor(godot_vector2 * x0, godot_vector2 * x1)
{
  godot_vector2_floor(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_floor(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_floor", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_floor(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_floor _cffi_d_godot_vector2_floor
#endif

static float _cffi_d_godot_vector2_get_x(godot_vector2 const * x0)
{
  return godot_vector2_get_x(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_get_x(PyObject *self, PyObject *arg0)
{
  godot_vector2 const * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(64), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_get_x(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector2_get_x _cffi_d_godot_vector2_get_x
#endif

static float _cffi_d_godot_vector2_get_y(godot_vector2 const * x0)
{
  return godot_vector2_get_y(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_get_y(PyObject *self, PyObject *arg0)
{
  godot_vector2 const * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(64), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_get_y(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector2_get_y _cffi_d_godot_vector2_get_y
#endif

static float _cffi_d_godot_vector2_length(godot_vector2 * x0)
{
  return godot_vector2_length(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_length(PyObject *self, PyObject *arg0)
{
  godot_vector2 * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_length(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector2_length _cffi_d_godot_vector2_length
#endif

static float _cffi_d_godot_vector2_length_squared(godot_vector2 * x0)
{
  return godot_vector2_length_squared(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_length_squared(PyObject *self, PyObject *arg0)
{
  godot_vector2 * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_length_squared(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector2_length_squared _cffi_d_godot_vector2_length_squared
#endif

static void _cffi_d_godot_vector2_linear_interpolate(godot_vector2 * x0, godot_vector2 * x1, godot_vector2 const * x2, float x3)
{
  godot_vector2_linear_interpolate(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_linear_interpolate(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 * x1;
  godot_vector2 const * x2;
  float x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_vector2_linear_interpolate", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_linear_interpolate(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_linear_interpolate _cffi_d_godot_vector2_linear_interpolate
#endif

static void _cffi_d_godot_vector2_new(godot_vector2 * x0, float x1, float x2)
{
  godot_vector2_new(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_new(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  float x1;
  float x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector2_new", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_new(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_new _cffi_d_godot_vector2_new
#endif

static void _cffi_d_godot_vector2_normalized(godot_vector2 * x0, godot_vector2 * x1)
{
  godot_vector2_normalized(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_normalized(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_normalized", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_normalized(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_normalized _cffi_d_godot_vector2_normalized
#endif

static godot_vector2 _cffi_d_godot_vector2_operator_add(godot_vector2 const * x0, godot_vector2 x1)
{
  return godot_vector2_operator_add(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_operator_add(PyObject *self, PyObject *args)
{
  godot_vector2 const * x0;
  godot_vector2 x1;
  Py_ssize_t datasize;
  godot_vector2 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_operator_add", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(64), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(107), arg1) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_operator_add(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(107));
}
#else
static void _cffi_f_godot_vector2_operator_add(godot_vector2 *result, godot_vector2 const * x0, godot_vector2 *x1)
{
  { *result = godot_vector2_operator_add(x0, *x1); }
}
#endif

static godot_vector2 _cffi_d_godot_vector2_operator_divide_scalar(godot_vector2 const * x0, float x1)
{
  return godot_vector2_operator_divide_scalar(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_operator_divide_scalar(PyObject *self, PyObject *args)
{
  godot_vector2 const * x0;
  float x1;
  Py_ssize_t datasize;
  godot_vector2 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_operator_divide_scalar", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(64), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_operator_divide_scalar(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(107));
}
#else
static void _cffi_f_godot_vector2_operator_divide_scalar(godot_vector2 *result, godot_vector2 const * x0, float x1)
{
  { *result = godot_vector2_operator_divide_scalar(x0, x1); }
}
#endif

static godot_vector2 _cffi_d_godot_vector2_operator_divide_vector(godot_vector2 const * x0, godot_vector2 x1)
{
  return godot_vector2_operator_divide_vector(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_operator_divide_vector(PyObject *self, PyObject *args)
{
  godot_vector2 const * x0;
  godot_vector2 x1;
  Py_ssize_t datasize;
  godot_vector2 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_operator_divide_vector", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(64), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(107), arg1) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_operator_divide_vector(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(107));
}
#else
static void _cffi_f_godot_vector2_operator_divide_vector(godot_vector2 *result, godot_vector2 const * x0, godot_vector2 *x1)
{
  { *result = godot_vector2_operator_divide_vector(x0, *x1); }
}
#endif

static _Bool _cffi_d_godot_vector2_operator_equal(godot_vector2 const * x0, godot_vector2 x1)
{
  return godot_vector2_operator_equal(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_operator_equal(PyObject *self, PyObject *args)
{
  godot_vector2 const * x0;
  godot_vector2 x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_operator_equal", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(64), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(107), arg1) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_operator_equal(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
static _Bool _cffi_f_godot_vector2_operator_equal(godot_vector2 const * x0, godot_vector2 *x1)
{
  _Bool result;
  { result = godot_vector2_operator_equal(x0, *x1); }
  return result;
}
#endif

static _Bool _cffi_d_godot_vector2_operator_less(godot_vector2 const * x0, godot_vector2 x1)
{
  return godot_vector2_operator_less(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_operator_less(PyObject *self, PyObject *args)
{
  godot_vector2 const * x0;
  godot_vector2 x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_operator_less", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(64), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(107), arg1) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_operator_less(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
static _Bool _cffi_f_godot_vector2_operator_less(godot_vector2 const * x0, godot_vector2 *x1)
{
  _Bool result;
  { result = godot_vector2_operator_less(x0, *x1); }
  return result;
}
#endif

static godot_vector2 _cffi_d_godot_vector2_operator_multiply_scalar(godot_vector2 const * x0, float x1)
{
  return godot_vector2_operator_multiply_scalar(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_operator_multiply_scalar(PyObject *self, PyObject *args)
{
  godot_vector2 const * x0;
  float x1;
  Py_ssize_t datasize;
  godot_vector2 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_operator_multiply_scalar", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(64), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_operator_multiply_scalar(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(107));
}
#else
static void _cffi_f_godot_vector2_operator_multiply_scalar(godot_vector2 *result, godot_vector2 const * x0, float x1)
{
  { *result = godot_vector2_operator_multiply_scalar(x0, x1); }
}
#endif

static godot_vector2 _cffi_d_godot_vector2_operator_multiply_vector(godot_vector2 const * x0, godot_vector2 x1)
{
  return godot_vector2_operator_multiply_vector(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_operator_multiply_vector(PyObject *self, PyObject *args)
{
  godot_vector2 const * x0;
  godot_vector2 x1;
  Py_ssize_t datasize;
  godot_vector2 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_operator_multiply_vector", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(64), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(107), arg1) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_operator_multiply_vector(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(107));
}
#else
static void _cffi_f_godot_vector2_operator_multiply_vector(godot_vector2 *result, godot_vector2 const * x0, godot_vector2 *x1)
{
  { *result = godot_vector2_operator_multiply_vector(x0, *x1); }
}
#endif

static godot_vector2 _cffi_d_godot_vector2_operator_subtract(godot_vector2 const * x0, godot_vector2 x1)
{
  return godot_vector2_operator_subtract(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_operator_subtract(PyObject *self, PyObject *args)
{
  godot_vector2 const * x0;
  godot_vector2 x1;
  Py_ssize_t datasize;
  godot_vector2 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_operator_subtract", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(64), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(107), arg1) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector2_operator_subtract(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(107));
}
#else
static void _cffi_f_godot_vector2_operator_subtract(godot_vector2 *result, godot_vector2 const * x0, godot_vector2 *x1)
{
  { *result = godot_vector2_operator_subtract(x0, *x1); }
}
#endif

static void _cffi_d_godot_vector2_reflect(godot_vector2 * x0, godot_vector2 * x1, godot_vector2 const * x2)
{
  godot_vector2_reflect(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_reflect(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 * x1;
  godot_vector2 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector2_reflect", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_reflect(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_reflect _cffi_d_godot_vector2_reflect
#endif

static void _cffi_d_godot_vector2_rotated(godot_vector2 * x0, godot_vector2 * x1, float x2)
{
  godot_vector2_rotated(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_rotated(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 * x1;
  float x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector2_rotated", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_rotated(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_rotated _cffi_d_godot_vector2_rotated
#endif

static void _cffi_d_godot_vector2_set_x(godot_vector2 * x0, float x1)
{
  godot_vector2_set_x(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_set_x(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  float x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_set_x", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_set_x(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_set_x _cffi_d_godot_vector2_set_x
#endif

static void _cffi_d_godot_vector2_set_y(godot_vector2 * x0, float x1)
{
  godot_vector2_set_y(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_set_y(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  float x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_set_y", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_set_y(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_set_y _cffi_d_godot_vector2_set_y
#endif

static void _cffi_d_godot_vector2_slide(godot_vector2 * x0, godot_vector2 * x1, godot_vector2 const * x2)
{
  godot_vector2_slide(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_slide(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 * x1;
  godot_vector2 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector2_slide", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_slide(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_slide _cffi_d_godot_vector2_slide
#endif

static void _cffi_d_godot_vector2_snapped(godot_vector2 * x0, godot_vector2 * x1, godot_vector2 const * x2)
{
  godot_vector2_snapped(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_snapped(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 * x1;
  godot_vector2 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector2_snapped", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(64), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector2 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(64), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_snapped(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_snapped _cffi_d_godot_vector2_snapped
#endif

static void _cffi_d_godot_vector2_tangent(godot_vector2 * x0, godot_vector2 * x1)
{
  godot_vector2_tangent(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector2_tangent(PyObject *self, PyObject *args)
{
  godot_vector2 * x0;
  godot_vector2 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector2_tangent", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(192), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(192), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector2 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(192), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector2_tangent(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector2_tangent _cffi_d_godot_vector2_tangent
#endif

static void _cffi_d_godot_vector3_abs(godot_vector3 * x0, godot_vector3 * x1)
{
  godot_vector3_abs(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_abs(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_abs", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_abs(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_abs _cffi_d_godot_vector3_abs
#endif

static float _cffi_d_godot_vector3_angle_to(godot_vector3 * x0, godot_vector3 const * x1)
{
  return godot_vector3_angle_to(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_angle_to(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_angle_to", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_angle_to(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector3_angle_to _cffi_d_godot_vector3_angle_to
#endif

static void _cffi_d_godot_vector3_as_string(godot_vector3 * x0, godot_string * x1)
{
  godot_vector3_as_string(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_as_string(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_string * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_as_string", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(535), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_string *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(535), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_as_string(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_as_string _cffi_d_godot_vector3_as_string
#endif

static void _cffi_d_godot_vector3_bounce(godot_vector3 * x0, godot_vector3 * x1, godot_vector3 const * x2)
{
  godot_vector3_bounce(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_bounce(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector3_bounce", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_bounce(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_bounce _cffi_d_godot_vector3_bounce
#endif

static void _cffi_d_godot_vector3_ceil(godot_vector3 * x0, godot_vector3 * x1)
{
  godot_vector3_ceil(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_ceil(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_ceil", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_ceil(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_ceil _cffi_d_godot_vector3_ceil
#endif

static void _cffi_d_godot_vector3_cross(godot_vector3 * x0, godot_vector3 * x1, godot_vector3 const * x2)
{
  godot_vector3_cross(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_cross(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector3_cross", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_cross(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_cross _cffi_d_godot_vector3_cross
#endif

static void _cffi_d_godot_vector3_cubic_interpolate(godot_vector3 * x0, godot_vector3 * x1, godot_vector3 const * x2, godot_vector3 const * x3, godot_vector3 const * x4, float x5)
{
  godot_vector3_cubic_interpolate(x0, x1, x2, x3, x4, x5);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_cubic_interpolate(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  godot_vector3 const * x3;
  godot_vector3 const * x4;
  float x5;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;

  if (!PyArg_UnpackTuple(args, "godot_vector3_cubic_interpolate", 6, 6, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(36), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(36), arg4) < 0)
      return NULL;
  }

  x5 = (float)_cffi_to_c_float(arg5);
  if (x5 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_cubic_interpolate(x0, x1, x2, x3, x4, x5); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_cubic_interpolate _cffi_d_godot_vector3_cubic_interpolate
#endif

static float _cffi_d_godot_vector3_distance_squared_to(godot_vector3 * x0, godot_vector3 const * x1)
{
  return godot_vector3_distance_squared_to(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_distance_squared_to(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_distance_squared_to", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_distance_squared_to(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector3_distance_squared_to _cffi_d_godot_vector3_distance_squared_to
#endif

static float _cffi_d_godot_vector3_distance_to(godot_vector3 * x0, godot_vector3 const * x1)
{
  return godot_vector3_distance_to(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_distance_to(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_distance_to", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_distance_to(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector3_distance_to _cffi_d_godot_vector3_distance_to
#endif

static float _cffi_d_godot_vector3_dot(godot_vector3 * x0, godot_vector3 const * x1)
{
  return godot_vector3_dot(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_dot(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 const * x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_dot", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(36), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_dot(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector3_dot _cffi_d_godot_vector3_dot
#endif

static void _cffi_d_godot_vector3_floor(godot_vector3 * x0, godot_vector3 * x1)
{
  godot_vector3_floor(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_floor(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_floor", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_floor(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_floor _cffi_d_godot_vector3_floor
#endif

static float _cffi_d_godot_vector3_get_axis(godot_vector3 const * x0, int x1)
{
  return godot_vector3_get_axis(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_get_axis(PyObject *self, PyObject *args)
{
  godot_vector3 const * x0;
  int x1;
  Py_ssize_t datasize;
  float result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_get_axis", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(36), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_get_axis(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector3_get_axis _cffi_d_godot_vector3_get_axis
#endif

static void _cffi_d_godot_vector3_inverse(godot_vector3 * x0, godot_vector3 * x1)
{
  godot_vector3_inverse(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_inverse(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_inverse", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_inverse(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_inverse _cffi_d_godot_vector3_inverse
#endif

static float _cffi_d_godot_vector3_length(godot_vector3 * x0)
{
  return godot_vector3_length(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_length(PyObject *self, PyObject *arg0)
{
  godot_vector3 * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_length(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector3_length _cffi_d_godot_vector3_length
#endif

static float _cffi_d_godot_vector3_length_squared(godot_vector3 * x0)
{
  return godot_vector3_length_squared(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_length_squared(PyObject *self, PyObject *arg0)
{
  godot_vector3 * x0;
  Py_ssize_t datasize;
  float result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_length_squared(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_float(result);
}
#else
#  define _cffi_f_godot_vector3_length_squared _cffi_d_godot_vector3_length_squared
#endif

static void _cffi_d_godot_vector3_linear_interpolate(godot_vector3 * x0, godot_vector3 * x1, godot_vector3 const * x2, float x3)
{
  godot_vector3_linear_interpolate(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_linear_interpolate(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  float x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_vector3_linear_interpolate", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_linear_interpolate(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_linear_interpolate _cffi_d_godot_vector3_linear_interpolate
#endif

static int _cffi_d_godot_vector3_max_axis(godot_vector3 * x0)
{
  return godot_vector3_max_axis(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_max_axis(PyObject *self, PyObject *arg0)
{
  godot_vector3 * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_max_axis(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_vector3_max_axis _cffi_d_godot_vector3_max_axis
#endif

static int _cffi_d_godot_vector3_min_axis(godot_vector3 * x0)
{
  return godot_vector3_min_axis(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_min_axis(PyObject *self, PyObject *arg0)
{
  godot_vector3 * x0;
  Py_ssize_t datasize;
  int result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_min_axis(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_godot_vector3_min_axis _cffi_d_godot_vector3_min_axis
#endif

static void _cffi_d_godot_vector3_new(godot_vector3 * x0, float x1, float x2, float x3)
{
  godot_vector3_new(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_new(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  float x1;
  float x2;
  float x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_vector3_new", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_new(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_new _cffi_d_godot_vector3_new
#endif

static void _cffi_d_godot_vector3_normalized(godot_vector3 * x0, godot_vector3 * x1)
{
  godot_vector3_normalized(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_normalized(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_normalized", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_normalized(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_normalized _cffi_d_godot_vector3_normalized
#endif

static godot_vector3 _cffi_d_godot_vector3_operator_add(godot_vector3 const * x0, godot_vector3 x1)
{
  return godot_vector3_operator_add(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_operator_add(PyObject *self, PyObject *args)
{
  godot_vector3 const * x0;
  godot_vector3 x1;
  Py_ssize_t datasize;
  godot_vector3 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_operator_add", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(36), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(111), arg1) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_operator_add(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(111));
}
#else
static void _cffi_f_godot_vector3_operator_add(godot_vector3 *result, godot_vector3 const * x0, godot_vector3 *x1)
{
  { *result = godot_vector3_operator_add(x0, *x1); }
}
#endif

static godot_vector3 _cffi_d_godot_vector3_operator_divide_scalar(godot_vector3 const * x0, float x1)
{
  return godot_vector3_operator_divide_scalar(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_operator_divide_scalar(PyObject *self, PyObject *args)
{
  godot_vector3 const * x0;
  float x1;
  Py_ssize_t datasize;
  godot_vector3 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_operator_divide_scalar", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(36), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_operator_divide_scalar(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(111));
}
#else
static void _cffi_f_godot_vector3_operator_divide_scalar(godot_vector3 *result, godot_vector3 const * x0, float x1)
{
  { *result = godot_vector3_operator_divide_scalar(x0, x1); }
}
#endif

static godot_vector3 _cffi_d_godot_vector3_operator_divide_vector(godot_vector3 const * x0, godot_vector3 x1)
{
  return godot_vector3_operator_divide_vector(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_operator_divide_vector(PyObject *self, PyObject *args)
{
  godot_vector3 const * x0;
  godot_vector3 x1;
  Py_ssize_t datasize;
  godot_vector3 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_operator_divide_vector", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(36), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(111), arg1) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_operator_divide_vector(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(111));
}
#else
static void _cffi_f_godot_vector3_operator_divide_vector(godot_vector3 *result, godot_vector3 const * x0, godot_vector3 *x1)
{
  { *result = godot_vector3_operator_divide_vector(x0, *x1); }
}
#endif

static _Bool _cffi_d_godot_vector3_operator_equal(godot_vector3 const * x0, godot_vector3 x1)
{
  return godot_vector3_operator_equal(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_operator_equal(PyObject *self, PyObject *args)
{
  godot_vector3 const * x0;
  godot_vector3 x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_operator_equal", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(36), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(111), arg1) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_operator_equal(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
static _Bool _cffi_f_godot_vector3_operator_equal(godot_vector3 const * x0, godot_vector3 *x1)
{
  _Bool result;
  { result = godot_vector3_operator_equal(x0, *x1); }
  return result;
}
#endif

static _Bool _cffi_d_godot_vector3_operator_less(godot_vector3 const * x0, godot_vector3 x1)
{
  return godot_vector3_operator_less(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_operator_less(PyObject *self, PyObject *args)
{
  godot_vector3 const * x0;
  godot_vector3 x1;
  Py_ssize_t datasize;
  _Bool result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_operator_less", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(36), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(111), arg1) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_operator_less(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, _Bool);
}
#else
static _Bool _cffi_f_godot_vector3_operator_less(godot_vector3 const * x0, godot_vector3 *x1)
{
  _Bool result;
  { result = godot_vector3_operator_less(x0, *x1); }
  return result;
}
#endif

static godot_vector3 _cffi_d_godot_vector3_operator_multiply_scalar(godot_vector3 const * x0, float x1)
{
  return godot_vector3_operator_multiply_scalar(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_operator_multiply_scalar(PyObject *self, PyObject *args)
{
  godot_vector3 const * x0;
  float x1;
  Py_ssize_t datasize;
  godot_vector3 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_operator_multiply_scalar", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(36), arg0) < 0)
      return NULL;
  }

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_operator_multiply_scalar(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(111));
}
#else
static void _cffi_f_godot_vector3_operator_multiply_scalar(godot_vector3 *result, godot_vector3 const * x0, float x1)
{
  { *result = godot_vector3_operator_multiply_scalar(x0, x1); }
}
#endif

static godot_vector3 _cffi_d_godot_vector3_operator_multiply_vector(godot_vector3 const * x0, godot_vector3 x1)
{
  return godot_vector3_operator_multiply_vector(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_operator_multiply_vector(PyObject *self, PyObject *args)
{
  godot_vector3 const * x0;
  godot_vector3 x1;
  Py_ssize_t datasize;
  godot_vector3 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_operator_multiply_vector", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(36), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(111), arg1) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_operator_multiply_vector(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(111));
}
#else
static void _cffi_f_godot_vector3_operator_multiply_vector(godot_vector3 *result, godot_vector3 const * x0, godot_vector3 *x1)
{
  { *result = godot_vector3_operator_multiply_vector(x0, *x1); }
}
#endif

static godot_vector3 _cffi_d_godot_vector3_operator_subtract(godot_vector3 const * x0, godot_vector3 x1)
{
  return godot_vector3_operator_subtract(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_operator_subtract(PyObject *self, PyObject *args)
{
  godot_vector3 const * x0;
  godot_vector3 x1;
  Py_ssize_t datasize;
  godot_vector3 result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_operator_subtract", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(36), arg0) < 0)
      return NULL;
  }

  if (_cffi_to_c((char *)&x1, _cffi_type(111), arg1) < 0)
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = godot_vector3_operator_subtract(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_struct((char *)&result, _cffi_type(111));
}
#else
static void _cffi_f_godot_vector3_operator_subtract(godot_vector3 *result, godot_vector3 const * x0, godot_vector3 *x1)
{
  { *result = godot_vector3_operator_subtract(x0, *x1); }
}
#endif

static void _cffi_d_godot_vector3_outer(godot_vector3 * x0, godot_basis * x1, godot_vector3 const * x2)
{
  godot_vector3_outer(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_outer(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_basis * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector3_outer", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(158), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_outer(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_outer _cffi_d_godot_vector3_outer
#endif

static void _cffi_d_godot_vector3_reflect(godot_vector3 * x0, godot_vector3 * x1, godot_vector3 const * x2)
{
  godot_vector3_reflect(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_reflect(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector3_reflect", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_reflect(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_reflect _cffi_d_godot_vector3_reflect
#endif

static void _cffi_d_godot_vector3_rotated(godot_vector3 * x0, godot_vector3 * x1, godot_vector3 const * x2, float x3)
{
  godot_vector3_rotated(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_rotated(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  float x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "godot_vector3_rotated", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  x3 = (float)_cffi_to_c_float(arg3);
  if (x3 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_rotated(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_rotated _cffi_d_godot_vector3_rotated
#endif

static void _cffi_d_godot_vector3_set_axis(godot_vector3 * x0, int x1, float x2)
{
  godot_vector3_set_axis(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_set_axis(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  int x1;
  float x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector3_set_axis", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int);
  if (x1 == (int)-1 && PyErr_Occurred())
    return NULL;

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_set_axis(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_set_axis _cffi_d_godot_vector3_set_axis
#endif

static void _cffi_d_godot_vector3_slide(godot_vector3 * x0, godot_vector3 * x1, godot_vector3 const * x2)
{
  godot_vector3_slide(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_slide(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 * x1;
  godot_vector3 const * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector3_slide", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(36), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (godot_vector3 const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(36), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_slide(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_slide _cffi_d_godot_vector3_slide
#endif

static void _cffi_d_godot_vector3_snapped(godot_vector3 * x0, godot_vector3 * x1, float x2)
{
  godot_vector3_snapped(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_snapped(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_vector3 * x1;
  float x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "godot_vector3_snapped", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(45), arg1) < 0)
      return NULL;
  }

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_snapped(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_snapped _cffi_d_godot_vector3_snapped
#endif

static void _cffi_d_godot_vector3_to_diagonal_matrix(godot_vector3 * x0, godot_basis * x1)
{
  godot_vector3_to_diagonal_matrix(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_godot_vector3_to_diagonal_matrix(PyObject *self, PyObject *args)
{
  godot_vector3 * x0;
  godot_basis * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "godot_vector3_to_diagonal_matrix", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(45), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (godot_vector3 *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(45), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(158), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (godot_basis *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(158), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { godot_vector3_to_diagonal_matrix(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_godot_vector3_to_diagonal_matrix _cffi_d_godot_vector3_to_diagonal_matrix
#endif

static void * _cffi_d_malloc(size_t x0)
{
  return malloc(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_malloc(PyObject *self, PyObject *arg0)
{
  size_t x0;
  void * result;

  x0 = _cffi_to_c_int(arg0, size_t);
  if (x0 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = malloc(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(114));
}
#else
#  define _cffi_f_malloc _cffi_d_malloc
#endif

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_array(godot_array *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[8] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_array { char x; godot_array y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_basis(godot_basis *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[36] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_basis { char x; godot_basis y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_color(godot_color *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[16] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_color { char x; godot_color y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_dictionary(godot_dictionary *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[8] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_dictionary { char x; godot_dictionary y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_image(godot_image *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[32] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_image { char x; godot_image y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_input_event(godot_input_event *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[56] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_input_event { char x; godot_input_event y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_instance_create_func(godot_instance_create_func *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { void *(* *tmp)(void *, void *) = &p->create_func; (void)tmp; }
  { void * *tmp = &p->method_data; (void)tmp; }
  { void(* *tmp)(void *) = &p->free_func; (void)tmp; }
}
struct _cffi_align__godot_instance_create_func { char x; godot_instance_create_func y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_instance_destroy_func(godot_instance_destroy_func *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { void(* *tmp)(void *, void *, void *) = &p->destroy_func; (void)tmp; }
  { void * *tmp = &p->method_data; (void)tmp; }
  { void(* *tmp)(void *) = &p->free_func; (void)tmp; }
}
struct _cffi_align__godot_instance_destroy_func { char x; godot_instance_destroy_func y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_instance_method(godot_instance_method *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { godot_variant(* *tmp)(void *, void *, void *, int, godot_variant * *) = &p->method; (void)tmp; }
  { void * *tmp = &p->method_data; (void)tmp; }
  { void(* *tmp)(void *) = &p->free_func; (void)tmp; }
}
struct _cffi_align__godot_instance_method { char x; godot_instance_method y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_method_attributes(godot_method_attributes *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { godot_method_rpc_mode *tmp = &p->rpc_type; (void)tmp; }
}
struct _cffi_align__godot_method_attributes { char x; godot_method_attributes y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_method_bind(godot_method_bind *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[1] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_method_bind { char x; godot_method_bind y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_native_init_options(godot_native_init_options *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  (void)((p->in_editor) | 0);  /* check that 'godot_native_init_options.in_editor' is an integer */
  (void)((p->core_api_hash) | 0);  /* check that 'godot_native_init_options.core_api_hash' is an integer */
  (void)((p->editor_api_hash) | 0);  /* check that 'godot_native_init_options.editor_api_hash' is an integer */
  (void)((p->no_api_hash) | 0);  /* check that 'godot_native_init_options.no_api_hash' is an integer */
}
struct _cffi_align__godot_native_init_options { char x; godot_native_init_options y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_native_terminate_options(godot_native_terminate_options *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  (void)((p->in_editor) | 0);  /* check that 'godot_native_terminate_options.in_editor' is an integer */
}
struct _cffi_align__godot_native_terminate_options { char x; godot_native_terminate_options y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_node_path(godot_node_path *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[8] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_node_path { char x; godot_node_path y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_plane(godot_plane *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[16] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_plane { char x; godot_plane y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_pool_byte_array(godot_pool_byte_array *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[8] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_pool_byte_array { char x; godot_pool_byte_array y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_pool_color_array(godot_pool_color_array *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[8] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_pool_color_array { char x; godot_pool_color_array y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_pool_int_array(godot_pool_int_array *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[8] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_pool_int_array { char x; godot_pool_int_array y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_pool_real_array(godot_pool_real_array *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[8] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_pool_real_array { char x; godot_pool_real_array y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_pool_string_array(godot_pool_string_array *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[8] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_pool_string_array { char x; godot_pool_string_array y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_pool_vector2_array(godot_pool_vector2_array *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[8] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_pool_vector2_array { char x; godot_pool_vector2_array y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_pool_vector3_array(godot_pool_vector3_array *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[8] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_pool_vector3_array { char x; godot_pool_vector3_array y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_property_attributes(godot_property_attributes *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { godot_method_rpc_mode *tmp = &p->rset_type; (void)tmp; }
  (void)((p->type) | 0);  /* check that 'godot_property_attributes.type' is an integer */
  { godot_property_hint *tmp = &p->hint; (void)tmp; }
  { godot_string *tmp = &p->hint_string; (void)tmp; }
  { godot_property_usage_flags *tmp = &p->usage; (void)tmp; }
  { godot_variant *tmp = &p->default_value; (void)tmp; }
}
struct _cffi_align__godot_property_attributes { char x; godot_property_attributes y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_property_get_func(godot_property_get_func *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { godot_variant(* *tmp)(void *, void *, void *) = &p->get_func; (void)tmp; }
  { void * *tmp = &p->method_data; (void)tmp; }
  { void(* *tmp)(void *) = &p->free_func; (void)tmp; }
}
struct _cffi_align__godot_property_get_func { char x; godot_property_get_func y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_property_set_func(godot_property_set_func *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { void(* *tmp)(void *, void *, void *, godot_variant) = &p->set_func; (void)tmp; }
  { void * *tmp = &p->method_data; (void)tmp; }
  { void(* *tmp)(void *) = &p->free_func; (void)tmp; }
}
struct _cffi_align__godot_property_set_func { char x; godot_property_set_func y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_quat(godot_quat *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[16] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_quat { char x; godot_quat y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_rect2(godot_rect2 *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[16] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_rect2 { char x; godot_rect2 y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_rect3(godot_rect3 *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[24] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_rect3 { char x; godot_rect3 y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_rid(godot_rid *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[8] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_rid { char x; godot_rid y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_signal(godot_signal *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { godot_string *tmp = &p->name; (void)tmp; }
  (void)((p->num_args) | 0);  /* check that 'godot_signal.num_args' is an integer */
  { godot_signal_argument * *tmp = &p->args; (void)tmp; }
  (void)((p->num_default_args) | 0);  /* check that 'godot_signal.num_default_args' is an integer */
  { godot_variant * *tmp = &p->default_args; (void)tmp; }
}
struct _cffi_align__godot_signal { char x; godot_signal y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_signal_argument(godot_signal_argument *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { godot_string *tmp = &p->name; (void)tmp; }
  (void)((p->type) | 0);  /* check that 'godot_signal_argument.type' is an integer */
  { godot_property_hint *tmp = &p->hint; (void)tmp; }
  { godot_string *tmp = &p->hint_string; (void)tmp; }
  { godot_property_usage_flags *tmp = &p->usage; (void)tmp; }
  { godot_variant *tmp = &p->default_value; (void)tmp; }
}
struct _cffi_align__godot_signal_argument { char x; godot_signal_argument y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_string(godot_string *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[8] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_string { char x; godot_string y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_transform(godot_transform *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[48] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_transform { char x; godot_transform y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_transform2d(godot_transform2d *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[24] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_transform2d { char x; godot_transform2d y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_variant(godot_variant *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[24] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_variant { char x; godot_variant y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_vector2(godot_vector2 *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[8] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_vector2 { char x; godot_vector2 y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__godot_vector3(godot_vector3 *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { uint8_t(*tmp)[12] = &p->_dont_touch_that; (void)tmp; }
}
struct _cffi_align__godot_vector3 { char x; godot_vector3 y; };

static const struct _cffi_global_s _cffi_globals[] = {
  { "GODOT_BUTTON_LEFT", (void *)_cffi_const_GODOT_BUTTON_LEFT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_BUTTON_MASK_LEFT", (void *)_cffi_const_GODOT_BUTTON_MASK_LEFT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_BUTTON_MASK_MIDDLE", (void *)_cffi_const_GODOT_BUTTON_MASK_MIDDLE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_BUTTON_MASK_RIGHT", (void *)_cffi_const_GODOT_BUTTON_MASK_RIGHT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_BUTTON_MIDDLE", (void *)_cffi_const_GODOT_BUTTON_MIDDLE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_BUTTON_RIGHT", (void *)_cffi_const_GODOT_BUTTON_RIGHT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_BUTTON_WHEEL_DOWN", (void *)_cffi_const_GODOT_BUTTON_WHEEL_DOWN, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_BUTTON_WHEEL_LEFT", (void *)_cffi_const_GODOT_BUTTON_WHEEL_LEFT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_BUTTON_WHEEL_RIGHT", (void *)_cffi_const_GODOT_BUTTON_WHEEL_RIGHT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_BUTTON_WHEEL_UP", (void *)_cffi_const_GODOT_BUTTON_WHEEL_UP, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_ALREADY_EXISTS", (void *)_cffi_const_GODOT_ERR_ALREADY_EXISTS, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_ALREADY_IN_USE", (void *)_cffi_const_GODOT_ERR_ALREADY_IN_USE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_BUG", (void *)_cffi_const_GODOT_ERR_BUG, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_BUSY", (void *)_cffi_const_GODOT_ERR_BUSY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_CANT_AQUIRE_RESOURCE", (void *)_cffi_const_GODOT_ERR_CANT_AQUIRE_RESOURCE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_CANT_CONNECT", (void *)_cffi_const_GODOT_ERR_CANT_CONNECT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_CANT_CREATE", (void *)_cffi_const_GODOT_ERR_CANT_CREATE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_CANT_FORK", (void *)_cffi_const_GODOT_ERR_CANT_FORK, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_CANT_OPEN", (void *)_cffi_const_GODOT_ERR_CANT_OPEN, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_CANT_RESOLVE", (void *)_cffi_const_GODOT_ERR_CANT_RESOLVE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_COMPILATION_FAILED", (void *)_cffi_const_GODOT_ERR_COMPILATION_FAILED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_CONNECTION_ERROR", (void *)_cffi_const_GODOT_ERR_CONNECTION_ERROR, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_CYCLIC_LINK", (void *)_cffi_const_GODOT_ERR_CYCLIC_LINK, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_DATABASE_CANT_READ", (void *)_cffi_const_GODOT_ERR_DATABASE_CANT_READ, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_DATABASE_CANT_WRITE", (void *)_cffi_const_GODOT_ERR_DATABASE_CANT_WRITE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_DOES_NOT_EXIST", (void *)_cffi_const_GODOT_ERR_DOES_NOT_EXIST, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_DUPLICATE_SYMBOL", (void *)_cffi_const_GODOT_ERR_DUPLICATE_SYMBOL, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_FILE_ALREADY_IN_USE", (void *)_cffi_const_GODOT_ERR_FILE_ALREADY_IN_USE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_FILE_BAD_DRIVE", (void *)_cffi_const_GODOT_ERR_FILE_BAD_DRIVE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_FILE_BAD_PATH", (void *)_cffi_const_GODOT_ERR_FILE_BAD_PATH, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_FILE_CANT_OPEN", (void *)_cffi_const_GODOT_ERR_FILE_CANT_OPEN, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_FILE_CANT_READ", (void *)_cffi_const_GODOT_ERR_FILE_CANT_READ, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_FILE_CANT_WRITE", (void *)_cffi_const_GODOT_ERR_FILE_CANT_WRITE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_FILE_CORRUPT", (void *)_cffi_const_GODOT_ERR_FILE_CORRUPT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_FILE_EOF", (void *)_cffi_const_GODOT_ERR_FILE_EOF, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_FILE_MISSING_DEPENDENCIES", (void *)_cffi_const_GODOT_ERR_FILE_MISSING_DEPENDENCIES, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_FILE_NOT_FOUND", (void *)_cffi_const_GODOT_ERR_FILE_NOT_FOUND, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_FILE_NO_PERMISSION", (void *)_cffi_const_GODOT_ERR_FILE_NO_PERMISSION, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_FILE_UNRECOGNIZED", (void *)_cffi_const_GODOT_ERR_FILE_UNRECOGNIZED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_HELP", (void *)_cffi_const_GODOT_ERR_HELP, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_INVALID_DATA", (void *)_cffi_const_GODOT_ERR_INVALID_DATA, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_INVALID_DECLARATION", (void *)_cffi_const_GODOT_ERR_INVALID_DECLARATION, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_INVALID_PARAMETER", (void *)_cffi_const_GODOT_ERR_INVALID_PARAMETER, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_LINK_FAILED", (void *)_cffi_const_GODOT_ERR_LINK_FAILED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_LOCKED", (void *)_cffi_const_GODOT_ERR_LOCKED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_METHOD_NOT_FOUND", (void *)_cffi_const_GODOT_ERR_METHOD_NOT_FOUND, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_OMFG_THIS_IS_VERY_VERY_BAD", (void *)_cffi_const_GODOT_ERR_OMFG_THIS_IS_VERY_VERY_BAD, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_OUT_OF_MEMORY", (void *)_cffi_const_GODOT_ERR_OUT_OF_MEMORY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_PARAMETER_RANGE_ERROR", (void *)_cffi_const_GODOT_ERR_PARAMETER_RANGE_ERROR, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_PARSE_ERROR", (void *)_cffi_const_GODOT_ERR_PARSE_ERROR, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_PRINTER_ON_FIRE", (void *)_cffi_const_GODOT_ERR_PRINTER_ON_FIRE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_QUERY_FAILED", (void *)_cffi_const_GODOT_ERR_QUERY_FAILED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_SCRIPT_FAILED", (void *)_cffi_const_GODOT_ERR_SCRIPT_FAILED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_SKIP", (void *)_cffi_const_GODOT_ERR_SKIP, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_TIMEOUT", (void *)_cffi_const_GODOT_ERR_TIMEOUT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_UNAUTHORIZED", (void *)_cffi_const_GODOT_ERR_UNAUTHORIZED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_UNAVAILABLE", (void *)_cffi_const_GODOT_ERR_UNAVAILABLE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_UNCONFIGURED", (void *)_cffi_const_GODOT_ERR_UNCONFIGURED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_ERR_WTF", (void *)_cffi_const_GODOT_ERR_WTF, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_FAILED", (void *)_cffi_const_GODOT_FAILED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_ATI1", (void *)_cffi_const_GODOT_IMAGE_FORMAT_ATI1, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_ATI2", (void *)_cffi_const_GODOT_IMAGE_FORMAT_ATI2, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_BPTC_RGBA", (void *)_cffi_const_GODOT_IMAGE_FORMAT_BPTC_RGBA, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_BPTC_RGBF", (void *)_cffi_const_GODOT_IMAGE_FORMAT_BPTC_RGBF, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_BPTC_RGBFU", (void *)_cffi_const_GODOT_IMAGE_FORMAT_BPTC_RGBFU, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_DXT1", (void *)_cffi_const_GODOT_IMAGE_FORMAT_DXT1, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_DXT3", (void *)_cffi_const_GODOT_IMAGE_FORMAT_DXT3, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_DXT5", (void *)_cffi_const_GODOT_IMAGE_FORMAT_DXT5, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_ETC", (void *)_cffi_const_GODOT_IMAGE_FORMAT_ETC, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_ETC2_R11", (void *)_cffi_const_GODOT_IMAGE_FORMAT_ETC2_R11, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_ETC2_R11S", (void *)_cffi_const_GODOT_IMAGE_FORMAT_ETC2_R11S, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_ETC2_RG11", (void *)_cffi_const_GODOT_IMAGE_FORMAT_ETC2_RG11, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_ETC2_RG11S", (void *)_cffi_const_GODOT_IMAGE_FORMAT_ETC2_RG11S, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_ETC2_RGB8", (void *)_cffi_const_GODOT_IMAGE_FORMAT_ETC2_RGB8, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_ETC2_RGB8A1", (void *)_cffi_const_GODOT_IMAGE_FORMAT_ETC2_RGB8A1, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_ETC2_RGBA8", (void *)_cffi_const_GODOT_IMAGE_FORMAT_ETC2_RGBA8, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_L8", (void *)_cffi_const_GODOT_IMAGE_FORMAT_L8, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_LA8", (void *)_cffi_const_GODOT_IMAGE_FORMAT_LA8, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_MAX", (void *)_cffi_const_GODOT_IMAGE_FORMAT_MAX, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_PVRTC2", (void *)_cffi_const_GODOT_IMAGE_FORMAT_PVRTC2, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_PVRTC2A", (void *)_cffi_const_GODOT_IMAGE_FORMAT_PVRTC2A, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_PVRTC4", (void *)_cffi_const_GODOT_IMAGE_FORMAT_PVRTC4, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_PVRTC4A", (void *)_cffi_const_GODOT_IMAGE_FORMAT_PVRTC4A, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_R8", (void *)_cffi_const_GODOT_IMAGE_FORMAT_R8, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RF", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RF, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RG8", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RG8, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RGB565", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RGB565, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RGB8", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RGB8, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RGBA4444", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RGBA4444, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RGBA5551", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RGBA5551, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RGBA8", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RGBA8, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RGBAF", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RGBAF, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RGBAH", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RGBAH, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RGBF", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RGBF, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RGBH", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RGBH, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RGF", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RGF, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RGH", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RGH, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_IMAGE_FORMAT_RH", (void *)_cffi_const_GODOT_IMAGE_FORMAT_RH, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_INPUT_EVENT_TYPE_ACTION", (void *)_cffi_const_GODOT_INPUT_EVENT_TYPE_ACTION, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_INPUT_EVENT_TYPE_JOYPAD_BUTTON", (void *)_cffi_const_GODOT_INPUT_EVENT_TYPE_JOYPAD_BUTTON, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_INPUT_EVENT_TYPE_JOYPAD_MOTION", (void *)_cffi_const_GODOT_INPUT_EVENT_TYPE_JOYPAD_MOTION, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_INPUT_EVENT_TYPE_KEY", (void *)_cffi_const_GODOT_INPUT_EVENT_TYPE_KEY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_INPUT_EVENT_TYPE_MOUSE_BUTTON", (void *)_cffi_const_GODOT_INPUT_EVENT_TYPE_MOUSE_BUTTON, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_INPUT_EVENT_TYPE_MOUSE_MOTION", (void *)_cffi_const_GODOT_INPUT_EVENT_TYPE_MOUSE_MOTION, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_INPUT_EVENT_TYPE_NONE", (void *)_cffi_const_GODOT_INPUT_EVENT_TYPE_NONE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_INPUT_EVENT_TYPE_SCREEN_DRAG", (void *)_cffi_const_GODOT_INPUT_EVENT_TYPE_SCREEN_DRAG, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_INPUT_EVENT_TYPE_SCREEN_TOUCH", (void *)_cffi_const_GODOT_INPUT_EVENT_TYPE_SCREEN_TOUCH, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_INPUT_EVENT_TYPE_TYPE_MAX", (void *)_cffi_const_GODOT_INPUT_EVENT_TYPE_TYPE_MAX, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_ANALOG_0_X", (void *)_cffi_const_GODOT_JOY_ANALOG_0_X, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_ANALOG_0_Y", (void *)_cffi_const_GODOT_JOY_ANALOG_0_Y, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_ANALOG_1_X", (void *)_cffi_const_GODOT_JOY_ANALOG_1_X, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_ANALOG_1_Y", (void *)_cffi_const_GODOT_JOY_ANALOG_1_Y, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_ANALOG_2_X", (void *)_cffi_const_GODOT_JOY_ANALOG_2_X, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_ANALOG_2_Y", (void *)_cffi_const_GODOT_JOY_ANALOG_2_Y, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_ANALOG_L2", (void *)_cffi_const_GODOT_JOY_ANALOG_L2, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_ANALOG_R2", (void *)_cffi_const_GODOT_JOY_ANALOG_R2, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_AXIS_0", (void *)_cffi_const_GODOT_JOY_AXIS_0, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_AXIS_1", (void *)_cffi_const_GODOT_JOY_AXIS_1, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_AXIS_2", (void *)_cffi_const_GODOT_JOY_AXIS_2, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_AXIS_3", (void *)_cffi_const_GODOT_JOY_AXIS_3, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_AXIS_4", (void *)_cffi_const_GODOT_JOY_AXIS_4, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_AXIS_5", (void *)_cffi_const_GODOT_JOY_AXIS_5, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_AXIS_6", (void *)_cffi_const_GODOT_JOY_AXIS_6, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_AXIS_7", (void *)_cffi_const_GODOT_JOY_AXIS_7, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_AXIS_MAX", (void *)_cffi_const_GODOT_JOY_AXIS_MAX, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_0", (void *)_cffi_const_GODOT_JOY_BUTTON_0, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_1", (void *)_cffi_const_GODOT_JOY_BUTTON_1, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_10", (void *)_cffi_const_GODOT_JOY_BUTTON_10, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_11", (void *)_cffi_const_GODOT_JOY_BUTTON_11, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_12", (void *)_cffi_const_GODOT_JOY_BUTTON_12, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_13", (void *)_cffi_const_GODOT_JOY_BUTTON_13, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_14", (void *)_cffi_const_GODOT_JOY_BUTTON_14, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_15", (void *)_cffi_const_GODOT_JOY_BUTTON_15, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_2", (void *)_cffi_const_GODOT_JOY_BUTTON_2, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_3", (void *)_cffi_const_GODOT_JOY_BUTTON_3, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_4", (void *)_cffi_const_GODOT_JOY_BUTTON_4, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_5", (void *)_cffi_const_GODOT_JOY_BUTTON_5, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_6", (void *)_cffi_const_GODOT_JOY_BUTTON_6, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_7", (void *)_cffi_const_GODOT_JOY_BUTTON_7, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_8", (void *)_cffi_const_GODOT_JOY_BUTTON_8, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_9", (void *)_cffi_const_GODOT_JOY_BUTTON_9, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_BUTTON_MAX", (void *)_cffi_const_GODOT_JOY_BUTTON_MAX, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_DPAD_DOWN", (void *)_cffi_const_GODOT_JOY_DPAD_DOWN, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_DPAD_LEFT", (void *)_cffi_const_GODOT_JOY_DPAD_LEFT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_DPAD_RIGHT", (void *)_cffi_const_GODOT_JOY_DPAD_RIGHT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_DPAD_UP", (void *)_cffi_const_GODOT_JOY_DPAD_UP, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_DS_A", (void *)_cffi_const_GODOT_JOY_DS_A, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_DS_B", (void *)_cffi_const_GODOT_JOY_DS_B, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_DS_X", (void *)_cffi_const_GODOT_JOY_DS_X, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_DS_Y", (void *)_cffi_const_GODOT_JOY_DS_Y, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_L", (void *)_cffi_const_GODOT_JOY_L, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_L2", (void *)_cffi_const_GODOT_JOY_L2, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_L3", (void *)_cffi_const_GODOT_JOY_L3, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_R", (void *)_cffi_const_GODOT_JOY_R, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_R2", (void *)_cffi_const_GODOT_JOY_R2, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_R3", (void *)_cffi_const_GODOT_JOY_R3, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_SEGA_A", (void *)_cffi_const_GODOT_JOY_SEGA_A, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_SEGA_B", (void *)_cffi_const_GODOT_JOY_SEGA_B, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_SEGA_X", (void *)_cffi_const_GODOT_JOY_SEGA_X, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_SEGA_Y", (void *)_cffi_const_GODOT_JOY_SEGA_Y, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_SELECT", (void *)_cffi_const_GODOT_JOY_SELECT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_SNES_A", (void *)_cffi_const_GODOT_JOY_SNES_A, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_SNES_B", (void *)_cffi_const_GODOT_JOY_SNES_B, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_SNES_X", (void *)_cffi_const_GODOT_JOY_SNES_X, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_SNES_Y", (void *)_cffi_const_GODOT_JOY_SNES_Y, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_SONY_CIRCLE", (void *)_cffi_const_GODOT_JOY_SONY_CIRCLE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_SONY_SQUARE", (void *)_cffi_const_GODOT_JOY_SONY_SQUARE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_SONY_TRIANGLE", (void *)_cffi_const_GODOT_JOY_SONY_TRIANGLE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_SONY_X", (void *)_cffi_const_GODOT_JOY_SONY_X, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_START", (void *)_cffi_const_GODOT_JOY_START, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_WII_C", (void *)_cffi_const_GODOT_JOY_WII_C, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_WII_MINUS", (void *)_cffi_const_GODOT_JOY_WII_MINUS, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_WII_PLUS", (void *)_cffi_const_GODOT_JOY_WII_PLUS, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_WII_Z", (void *)_cffi_const_GODOT_JOY_WII_Z, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_XBOX_A", (void *)_cffi_const_GODOT_JOY_XBOX_A, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_XBOX_B", (void *)_cffi_const_GODOT_JOY_XBOX_B, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_XBOX_X", (void *)_cffi_const_GODOT_JOY_XBOX_X, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_JOY_XBOX_Y", (void *)_cffi_const_GODOT_JOY_XBOX_Y, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_METHOD_RPC_MODE_DISABLED", (void *)_cffi_const_GODOT_METHOD_RPC_MODE_DISABLED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_METHOD_RPC_MODE_MASTER", (void *)_cffi_const_GODOT_METHOD_RPC_MODE_MASTER, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_METHOD_RPC_MODE_REMOTE", (void *)_cffi_const_GODOT_METHOD_RPC_MODE_REMOTE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_METHOD_RPC_MODE_SLAVE", (void *)_cffi_const_GODOT_METHOD_RPC_MODE_SLAVE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_METHOD_RPC_MODE_SYNC", (void *)_cffi_const_GODOT_METHOD_RPC_MODE_SYNC, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_OK", (void *)_cffi_const_GODOT_OK, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_COLOR_NO_ALPHA", (void *)_cffi_const_GODOT_PROPERTY_HINT_COLOR_NO_ALPHA, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_DIR", (void *)_cffi_const_GODOT_PROPERTY_HINT_DIR, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_ENUM", (void *)_cffi_const_GODOT_PROPERTY_HINT_ENUM, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_EXP_EASING", (void *)_cffi_const_GODOT_PROPERTY_HINT_EXP_EASING, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_EXP_RANGE", (void *)_cffi_const_GODOT_PROPERTY_HINT_EXP_RANGE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_FILE", (void *)_cffi_const_GODOT_PROPERTY_HINT_FILE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_FLAGS", (void *)_cffi_const_GODOT_PROPERTY_HINT_FLAGS, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_GLOBAL_DIR", (void *)_cffi_const_GODOT_PROPERTY_HINT_GLOBAL_DIR, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_GLOBAL_FILE", (void *)_cffi_const_GODOT_PROPERTY_HINT_GLOBAL_FILE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS", (void *)_cffi_const_GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSY", (void *)_cffi_const_GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_KEY_ACCEL", (void *)_cffi_const_GODOT_PROPERTY_HINT_KEY_ACCEL, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_LAYERS_2D_PHYSICS", (void *)_cffi_const_GODOT_PROPERTY_HINT_LAYERS_2D_PHYSICS, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_LAYERS_2D_RENDER", (void *)_cffi_const_GODOT_PROPERTY_HINT_LAYERS_2D_RENDER, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_LAYERS_3D_PHYSICS", (void *)_cffi_const_GODOT_PROPERTY_HINT_LAYERS_3D_PHYSICS, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_LAYERS_3D_RENDER", (void *)_cffi_const_GODOT_PROPERTY_HINT_LAYERS_3D_RENDER, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_LENGTH", (void *)_cffi_const_GODOT_PROPERTY_HINT_LENGTH, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_MAX", (void *)_cffi_const_GODOT_PROPERTY_HINT_MAX, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_METHOD_OF_BASE_TYPE", (void *)_cffi_const_GODOT_PROPERTY_HINT_METHOD_OF_BASE_TYPE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_METHOD_OF_INSTANCE", (void *)_cffi_const_GODOT_PROPERTY_HINT_METHOD_OF_INSTANCE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_METHOD_OF_SCRIPT", (void *)_cffi_const_GODOT_PROPERTY_HINT_METHOD_OF_SCRIPT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_METHOD_OF_VARIANT_TYPE", (void *)_cffi_const_GODOT_PROPERTY_HINT_METHOD_OF_VARIANT_TYPE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_MULTILINE_TEXT", (void *)_cffi_const_GODOT_PROPERTY_HINT_MULTILINE_TEXT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE", (void *)_cffi_const_GODOT_PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_NONE", (void *)_cffi_const_GODOT_PROPERTY_HINT_NONE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_OBJECT_ID", (void *)_cffi_const_GODOT_PROPERTY_HINT_OBJECT_ID, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_PROPERTY_OF_BASE_TYPE", (void *)_cffi_const_GODOT_PROPERTY_HINT_PROPERTY_OF_BASE_TYPE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_PROPERTY_OF_INSTANCE", (void *)_cffi_const_GODOT_PROPERTY_HINT_PROPERTY_OF_INSTANCE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_PROPERTY_OF_SCRIPT", (void *)_cffi_const_GODOT_PROPERTY_HINT_PROPERTY_OF_SCRIPT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_PROPERTY_OF_VARIANT_TYPE", (void *)_cffi_const_GODOT_PROPERTY_HINT_PROPERTY_OF_VARIANT_TYPE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_RANGE", (void *)_cffi_const_GODOT_PROPERTY_HINT_RANGE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_RESOURCE_TYPE", (void *)_cffi_const_GODOT_PROPERTY_HINT_RESOURCE_TYPE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_SPRITE_FRAME", (void *)_cffi_const_GODOT_PROPERTY_HINT_SPRITE_FRAME, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_HINT_TYPE_STRING", (void *)_cffi_const_GODOT_PROPERTY_HINT_TYPE_STRING, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_ANIMATE_AS_TRIGGER", (void *)_cffi_const_GODOT_PROPERTY_USAGE_ANIMATE_AS_TRIGGER, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_CATEGORY", (void *)_cffi_const_GODOT_PROPERTY_USAGE_CATEGORY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_CHECKABLE", (void *)_cffi_const_GODOT_PROPERTY_USAGE_CHECKABLE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_CHECKED", (void *)_cffi_const_GODOT_PROPERTY_USAGE_CHECKED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_DEFAULT", (void *)_cffi_const_GODOT_PROPERTY_USAGE_DEFAULT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_DEFAULT_INTL", (void *)_cffi_const_GODOT_PROPERTY_USAGE_DEFAULT_INTL, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_EDITOR", (void *)_cffi_const_GODOT_PROPERTY_USAGE_EDITOR, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_EDITOR_HELPER", (void *)_cffi_const_GODOT_PROPERTY_USAGE_EDITOR_HELPER, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_GROUP", (void *)_cffi_const_GODOT_PROPERTY_USAGE_GROUP, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_INTERNATIONALIZED", (void *)_cffi_const_GODOT_PROPERTY_USAGE_INTERNATIONALIZED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_NETWORK", (void *)_cffi_const_GODOT_PROPERTY_USAGE_NETWORK, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_NOEDITOR", (void *)_cffi_const_GODOT_PROPERTY_USAGE_NOEDITOR, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_NO_INSTANCE_STATE", (void *)_cffi_const_GODOT_PROPERTY_USAGE_NO_INSTANCE_STATE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_RESTART_IF_CHANGED", (void *)_cffi_const_GODOT_PROPERTY_USAGE_RESTART_IF_CHANGED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_SCRIPT_VARIABLE", (void *)_cffi_const_GODOT_PROPERTY_USAGE_SCRIPT_VARIABLE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_STORAGE", (void *)_cffi_const_GODOT_PROPERTY_USAGE_STORAGE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_STORE_IF_NONONE", (void *)_cffi_const_GODOT_PROPERTY_USAGE_STORE_IF_NONONE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_STORE_IF_NONZERO", (void *)_cffi_const_GODOT_PROPERTY_USAGE_STORE_IF_NONZERO, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_STORE_IF_NULL", (void *)_cffi_const_GODOT_PROPERTY_USAGE_STORE_IF_NULL, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_PROPERTY_USAGE_UPDATE_ALL_IF_MODIFIED", (void *)_cffi_const_GODOT_PROPERTY_USAGE_UPDATE_ALL_IF_MODIFIED, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_ARRAY", (void *)_cffi_const_GODOT_VARIANT_TYPE_ARRAY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_BASIS", (void *)_cffi_const_GODOT_VARIANT_TYPE_BASIS, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_BOOL", (void *)_cffi_const_GODOT_VARIANT_TYPE_BOOL, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_COLOR", (void *)_cffi_const_GODOT_VARIANT_TYPE_COLOR, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_DICTIONARY", (void *)_cffi_const_GODOT_VARIANT_TYPE_DICTIONARY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_IMAGE", (void *)_cffi_const_GODOT_VARIANT_TYPE_IMAGE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_INPUT_EVENT", (void *)_cffi_const_GODOT_VARIANT_TYPE_INPUT_EVENT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_INT", (void *)_cffi_const_GODOT_VARIANT_TYPE_INT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_NIL", (void *)_cffi_const_GODOT_VARIANT_TYPE_NIL, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_NODE_PATH", (void *)_cffi_const_GODOT_VARIANT_TYPE_NODE_PATH, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_OBJECT", (void *)_cffi_const_GODOT_VARIANT_TYPE_OBJECT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_PLANE", (void *)_cffi_const_GODOT_VARIANT_TYPE_PLANE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_POOL_BYTE_ARRAY", (void *)_cffi_const_GODOT_VARIANT_TYPE_POOL_BYTE_ARRAY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_POOL_COLOR_ARRAY", (void *)_cffi_const_GODOT_VARIANT_TYPE_POOL_COLOR_ARRAY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_POOL_INT_ARRAY", (void *)_cffi_const_GODOT_VARIANT_TYPE_POOL_INT_ARRAY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_POOL_REAL_ARRAY", (void *)_cffi_const_GODOT_VARIANT_TYPE_POOL_REAL_ARRAY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_POOL_STRING_ARRAY", (void *)_cffi_const_GODOT_VARIANT_TYPE_POOL_STRING_ARRAY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_POOL_VECTOR2_ARRAY", (void *)_cffi_const_GODOT_VARIANT_TYPE_POOL_VECTOR2_ARRAY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_POOL_VECTOR3_ARRAY", (void *)_cffi_const_GODOT_VARIANT_TYPE_POOL_VECTOR3_ARRAY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_QUAT", (void *)_cffi_const_GODOT_VARIANT_TYPE_QUAT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_REAL", (void *)_cffi_const_GODOT_VARIANT_TYPE_REAL, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_RECT2", (void *)_cffi_const_GODOT_VARIANT_TYPE_RECT2, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_RECT3", (void *)_cffi_const_GODOT_VARIANT_TYPE_RECT3, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_RID", (void *)_cffi_const_GODOT_VARIANT_TYPE_RID, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_STRING", (void *)_cffi_const_GODOT_VARIANT_TYPE_STRING, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_TRANSFORM", (void *)_cffi_const_GODOT_VARIANT_TYPE_TRANSFORM, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_TRANSFORM2D", (void *)_cffi_const_GODOT_VARIANT_TYPE_TRANSFORM2D, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_VECTOR2", (void *)_cffi_const_GODOT_VARIANT_TYPE_VECTOR2, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "GODOT_VARIANT_TYPE_VECTOR3", (void *)_cffi_const_GODOT_VARIANT_TYPE_VECTOR3, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "METHOD_FLAGS_DEFAULT", (void *)_cffi_const_METHOD_FLAGS_DEFAULT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "METHOD_FLAG_CONST", (void *)_cffi_const_METHOD_FLAG_CONST, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "METHOD_FLAG_EDITOR", (void *)_cffi_const_METHOD_FLAG_EDITOR, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "METHOD_FLAG_FROM_SCRIPT", (void *)_cffi_const_METHOD_FLAG_FROM_SCRIPT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "METHOD_FLAG_NORMAL", (void *)_cffi_const_METHOD_FLAG_NORMAL, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "METHOD_FLAG_NOSCRIPT", (void *)_cffi_const_METHOD_FLAG_NOSCRIPT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "METHOD_FLAG_REVERSE", (void *)_cffi_const_METHOD_FLAG_REVERSE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "METHOD_FLAG_VARARG", (void *)_cffi_const_METHOD_FLAG_VARARG, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "METHOD_FLAG_VIRTUAL", (void *)_cffi_const_METHOD_FLAG_VIRTUAL, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "godot_alloc", (void *)_cffi_f_godot_alloc, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 414), (void *)_cffi_d_godot_alloc },
  { "godot_array_append", (void *)_cffi_f_godot_array_append, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 493), (void *)_cffi_d_godot_array_append },
  { "godot_array_back", (void *)_cffi_f_godot_array_back, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 239), (void *)_cffi_d_godot_array_back },
  { "godot_array_clear", (void *)_cffi_f_godot_array_clear, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 462), (void *)_cffi_d_godot_array_clear },
  { "godot_array_count", (void *)_cffi_f_godot_array_count, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 284), (void *)_cffi_d_godot_array_count },
  { "godot_array_destroy", (void *)_cffi_f_godot_array_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 462), (void *)_cffi_d_godot_array_destroy },
  { "godot_array_empty", (void *)_cffi_f_godot_array_empty, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 3), (void *)_cffi_d_godot_array_empty },
  { "godot_array_erase", (void *)_cffi_f_godot_array_erase, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 493), (void *)_cffi_d_godot_array_erase },
  { "godot_array_find", (void *)_cffi_f_godot_array_find, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 295), (void *)_cffi_d_godot_array_find },
  { "godot_array_find_last", (void *)_cffi_f_godot_array_find_last, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 291), (void *)_cffi_d_godot_array_find_last },
  { "godot_array_front", (void *)_cffi_f_godot_array_front, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 239), (void *)_cffi_d_godot_array_front },
  { "godot_array_get", (void *)_cffi_f_godot_array_get, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 232), (void *)_cffi_d_godot_array_get },
  { "godot_array_has", (void *)_cffi_f_godot_array_has, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 6), (void *)_cffi_d_godot_array_has },
  { "godot_array_hash", (void *)_cffi_f_godot_array_hash, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 398), (void *)_cffi_d_godot_array_hash },
  { "godot_array_insert", (void *)_cffi_f_godot_array_insert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 501), (void *)_cffi_d_godot_array_insert },
  { "godot_array_invert", (void *)_cffi_f_godot_array_invert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 462), (void *)_cffi_d_godot_array_invert },
  { "godot_array_is_shared", (void *)_cffi_f_godot_array_is_shared, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 3), (void *)_cffi_d_godot_array_is_shared },
  { "godot_array_new", (void *)_cffi_f_godot_array_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 462), (void *)_cffi_d_godot_array_new },
  { "godot_array_new_pool_byte_array", (void *)_cffi_f_godot_array_new_pool_byte_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 465), (void *)_cffi_d_godot_array_new_pool_byte_array },
  { "godot_array_new_pool_color_array", (void *)_cffi_f_godot_array_new_pool_color_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 469), (void *)_cffi_d_godot_array_new_pool_color_array },
  { "godot_array_new_pool_int_array", (void *)_cffi_f_godot_array_new_pool_int_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 473), (void *)_cffi_d_godot_array_new_pool_int_array },
  { "godot_array_new_pool_real_array", (void *)_cffi_f_godot_array_new_pool_real_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 477), (void *)_cffi_d_godot_array_new_pool_real_array },
  { "godot_array_new_pool_string_array", (void *)_cffi_f_godot_array_new_pool_string_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 481), (void *)_cffi_d_godot_array_new_pool_string_array },
  { "godot_array_new_pool_vector2_array", (void *)_cffi_f_godot_array_new_pool_vector2_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 485), (void *)_cffi_d_godot_array_new_pool_vector2_array },
  { "godot_array_new_pool_vector3_array", (void *)_cffi_f_godot_array_new_pool_vector3_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 489), (void *)_cffi_d_godot_array_new_pool_vector3_array },
  { "godot_array_pop_back", (void *)_cffi_f_godot_array_pop_back, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 236), (void *)_cffi_d_godot_array_pop_back },
  { "godot_array_pop_front", (void *)_cffi_f_godot_array_pop_front, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 236), (void *)_cffi_d_godot_array_pop_front },
  { "godot_array_push_back", (void *)_cffi_f_godot_array_push_back, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 493), (void *)_cffi_d_godot_array_push_back },
  { "godot_array_push_front", (void *)_cffi_f_godot_array_push_front, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 493), (void *)_cffi_d_godot_array_push_front },
  { "godot_array_remove", (void *)_cffi_f_godot_array_remove, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 497), (void *)_cffi_d_godot_array_remove },
  { "godot_array_resize", (void *)_cffi_f_godot_array_resize, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 497), (void *)_cffi_d_godot_array_resize },
  { "godot_array_rfind", (void *)_cffi_f_godot_array_rfind, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 295), (void *)_cffi_d_godot_array_rfind },
  { "godot_array_set", (void *)_cffi_f_godot_array_set, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 501), (void *)_cffi_d_godot_array_set },
  { "godot_array_size", (void *)_cffi_f_godot_array_size, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 288), (void *)_cffi_d_godot_array_size },
  { "godot_array_sort", (void *)_cffi_f_godot_array_sort, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 462), (void *)_cffi_d_godot_array_sort },
  { "godot_array_sort_custom", (void *)_cffi_f_godot_array_sort_custom, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 506), (void *)_cffi_d_godot_array_sort_custom },
  { "godot_basis_as_string", (void *)_cffi_f_godot_basis_as_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 533), (void *)_cffi_d_godot_basis_as_string },
  { "godot_basis_determinant", (void *)_cffi_f_godot_basis_determinant, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 157), (void *)_cffi_d_godot_basis_determinant },
  { "godot_basis_get_euler", (void *)_cffi_f_godot_basis_get_euler, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 537), (void *)_cffi_d_godot_basis_get_euler },
  { "godot_basis_get_orthogonal_index", (void *)_cffi_f_godot_basis_get_orthogonal_index, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 300), (void *)_cffi_d_godot_basis_get_orthogonal_index },
  { "godot_basis_get_scale", (void *)_cffi_f_godot_basis_get_scale, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 537), (void *)_cffi_d_godot_basis_get_scale },
  { "godot_basis_inverse", (void *)_cffi_f_godot_basis_inverse, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 514), (void *)_cffi_d_godot_basis_inverse },
  { "godot_basis_new", (void *)_cffi_f_godot_basis_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 511), (void *)_cffi_d_godot_basis_new },
  { "godot_basis_new1", (void *)_cffi_f_godot_basis_new1, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 551), (void *)_cffi_d_godot_basis_new1 },
  { "godot_basis_new2", (void *)_cffi_f_godot_basis_new2, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 546), (void *)_cffi_d_godot_basis_new2 },
  { "godot_basis_new_with_axis_and_angle", (void *)_cffi_f_godot_basis_new_with_axis_and_angle, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 561), (void *)_cffi_d_godot_basis_new_with_axis_and_angle },
  { "godot_basis_new_with_euler", (void *)_cffi_f_godot_basis_new_with_euler, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 557), (void *)_cffi_d_godot_basis_new_with_euler },
  { "godot_basis_new_with_euler_quat", (void *)_cffi_f_godot_basis_new_with_euler_quat, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 529), (void *)_cffi_d_godot_basis_new_with_euler_quat },
  { "godot_basis_new_with_rows", (void *)_cffi_f_godot_basis_new_with_rows, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 566), (void *)_cffi_d_godot_basis_new_with_rows },
  { "godot_basis_orthonormalized", (void *)_cffi_f_godot_basis_orthonormalized, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 514), (void *)_cffi_d_godot_basis_orthonormalized },
  { "godot_basis_rotated", (void *)_cffi_f_godot_basis_rotated, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 523), (void *)_cffi_d_godot_basis_rotated },
  { "godot_basis_scaled", (void *)_cffi_f_godot_basis_scaled, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 518), (void *)_cffi_d_godot_basis_scaled },
  { "godot_basis_tdotx", (void *)_cffi_f_godot_basis_tdotx, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 160), (void *)_cffi_d_godot_basis_tdotx },
  { "godot_basis_tdoty", (void *)_cffi_f_godot_basis_tdoty, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 160), (void *)_cffi_d_godot_basis_tdoty },
  { "godot_basis_tdotz", (void *)_cffi_f_godot_basis_tdotz, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 160), (void *)_cffi_d_godot_basis_tdotz },
  { "godot_basis_transposed", (void *)_cffi_f_godot_basis_transposed, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 514), (void *)_cffi_d_godot_basis_transposed },
  { "godot_basis_xform", (void *)_cffi_f_godot_basis_xform, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 541), (void *)_cffi_d_godot_basis_xform },
  { "godot_basis_xform_inv", (void *)_cffi_f_godot_basis_xform_inv, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 541), (void *)_cffi_d_godot_basis_xform_inv },
  { "godot_color_as_string", (void *)_cffi_f_godot_color_as_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 600), (void *)_cffi_d_godot_color_as_string },
  { "godot_color_blend", (void *)_cffi_f_godot_color_blend, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 589), (void *)_cffi_d_godot_color_blend },
  { "godot_color_contrasted", (void *)_cffi_f_godot_color_contrasted, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 585), (void *)_cffi_d_godot_color_contrasted },
  { "godot_color_gray", (void *)_cffi_f_godot_color_gray, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 164), (void *)_cffi_d_godot_color_gray },
  { "godot_color_inverted", (void *)_cffi_f_godot_color_inverted, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 585), (void *)_cffi_d_godot_color_inverted },
  { "godot_color_linear_interpolate", (void *)_cffi_f_godot_color_linear_interpolate, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 594), (void *)_cffi_d_godot_color_linear_interpolate },
  { "godot_color_new1", (void *)_cffi_f_godot_color_new1, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 578), (void *)_cffi_d_godot_color_new1 },
  { "godot_color_new2", (void *)_cffi_f_godot_color_new2, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 572), (void *)_cffi_d_godot_color_new2 },
  { "godot_color_to_32", (void *)_cffi_f_godot_color_to_32, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 303), (void *)_cffi_d_godot_color_to_32 },
  { "godot_color_to_ARGB32", (void *)_cffi_f_godot_color_to_ARGB32, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 303), (void *)_cffi_d_godot_color_to_ARGB32 },
  { "godot_color_to_html", (void *)_cffi_f_godot_color_to_html, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 604), (void *)_cffi_d_godot_color_to_html },
  { "godot_dictionary_clear", (void *)_cffi_f_godot_dictionary_clear, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 609), (void *)_cffi_d_godot_dictionary_clear },
  { "godot_dictionary_destroy", (void *)_cffi_f_godot_dictionary_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 609), (void *)_cffi_d_godot_dictionary_destroy },
  { "godot_dictionary_empty", (void *)_cffi_f_godot_dictionary_empty, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 10), (void *)_cffi_d_godot_dictionary_empty },
  { "godot_dictionary_erase", (void *)_cffi_f_godot_dictionary_erase, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 621), (void *)_cffi_d_godot_dictionary_erase },
  { "godot_dictionary_has", (void *)_cffi_f_godot_dictionary_has, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 17), (void *)_cffi_d_godot_dictionary_has },
  { "godot_dictionary_has_all", (void *)_cffi_f_godot_dictionary_has_all, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 13), (void *)_cffi_d_godot_dictionary_has_all },
  { "godot_dictionary_hash", (void *)_cffi_f_godot_dictionary_hash, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 306), (void *)_cffi_d_godot_dictionary_hash },
  { "godot_dictionary_keys", (void *)_cffi_f_godot_dictionary_keys, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 612), (void *)_cffi_d_godot_dictionary_keys },
  { "godot_dictionary_new", (void *)_cffi_f_godot_dictionary_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 609), (void *)_cffi_d_godot_dictionary_new },
  { "godot_dictionary_operator_index", (void *)_cffi_f_godot_dictionary_operator_index, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 616), (void *)_cffi_d_godot_dictionary_operator_index },
  { "godot_dictionary_size", (void *)_cffi_f_godot_dictionary_size, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 306), (void *)_cffi_d_godot_dictionary_size },
  { "godot_dictionary_to_json", (void *)_cffi_f_godot_dictionary_to_json, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 625), (void *)_cffi_d_godot_dictionary_to_json },
  { "godot_dictionary_values", (void *)_cffi_f_godot_dictionary_values, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 612), (void *)_cffi_d_godot_dictionary_values },
  { "godot_free", (void *)_cffi_f_godot_free, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 1432), (void *)_cffi_d_godot_free },
  { "godot_get_class_constructor", (void *)_cffi_f_godot_get_class_constructor, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 436), (void *)_cffi_d_godot_get_class_constructor },
  { "godot_get_global_constants", (void *)_cffi_f_godot_get_global_constants, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_N, 216), (void *)_cffi_d_godot_get_global_constants },
  { "godot_global_get_singleton", (void *)_cffi_f_godot_global_get_singleton, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 408), (void *)_cffi_d_godot_global_get_singleton },
  { "godot_image_blit_rect", (void *)_cffi_f_godot_image_blit_rect, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 653), (void *)_cffi_d_godot_image_blit_rect },
  { "godot_image_compressed", (void *)_cffi_f_godot_image_compressed, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 641), (void *)_cffi_d_godot_image_compressed },
  { "godot_image_converted", (void *)_cffi_f_godot_image_converted, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 641), (void *)_cffi_d_godot_image_converted },
  { "godot_image_decompressed", (void *)_cffi_f_godot_image_decompressed, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 632), (void *)_cffi_d_godot_image_decompressed },
  { "godot_image_destroy", (void *)_cffi_f_godot_image_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 629), (void *)_cffi_d_godot_image_destroy },
  { "godot_image_empty", (void *)_cffi_f_godot_image_empty, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 21), (void *)_cffi_d_godot_image_empty },
  { "godot_image_fix_alpha_edges", (void *)_cffi_f_godot_image_fix_alpha_edges, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 629), (void *)_cffi_d_godot_image_fix_alpha_edges },
  { "godot_image_get_data", (void *)_cffi_f_godot_image_get_data, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 659), (void *)_cffi_d_godot_image_get_data },
  { "godot_image_get_format", (void *)_cffi_f_godot_image_get_format, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 309), (void *)_cffi_d_godot_image_get_format },
  { "godot_image_get_height", (void *)_cffi_f_godot_image_get_height, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 309), (void *)_cffi_d_godot_image_get_height },
  { "godot_image_get_rect", (void *)_cffi_f_godot_image_get_rect, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 636), (void *)_cffi_d_godot_image_get_rect },
  { "godot_image_get_used_rect", (void *)_cffi_f_godot_image_get_used_rect, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 663), (void *)_cffi_d_godot_image_get_used_rect },
  { "godot_image_get_width", (void *)_cffi_f_godot_image_get_width, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 309), (void *)_cffi_d_godot_image_get_width },
  { "godot_image_load", (void *)_cffi_f_godot_image_load, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 312), (void *)_cffi_d_godot_image_load },
  { "godot_image_new", (void *)_cffi_f_godot_image_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 667), (void *)_cffi_d_godot_image_new },
  { "godot_image_resized", (void *)_cffi_f_godot_image_resized, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 646), (void *)_cffi_d_godot_image_resized },
  { "godot_image_save_png", (void *)_cffi_f_godot_image_save_png, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 312), (void *)_cffi_d_godot_image_save_png },
  { "godot_input_event_as_string", (void *)_cffi_f_godot_input_event_as_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 225), (void *)_cffi_d_godot_input_event_as_string },
  { "godot_input_event_get_device", (void *)_cffi_f_godot_input_event_get_device, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 281), (void *)_cffi_d_godot_input_event_get_device },
  { "godot_input_event_get_id", (void *)_cffi_f_godot_input_event_get_id, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 395), (void *)_cffi_d_godot_input_event_get_id },
  { "godot_input_event_get_type", (void *)_cffi_f_godot_input_event_get_type, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 151), (void *)_cffi_d_godot_input_event_get_type },
  { "godot_input_event_is_action", (void *)_cffi_f_godot_input_event_is_action, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 27), (void *)_cffi_d_godot_input_event_is_action },
  { "godot_input_event_is_action_pressed", (void *)_cffi_f_godot_input_event_is_action_pressed, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 27), (void *)_cffi_d_godot_input_event_is_action_pressed },
  { "godot_input_event_is_action_released", (void *)_cffi_f_godot_input_event_is_action_released, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 27), (void *)_cffi_d_godot_input_event_is_action_released },
  { "godot_input_event_is_echo", (void *)_cffi_f_godot_input_event_is_echo, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 24), (void *)_cffi_d_godot_input_event_is_echo },
  { "godot_input_event_is_pressed", (void *)_cffi_f_godot_input_event_is_pressed, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 24), (void *)_cffi_d_godot_input_event_is_pressed },
  { "godot_input_event_joypad_button_get_button_index", (void *)_cffi_f_godot_input_event_joypad_button_get_button_index, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 281), (void *)_cffi_d_godot_input_event_joypad_button_get_button_index },
  { "godot_input_event_joypad_button_get_pressed", (void *)_cffi_f_godot_input_event_joypad_button_get_pressed, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 0), (void *)_cffi_d_godot_input_event_joypad_button_get_pressed },
  { "godot_input_event_joypad_button_get_pressure", (void *)_cffi_f_godot_input_event_joypad_button_get_pressure, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_joypad_button_get_pressure },
  { "godot_input_event_joypad_motion_get_axis", (void *)_cffi_f_godot_input_event_joypad_motion_get_axis, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 281), (void *)_cffi_d_godot_input_event_joypad_motion_get_axis },
  { "godot_input_event_joypad_motion_get_axis_value", (void *)_cffi_f_godot_input_event_joypad_motion_get_axis_value, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_joypad_motion_get_axis_value },
  { "godot_input_event_key_get_echo", (void *)_cffi_f_godot_input_event_key_get_echo, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 0), (void *)_cffi_d_godot_input_event_key_get_echo },
  { "godot_input_event_key_get_pressed", (void *)_cffi_f_godot_input_event_key_get_pressed, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 0), (void *)_cffi_d_godot_input_event_key_get_pressed },
  { "godot_input_event_key_get_scancode", (void *)_cffi_f_godot_input_event_key_get_scancode, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 395), (void *)_cffi_d_godot_input_event_key_get_scancode },
  { "godot_input_event_key_get_unicode", (void *)_cffi_f_godot_input_event_key_get_unicode, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 395), (void *)_cffi_d_godot_input_event_key_get_unicode },
  { "godot_input_event_mod_get_alt", (void *)_cffi_f_godot_input_event_mod_get_alt, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 0), (void *)_cffi_d_godot_input_event_mod_get_alt },
  { "godot_input_event_mod_get_command", (void *)_cffi_f_godot_input_event_mod_get_command, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 0), (void *)_cffi_d_godot_input_event_mod_get_command },
  { "godot_input_event_mod_get_ctrl", (void *)_cffi_f_godot_input_event_mod_get_ctrl, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 0), (void *)_cffi_d_godot_input_event_mod_get_ctrl },
  { "godot_input_event_mod_get_meta", (void *)_cffi_f_godot_input_event_mod_get_meta, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 0), (void *)_cffi_d_godot_input_event_mod_get_meta },
  { "godot_input_event_mod_get_shift", (void *)_cffi_f_godot_input_event_mod_get_shift, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 0), (void *)_cffi_d_godot_input_event_mod_get_shift },
  { "godot_input_event_mouse_button_get_button_index", (void *)_cffi_f_godot_input_event_mouse_button_get_button_index, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 281), (void *)_cffi_d_godot_input_event_mouse_button_get_button_index },
  { "godot_input_event_mouse_button_get_doubleclick", (void *)_cffi_f_godot_input_event_mouse_button_get_doubleclick, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 0), (void *)_cffi_d_godot_input_event_mouse_button_get_doubleclick },
  { "godot_input_event_mouse_button_get_pressed", (void *)_cffi_f_godot_input_event_mouse_button_get_pressed, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 0), (void *)_cffi_d_godot_input_event_mouse_button_get_pressed },
  { "godot_input_event_mouse_get_button_mask", (void *)_cffi_f_godot_input_event_mouse_get_button_mask, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 281), (void *)_cffi_d_godot_input_event_mouse_get_button_mask },
  { "godot_input_event_mouse_get_global_x", (void *)_cffi_f_godot_input_event_mouse_get_global_x, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_mouse_get_global_x },
  { "godot_input_event_mouse_get_global_y", (void *)_cffi_f_godot_input_event_mouse_get_global_y, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_mouse_get_global_y },
  { "godot_input_event_mouse_get_x", (void *)_cffi_f_godot_input_event_mouse_get_x, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_mouse_get_x },
  { "godot_input_event_mouse_get_y", (void *)_cffi_f_godot_input_event_mouse_get_y, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_mouse_get_y },
  { "godot_input_event_mouse_motion_get_relative_x", (void *)_cffi_f_godot_input_event_mouse_motion_get_relative_x, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_mouse_motion_get_relative_x },
  { "godot_input_event_mouse_motion_get_relative_y", (void *)_cffi_f_godot_input_event_mouse_motion_get_relative_y, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_mouse_motion_get_relative_y },
  { "godot_input_event_mouse_motion_get_speed_x", (void *)_cffi_f_godot_input_event_mouse_motion_get_speed_x, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_mouse_motion_get_speed_x },
  { "godot_input_event_mouse_motion_get_speed_y", (void *)_cffi_f_godot_input_event_mouse_motion_get_speed_y, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_mouse_motion_get_speed_y },
  { "godot_input_event_new", (void *)_cffi_f_godot_input_event_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 674), (void *)_cffi_d_godot_input_event_new },
  { "godot_input_event_screen_drag_get_index", (void *)_cffi_f_godot_input_event_screen_drag_get_index, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 281), (void *)_cffi_d_godot_input_event_screen_drag_get_index },
  { "godot_input_event_screen_drag_get_relative_x", (void *)_cffi_f_godot_input_event_screen_drag_get_relative_x, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_screen_drag_get_relative_x },
  { "godot_input_event_screen_drag_get_relative_y", (void *)_cffi_f_godot_input_event_screen_drag_get_relative_y, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_screen_drag_get_relative_y },
  { "godot_input_event_screen_drag_get_speed_x", (void *)_cffi_f_godot_input_event_screen_drag_get_speed_x, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_screen_drag_get_speed_x },
  { "godot_input_event_screen_drag_get_speed_y", (void *)_cffi_f_godot_input_event_screen_drag_get_speed_y, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_screen_drag_get_speed_y },
  { "godot_input_event_screen_drag_get_x", (void *)_cffi_f_godot_input_event_screen_drag_get_x, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_screen_drag_get_x },
  { "godot_input_event_screen_drag_get_y", (void *)_cffi_f_godot_input_event_screen_drag_get_y, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_screen_drag_get_y },
  { "godot_input_event_screen_touch_get_index", (void *)_cffi_f_godot_input_event_screen_touch_get_index, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 281), (void *)_cffi_d_godot_input_event_screen_touch_get_index },
  { "godot_input_event_screen_touch_get_pressed", (void *)_cffi_f_godot_input_event_screen_touch_get_pressed, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 0), (void *)_cffi_d_godot_input_event_screen_touch_get_pressed },
  { "godot_input_event_screen_touch_get_x", (void *)_cffi_f_godot_input_event_screen_touch_get_x, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_screen_touch_get_x },
  { "godot_input_event_screen_touch_get_y", (void *)_cffi_f_godot_input_event_screen_touch_get_y, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 154), (void *)_cffi_d_godot_input_event_screen_touch_get_y },
  { "godot_input_event_set_as_action", (void *)_cffi_f_godot_input_event_set_as_action, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 677), (void *)_cffi_d_godot_input_event_set_as_action },
  { "godot_method_bind_get_method", (void *)_cffi_f_godot_method_bind_get_method, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 218), (void *)_cffi_d_godot_method_bind_get_method },
  { "godot_method_bind_ptrcall", (void *)_cffi_f_godot_method_bind_ptrcall, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 682), (void *)_cffi_d_godot_method_bind_ptrcall },
  { "godot_native_get_userdata", (void *)_cffi_f_godot_native_get_userdata, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 420), (void *)_cffi_d_godot_native_get_userdata },
  { "godot_node_path_as_string", (void *)_cffi_f_godot_node_path_as_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 691), (void *)_cffi_d_godot_node_path_as_string },
  { "godot_node_path_destroy", (void *)_cffi_f_godot_node_path_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 688), (void *)_cffi_d_godot_node_path_destroy },
  { "godot_node_path_get_name", (void *)_cffi_f_godot_node_path_get_name, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 695), (void *)_cffi_d_godot_node_path_get_name },
  { "godot_node_path_get_name_count", (void *)_cffi_f_godot_node_path_get_name_count, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 316), (void *)_cffi_d_godot_node_path_get_name_count },
  { "godot_node_path_get_property", (void *)_cffi_f_godot_node_path_get_property, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 691), (void *)_cffi_d_godot_node_path_get_property },
  { "godot_node_path_get_subname", (void *)_cffi_f_godot_node_path_get_subname, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 695), (void *)_cffi_d_godot_node_path_get_subname },
  { "godot_node_path_get_subname_count", (void *)_cffi_f_godot_node_path_get_subname_count, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 316), (void *)_cffi_d_godot_node_path_get_subname_count },
  { "godot_node_path_is_absolute", (void *)_cffi_f_godot_node_path_is_absolute, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 31), (void *)_cffi_d_godot_node_path_is_absolute },
  { "godot_node_path_is_empty", (void *)_cffi_f_godot_node_path_is_empty, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 31), (void *)_cffi_d_godot_node_path_is_empty },
  { "godot_node_path_new", (void *)_cffi_f_godot_node_path_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 688), (void *)_cffi_d_godot_node_path_new },
  { "godot_object_destroy", (void *)_cffi_f_godot_object_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 1432), (void *)_cffi_d_godot_object_destroy },
  { "godot_plane_as_string", (void *)_cffi_f_godot_plane_as_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 711), (void *)_cffi_d_godot_plane_as_string },
  { "godot_plane_center", (void *)_cffi_f_godot_plane_center, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 715), (void *)_cffi_d_godot_plane_center },
  { "godot_plane_distance_to", (void *)_cffi_f_godot_plane_distance_to, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 167), (void *)_cffi_d_godot_plane_distance_to },
  { "godot_plane_get_any_point", (void *)_cffi_f_godot_plane_get_any_point, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 715), (void *)_cffi_d_godot_plane_get_any_point },
  { "godot_plane_has_point", (void *)_cffi_f_godot_plane_has_point, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 38), (void *)_cffi_d_godot_plane_has_point },
  { "godot_plane_intersect_3", (void *)_cffi_f_godot_plane_intersect_3, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 43), (void *)_cffi_d_godot_plane_intersect_3 },
  { "godot_plane_intersects_ray", (void *)_cffi_f_godot_plane_intersects_ray, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 49), (void *)_cffi_d_godot_plane_intersects_ray },
  { "godot_plane_intersects_segment", (void *)_cffi_f_godot_plane_intersects_segment, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 49), (void *)_cffi_d_godot_plane_intersects_segment },
  { "godot_plane_is_point_over", (void *)_cffi_f_godot_plane_is_point_over, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 34), (void *)_cffi_d_godot_plane_is_point_over },
  { "godot_plane_new1", (void *)_cffi_f_godot_plane_new1, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 700), (void *)_cffi_d_godot_plane_new1 },
  { "godot_plane_new2", (void *)_cffi_f_godot_plane_new2, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 729), (void *)_cffi_d_godot_plane_new2 },
  { "godot_plane_new3", (void *)_cffi_f_godot_plane_new3, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 724), (void *)_cffi_d_godot_plane_new3 },
  { "godot_plane_normalized", (void *)_cffi_f_godot_plane_normalized, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 707), (void *)_cffi_d_godot_plane_normalized },
  { "godot_plane_project", (void *)_cffi_f_godot_plane_project, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 719), (void *)_cffi_d_godot_plane_project },
  { "godot_pool_byte_array_append", (void *)_cffi_f_godot_pool_byte_array_append, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 755), (void *)_cffi_d_godot_pool_byte_array_append },
  { "godot_pool_byte_array_append_array", (void *)_cffi_f_godot_pool_byte_array_append_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 742), (void *)_cffi_d_godot_pool_byte_array_append_array },
  { "godot_pool_byte_array_destroy", (void *)_cffi_f_godot_pool_byte_array_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 735), (void *)_cffi_d_godot_pool_byte_array_destroy },
  { "godot_pool_byte_array_get", (void *)_cffi_f_godot_pool_byte_array_get, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 404), (void *)_cffi_d_godot_pool_byte_array_get },
  { "godot_pool_byte_array_insert", (void *)_cffi_f_godot_pool_byte_array_insert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 322), (void *)_cffi_d_godot_pool_byte_array_insert },
  { "godot_pool_byte_array_invert", (void *)_cffi_f_godot_pool_byte_array_invert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 735), (void *)_cffi_d_godot_pool_byte_array_invert },
  { "godot_pool_byte_array_new", (void *)_cffi_f_godot_pool_byte_array_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 735), (void *)_cffi_d_godot_pool_byte_array_new },
  { "godot_pool_byte_array_new_with_array", (void *)_cffi_f_godot_pool_byte_array_new_with_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 738), (void *)_cffi_d_godot_pool_byte_array_new_with_array },
  { "godot_pool_byte_array_push_back", (void *)_cffi_f_godot_pool_byte_array_push_back, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 755), (void *)_cffi_d_godot_pool_byte_array_push_back },
  { "godot_pool_byte_array_remove", (void *)_cffi_f_godot_pool_byte_array_remove, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 746), (void *)_cffi_d_godot_pool_byte_array_remove },
  { "godot_pool_byte_array_resize", (void *)_cffi_f_godot_pool_byte_array_resize, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 746), (void *)_cffi_d_godot_pool_byte_array_resize },
  { "godot_pool_byte_array_set", (void *)_cffi_f_godot_pool_byte_array_set, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 750), (void *)_cffi_d_godot_pool_byte_array_set },
  { "godot_pool_byte_array_size", (void *)_cffi_f_godot_pool_byte_array_size, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 319), (void *)_cffi_d_godot_pool_byte_array_size },
  { "godot_pool_color_array_append", (void *)_cffi_f_godot_pool_color_array_append, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 766), (void *)_cffi_d_godot_pool_color_array_append },
  { "godot_pool_color_array_append_array", (void *)_cffi_f_godot_pool_color_array_append_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 770), (void *)_cffi_d_godot_pool_color_array_append_array },
  { "godot_pool_color_array_destroy", (void *)_cffi_f_godot_pool_color_array_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 759), (void *)_cffi_d_godot_pool_color_array_destroy },
  { "godot_pool_color_array_get", (void *)_cffi_f_godot_pool_color_array_get, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 212), (void *)_cffi_d_godot_pool_color_array_get },
  { "godot_pool_color_array_insert", (void *)_cffi_f_godot_pool_color_array_insert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 330), (void *)_cffi_d_godot_pool_color_array_insert },
  { "godot_pool_color_array_invert", (void *)_cffi_f_godot_pool_color_array_invert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 759), (void *)_cffi_d_godot_pool_color_array_invert },
  { "godot_pool_color_array_new", (void *)_cffi_f_godot_pool_color_array_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 759), (void *)_cffi_d_godot_pool_color_array_new },
  { "godot_pool_color_array_new_with_array", (void *)_cffi_f_godot_pool_color_array_new_with_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 762), (void *)_cffi_d_godot_pool_color_array_new_with_array },
  { "godot_pool_color_array_push_back", (void *)_cffi_f_godot_pool_color_array_push_back, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 766), (void *)_cffi_d_godot_pool_color_array_push_back },
  { "godot_pool_color_array_remove", (void *)_cffi_f_godot_pool_color_array_remove, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 774), (void *)_cffi_d_godot_pool_color_array_remove },
  { "godot_pool_color_array_resize", (void *)_cffi_f_godot_pool_color_array_resize, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 774), (void *)_cffi_d_godot_pool_color_array_resize },
  { "godot_pool_color_array_set", (void *)_cffi_f_godot_pool_color_array_set, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 778), (void *)_cffi_d_godot_pool_color_array_set },
  { "godot_pool_color_array_size", (void *)_cffi_f_godot_pool_color_array_size, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 327), (void *)_cffi_d_godot_pool_color_array_size },
  { "godot_pool_int_array_append", (void *)_cffi_f_godot_pool_int_array_append, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 794), (void *)_cffi_d_godot_pool_int_array_append },
  { "godot_pool_int_array_append_array", (void *)_cffi_f_godot_pool_int_array_append_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 790), (void *)_cffi_d_godot_pool_int_array_append_array },
  { "godot_pool_int_array_destroy", (void *)_cffi_f_godot_pool_int_array_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 783), (void *)_cffi_d_godot_pool_int_array_destroy },
  { "godot_pool_int_array_get", (void *)_cffi_f_godot_pool_int_array_get, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 338), (void *)_cffi_d_godot_pool_int_array_get },
  { "godot_pool_int_array_insert", (void *)_cffi_f_godot_pool_int_array_insert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 342), (void *)_cffi_d_godot_pool_int_array_insert },
  { "godot_pool_int_array_invert", (void *)_cffi_f_godot_pool_int_array_invert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 783), (void *)_cffi_d_godot_pool_int_array_invert },
  { "godot_pool_int_array_new", (void *)_cffi_f_godot_pool_int_array_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 783), (void *)_cffi_d_godot_pool_int_array_new },
  { "godot_pool_int_array_new_with_array", (void *)_cffi_f_godot_pool_int_array_new_with_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 786), (void *)_cffi_d_godot_pool_int_array_new_with_array },
  { "godot_pool_int_array_push_back", (void *)_cffi_f_godot_pool_int_array_push_back, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 794), (void *)_cffi_d_godot_pool_int_array_push_back },
  { "godot_pool_int_array_remove", (void *)_cffi_f_godot_pool_int_array_remove, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 794), (void *)_cffi_d_godot_pool_int_array_remove },
  { "godot_pool_int_array_resize", (void *)_cffi_f_godot_pool_int_array_resize, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 794), (void *)_cffi_d_godot_pool_int_array_resize },
  { "godot_pool_int_array_set", (void *)_cffi_f_godot_pool_int_array_set, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 798), (void *)_cffi_d_godot_pool_int_array_set },
  { "godot_pool_int_array_size", (void *)_cffi_f_godot_pool_int_array_size, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 335), (void *)_cffi_d_godot_pool_int_array_size },
  { "godot_pool_real_array_append", (void *)_cffi_f_godot_pool_real_array_append, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 806), (void *)_cffi_d_godot_pool_real_array_append },
  { "godot_pool_real_array_append_array", (void *)_cffi_f_godot_pool_real_array_append_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 814), (void *)_cffi_d_godot_pool_real_array_append_array },
  { "godot_pool_real_array_destroy", (void *)_cffi_f_godot_pool_real_array_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 803), (void *)_cffi_d_godot_pool_real_array_destroy },
  { "godot_pool_real_array_get", (void *)_cffi_f_godot_pool_real_array_get, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 171), (void *)_cffi_d_godot_pool_real_array_get },
  { "godot_pool_real_array_insert", (void *)_cffi_f_godot_pool_real_array_insert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 350), (void *)_cffi_d_godot_pool_real_array_insert },
  { "godot_pool_real_array_invert", (void *)_cffi_f_godot_pool_real_array_invert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 803), (void *)_cffi_d_godot_pool_real_array_invert },
  { "godot_pool_real_array_new", (void *)_cffi_f_godot_pool_real_array_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 803), (void *)_cffi_d_godot_pool_real_array_new },
  { "godot_pool_real_array_new_with_array", (void *)_cffi_f_godot_pool_real_array_new_with_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 810), (void *)_cffi_d_godot_pool_real_array_new_with_array },
  { "godot_pool_real_array_push_back", (void *)_cffi_f_godot_pool_real_array_push_back, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 806), (void *)_cffi_d_godot_pool_real_array_push_back },
  { "godot_pool_real_array_remove", (void *)_cffi_f_godot_pool_real_array_remove, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 818), (void *)_cffi_d_godot_pool_real_array_remove },
  { "godot_pool_real_array_resize", (void *)_cffi_f_godot_pool_real_array_resize, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 818), (void *)_cffi_d_godot_pool_real_array_resize },
  { "godot_pool_real_array_set", (void *)_cffi_f_godot_pool_real_array_set, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 822), (void *)_cffi_d_godot_pool_real_array_set },
  { "godot_pool_real_array_size", (void *)_cffi_f_godot_pool_real_array_size, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 347), (void *)_cffi_d_godot_pool_real_array_size },
  { "godot_pool_string_array_append", (void *)_cffi_f_godot_pool_string_array_append, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 838), (void *)_cffi_d_godot_pool_string_array_append },
  { "godot_pool_string_array_append_array", (void *)_cffi_f_godot_pool_string_array_append_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 834), (void *)_cffi_d_godot_pool_string_array_append_array },
  { "godot_pool_string_array_destroy", (void *)_cffi_f_godot_pool_string_array_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 827), (void *)_cffi_d_godot_pool_string_array_destroy },
  { "godot_pool_string_array_get", (void *)_cffi_f_godot_pool_string_array_get, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 228), (void *)_cffi_d_godot_pool_string_array_get },
  { "godot_pool_string_array_insert", (void *)_cffi_f_godot_pool_string_array_insert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 358), (void *)_cffi_d_godot_pool_string_array_insert },
  { "godot_pool_string_array_invert", (void *)_cffi_f_godot_pool_string_array_invert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 827), (void *)_cffi_d_godot_pool_string_array_invert },
  { "godot_pool_string_array_new", (void *)_cffi_f_godot_pool_string_array_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 827), (void *)_cffi_d_godot_pool_string_array_new },
  { "godot_pool_string_array_new_with_array", (void *)_cffi_f_godot_pool_string_array_new_with_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 830), (void *)_cffi_d_godot_pool_string_array_new_with_array },
  { "godot_pool_string_array_push_back", (void *)_cffi_f_godot_pool_string_array_push_back, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 838), (void *)_cffi_d_godot_pool_string_array_push_back },
  { "godot_pool_string_array_remove", (void *)_cffi_f_godot_pool_string_array_remove, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 842), (void *)_cffi_d_godot_pool_string_array_remove },
  { "godot_pool_string_array_resize", (void *)_cffi_f_godot_pool_string_array_resize, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 842), (void *)_cffi_d_godot_pool_string_array_resize },
  { "godot_pool_string_array_set", (void *)_cffi_f_godot_pool_string_array_set, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 846), (void *)_cffi_d_godot_pool_string_array_set },
  { "godot_pool_string_array_size", (void *)_cffi_f_godot_pool_string_array_size, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 355), (void *)_cffi_d_godot_pool_string_array_size },
  { "godot_pool_vector2_array_append", (void *)_cffi_f_godot_pool_vector2_array_append, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 862), (void *)_cffi_d_godot_pool_vector2_array_append },
  { "godot_pool_vector2_array_append_array", (void *)_cffi_f_godot_pool_vector2_array_append_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 858), (void *)_cffi_d_godot_pool_vector2_array_append_array },
  { "godot_pool_vector2_array_destroy", (void *)_cffi_f_godot_pool_vector2_array_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 851), (void *)_cffi_d_godot_pool_vector2_array_destroy },
  { "godot_pool_vector2_array_get", (void *)_cffi_f_godot_pool_vector2_array_get, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 257), (void *)_cffi_d_godot_pool_vector2_array_get },
  { "godot_pool_vector2_array_insert", (void *)_cffi_f_godot_pool_vector2_array_insert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 366), (void *)_cffi_d_godot_pool_vector2_array_insert },
  { "godot_pool_vector2_array_invert", (void *)_cffi_f_godot_pool_vector2_array_invert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 851), (void *)_cffi_d_godot_pool_vector2_array_invert },
  { "godot_pool_vector2_array_new", (void *)_cffi_f_godot_pool_vector2_array_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 851), (void *)_cffi_d_godot_pool_vector2_array_new },
  { "godot_pool_vector2_array_new_with_array", (void *)_cffi_f_godot_pool_vector2_array_new_with_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 854), (void *)_cffi_d_godot_pool_vector2_array_new_with_array },
  { "godot_pool_vector2_array_push_back", (void *)_cffi_f_godot_pool_vector2_array_push_back, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 862), (void *)_cffi_d_godot_pool_vector2_array_push_back },
  { "godot_pool_vector2_array_remove", (void *)_cffi_f_godot_pool_vector2_array_remove, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 866), (void *)_cffi_d_godot_pool_vector2_array_remove },
  { "godot_pool_vector2_array_resize", (void *)_cffi_f_godot_pool_vector2_array_resize, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 866), (void *)_cffi_d_godot_pool_vector2_array_resize },
  { "godot_pool_vector2_array_set", (void *)_cffi_f_godot_pool_vector2_array_set, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 870), (void *)_cffi_d_godot_pool_vector2_array_set },
  { "godot_pool_vector2_array_size", (void *)_cffi_f_godot_pool_vector2_array_size, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 363), (void *)_cffi_d_godot_pool_vector2_array_size },
  { "godot_pool_vector3_array_append", (void *)_cffi_f_godot_pool_vector3_array_append, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 886), (void *)_cffi_d_godot_pool_vector3_array_append },
  { "godot_pool_vector3_array_append_array", (void *)_cffi_f_godot_pool_vector3_array_append_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 882), (void *)_cffi_d_godot_pool_vector3_array_append_array },
  { "godot_pool_vector3_array_destroy", (void *)_cffi_f_godot_pool_vector3_array_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 875), (void *)_cffi_d_godot_pool_vector3_array_destroy },
  { "godot_pool_vector3_array_get", (void *)_cffi_f_godot_pool_vector3_array_get, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 269), (void *)_cffi_d_godot_pool_vector3_array_get },
  { "godot_pool_vector3_array_insert", (void *)_cffi_f_godot_pool_vector3_array_insert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 374), (void *)_cffi_d_godot_pool_vector3_array_insert },
  { "godot_pool_vector3_array_invert", (void *)_cffi_f_godot_pool_vector3_array_invert, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 875), (void *)_cffi_d_godot_pool_vector3_array_invert },
  { "godot_pool_vector3_array_new", (void *)_cffi_f_godot_pool_vector3_array_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 875), (void *)_cffi_d_godot_pool_vector3_array_new },
  { "godot_pool_vector3_array_new_with_array", (void *)_cffi_f_godot_pool_vector3_array_new_with_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 878), (void *)_cffi_d_godot_pool_vector3_array_new_with_array },
  { "godot_pool_vector3_array_push_back", (void *)_cffi_f_godot_pool_vector3_array_push_back, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 886), (void *)_cffi_d_godot_pool_vector3_array_push_back },
  { "godot_pool_vector3_array_remove", (void *)_cffi_f_godot_pool_vector3_array_remove, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 890), (void *)_cffi_d_godot_pool_vector3_array_remove },
  { "godot_pool_vector3_array_resize", (void *)_cffi_f_godot_pool_vector3_array_resize, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 890), (void *)_cffi_d_godot_pool_vector3_array_resize },
  { "godot_pool_vector3_array_set", (void *)_cffi_f_godot_pool_vector3_array_set, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 894), (void *)_cffi_d_godot_pool_vector3_array_set },
  { "godot_pool_vector3_array_size", (void *)_cffi_f_godot_pool_vector3_array_size, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 371), (void *)_cffi_d_godot_pool_vector3_array_size },
  { "godot_quat_as_string", (void *)_cffi_f_godot_quat_as_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 924), (void *)_cffi_d_godot_quat_as_string },
  { "godot_quat_cubic_slerp", (void *)_cffi_f_godot_quat_cubic_slerp, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 916), (void *)_cffi_d_godot_quat_cubic_slerp },
  { "godot_quat_dot", (void *)_cffi_f_godot_quat_dot, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 178), (void *)_cffi_d_godot_quat_dot },
  { "godot_quat_inverse", (void *)_cffi_f_godot_quat_inverse, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 906), (void *)_cffi_d_godot_quat_inverse },
  { "godot_quat_length", (void *)_cffi_f_godot_quat_length, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 175), (void *)_cffi_d_godot_quat_length },
  { "godot_quat_length_squared", (void *)_cffi_f_godot_quat_length_squared, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 175), (void *)_cffi_d_godot_quat_length_squared },
  { "godot_quat_new1", (void *)_cffi_f_godot_quat_new1, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 899), (void *)_cffi_d_godot_quat_new1 },
  { "godot_quat_new2", (void *)_cffi_f_godot_quat_new2, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 933), (void *)_cffi_d_godot_quat_new2 },
  { "godot_quat_normalized", (void *)_cffi_f_godot_quat_normalized, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 906), (void *)_cffi_d_godot_quat_normalized },
  { "godot_quat_slerp", (void *)_cffi_f_godot_quat_slerp, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 910), (void *)_cffi_d_godot_quat_slerp },
  { "godot_quat_slerpni", (void *)_cffi_f_godot_quat_slerpni, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 910), (void *)_cffi_d_godot_quat_slerpni },
  { "godot_quat_xform", (void *)_cffi_f_godot_quat_xform, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 928), (void *)_cffi_d_godot_quat_xform },
  { "godot_realloc", (void *)_cffi_f_godot_realloc, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 423), (void *)_cffi_d_godot_realloc },
  { "godot_rect2_as_string", (void *)_cffi_f_godot_rect2_as_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 960), (void *)_cffi_d_godot_rect2_as_string },
  { "godot_rect2_clip", (void *)_cffi_f_godot_rect2_clip, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 950), (void *)_cffi_d_godot_rect2_clip },
  { "godot_rect2_encloses", (void *)_cffi_f_godot_rect2_encloses, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 58), (void *)_cffi_d_godot_rect2_encloses },
  { "godot_rect2_expand", (void *)_cffi_f_godot_rect2_expand, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 955), (void *)_cffi_d_godot_rect2_expand },
  { "godot_rect2_get_area", (void *)_cffi_f_godot_rect2_get_area, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 182), (void *)_cffi_d_godot_rect2_get_area },
  { "godot_rect2_grow", (void *)_cffi_f_godot_rect2_grow, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 945), (void *)_cffi_d_godot_rect2_grow },
  { "godot_rect2_has_no_area", (void *)_cffi_f_godot_rect2_has_no_area, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 55), (void *)_cffi_d_godot_rect2_has_no_area },
  { "godot_rect2_has_point", (void *)_cffi_f_godot_rect2_has_point, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 62), (void *)_cffi_d_godot_rect2_has_point },
  { "godot_rect2_intersects", (void *)_cffi_f_godot_rect2_intersects, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 58), (void *)_cffi_d_godot_rect2_intersects },
  { "godot_rect2_merge", (void *)_cffi_f_godot_rect2_merge, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 950), (void *)_cffi_d_godot_rect2_merge },
  { "godot_rect2_new", (void *)_cffi_f_godot_rect2_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 938), (void *)_cffi_d_godot_rect2_new },
  { "godot_rect2_new1", (void *)_cffi_f_godot_rect2_new1, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 964), (void *)_cffi_d_godot_rect2_new1 },
  { "godot_rect3_as_string", (void *)_cffi_f_godot_rect3_as_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 984), (void *)_cffi_d_godot_rect3_as_string },
  { "godot_rect3_encloses", (void *)_cffi_f_godot_rect3_encloses, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 73), (void *)_cffi_d_godot_rect3_encloses },
  { "godot_rect3_expand", (void *)_cffi_f_godot_rect3_expand, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 979), (void *)_cffi_d_godot_rect3_expand },
  { "godot_rect3_get_area", (void *)_cffi_f_godot_rect3_get_area, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 185), (void *)_cffi_d_godot_rect3_get_area },
  { "godot_rect3_get_endpoint", (void *)_cffi_f_godot_rect3_get_endpoint, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 997), (void *)_cffi_d_godot_rect3_get_endpoint },
  { "godot_rect3_get_longest_axis", (void *)_cffi_f_godot_rect3_get_longest_axis, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 988), (void *)_cffi_d_godot_rect3_get_longest_axis },
  { "godot_rect3_get_longest_axis_index", (void *)_cffi_f_godot_rect3_get_longest_axis_index, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 379), (void *)_cffi_d_godot_rect3_get_longest_axis_index },
  { "godot_rect3_get_longest_axis_size", (void *)_cffi_f_godot_rect3_get_longest_axis_size, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 185), (void *)_cffi_d_godot_rect3_get_longest_axis_size },
  { "godot_rect3_get_shortest_axis", (void *)_cffi_f_godot_rect3_get_shortest_axis, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 988), (void *)_cffi_d_godot_rect3_get_shortest_axis },
  { "godot_rect3_get_shortest_axis_index", (void *)_cffi_f_godot_rect3_get_shortest_axis_index, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 379), (void *)_cffi_d_godot_rect3_get_shortest_axis_index },
  { "godot_rect3_get_shortest_axis_size", (void *)_cffi_f_godot_rect3_get_shortest_axis_size, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 185), (void *)_cffi_d_godot_rect3_get_shortest_axis_size },
  { "godot_rect3_get_support", (void *)_cffi_f_godot_rect3_get_support, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 992), (void *)_cffi_d_godot_rect3_get_support },
  { "godot_rect3_grow", (void *)_cffi_f_godot_rect3_grow, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 969), (void *)_cffi_d_godot_rect3_grow },
  { "godot_rect3_has_no_area", (void *)_cffi_f_godot_rect3_has_no_area, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 66), (void *)_cffi_d_godot_rect3_has_no_area },
  { "godot_rect3_has_no_surface", (void *)_cffi_f_godot_rect3_has_no_surface, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 66), (void *)_cffi_d_godot_rect3_has_no_surface },
  { "godot_rect3_has_point", (void *)_cffi_f_godot_rect3_has_point, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 77), (void *)_cffi_d_godot_rect3_has_point },
  { "godot_rect3_intersection", (void *)_cffi_f_godot_rect3_intersection, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 974), (void *)_cffi_d_godot_rect3_intersection },
  { "godot_rect3_intersects", (void *)_cffi_f_godot_rect3_intersects, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 73), (void *)_cffi_d_godot_rect3_intersects },
  { "godot_rect3_intersects_plane", (void *)_cffi_f_godot_rect3_intersects_plane, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 69), (void *)_cffi_d_godot_rect3_intersects_plane },
  { "godot_rect3_intersects_segment", (void *)_cffi_f_godot_rect3_intersects_segment, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 81), (void *)_cffi_d_godot_rect3_intersects_segment },
  { "godot_rect3_merge", (void *)_cffi_f_godot_rect3_merge, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 974), (void *)_cffi_d_godot_rect3_merge },
  { "godot_rect3_new", (void *)_cffi_f_godot_rect3_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1002), (void *)_cffi_d_godot_rect3_new },
  { "godot_rid_get_id", (void *)_cffi_f_godot_rid_get_id, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 382), (void *)_cffi_d_godot_rid_get_id },
  { "godot_rid_new", (void *)_cffi_f_godot_rid_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 1007), (void *)_cffi_d_godot_rid_new },
  { "godot_script_register_class", (void *)_cffi_f_godot_script_register_class, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 439), (void *)_cffi_d_godot_script_register_class },
  { "godot_script_register_method", (void *)_cffi_f_godot_script_register_method, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 445), (void *)_cffi_d_godot_script_register_method },
  { "godot_script_register_property", (void *)_cffi_f_godot_script_register_property, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 451), (void *)_cffi_d_godot_script_register_property },
  { "godot_script_register_signal", (void *)_cffi_f_godot_script_register_signal, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 458), (void *)_cffi_d_godot_script_register_signal },
  { "godot_script_register_tool_class", (void *)_cffi_f_godot_script_register_tool_class, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 439), (void *)_cffi_d_godot_script_register_tool_class },
  { "godot_string_c_str", (void *)_cffi_f_godot_string_c_str, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 145), (void *)_cffi_d_godot_string_c_str },
  { "godot_string_copy_string", (void *)_cffi_f_godot_string_copy_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1033), (void *)_cffi_d_godot_string_copy_string },
  { "godot_string_destroy", (void *)_cffi_f_godot_string_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 1010), (void *)_cffi_d_godot_string_destroy },
  { "godot_string_get_data", (void *)_cffi_f_godot_string_get_data, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1028), (void *)_cffi_d_godot_string_get_data },
  { "godot_string_new", (void *)_cffi_f_godot_string_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 1010), (void *)_cffi_d_godot_string_new },
  { "godot_string_new_data", (void *)_cffi_f_godot_string_new_data, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1013), (void *)_cffi_d_godot_string_new_data },
  { "godot_string_new_unicode_data", (void *)_cffi_f_godot_string_new_unicode_data, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1023), (void *)_cffi_d_godot_string_new_unicode_data },
  { "godot_string_operator_equal", (void *)_cffi_f_godot_string_operator_equal, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 86), (void *)_cffi_d_godot_string_operator_equal },
  { "godot_string_operator_index", (void *)_cffi_f_godot_string_operator_index, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1462), (void *)_cffi_d_godot_string_operator_index },
  { "godot_string_operator_less", (void *)_cffi_f_godot_string_operator_less, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 86), (void *)_cffi_d_godot_string_operator_less },
  { "godot_string_operator_plus", (void *)_cffi_f_godot_string_operator_plus, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1018), (void *)_cffi_d_godot_string_operator_plus },
  { "godot_string_unicode_str", (void *)_cffi_f_godot_string_unicode_str, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 1466), (void *)_cffi_d_godot_string_unicode_str },
  { "godot_transform2d_affine_inverse", (void *)_cffi_f_godot_transform2d_affine_inverse, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1083), (void *)_cffi_d_godot_transform2d_affine_inverse },
  { "godot_transform2d_as_string", (void *)_cffi_f_godot_transform2d_as_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1079), (void *)_cffi_d_godot_transform2d_as_string },
  { "godot_transform2d_get_origin", (void *)_cffi_f_godot_transform2d_get_origin, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1103), (void *)_cffi_d_godot_transform2d_get_origin },
  { "godot_transform2d_get_rotation", (void *)_cffi_f_godot_transform2d_get_rotation, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 188), (void *)_cffi_d_godot_transform2d_get_rotation },
  { "godot_transform2d_get_scale", (void *)_cffi_f_godot_transform2d_get_scale, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1103), (void *)_cffi_d_godot_transform2d_get_scale },
  { "godot_transform2d_interpolate_with", (void *)_cffi_f_godot_transform2d_interpolate_with, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1092), (void *)_cffi_d_godot_transform2d_interpolate_with },
  { "godot_transform2d_inverse", (void *)_cffi_f_godot_transform2d_inverse, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1083), (void *)_cffi_d_godot_transform2d_inverse },
  { "godot_transform2d_new2", (void *)_cffi_f_godot_transform2d_new2, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1074), (void *)_cffi_d_godot_transform2d_new2 },
  { "godot_transform2d_new3", (void *)_cffi_f_godot_transform2d_new3, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1107), (void *)_cffi_d_godot_transform2d_new3 },
  { "godot_transform2d_orthonormalized", (void *)_cffi_f_godot_transform2d_orthonormalized, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1083), (void *)_cffi_d_godot_transform2d_orthonormalized },
  { "godot_transform2d_rotated", (void *)_cffi_f_godot_transform2d_rotated, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1087), (void *)_cffi_d_godot_transform2d_rotated },
  { "godot_transform2d_scaled", (void *)_cffi_f_godot_transform2d_scaled, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1098), (void *)_cffi_d_godot_transform2d_scaled },
  { "godot_transform2d_translated", (void *)_cffi_f_godot_transform2d_translated, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1098), (void *)_cffi_d_godot_transform2d_translated },
  { "godot_transform_affine_inverse", (void *)_cffi_f_godot_transform_affine_inverse, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1046), (void *)_cffi_d_godot_transform_affine_inverse },
  { "godot_transform_as_string", (void *)_cffi_f_godot_transform_as_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1042), (void *)_cffi_d_godot_transform_as_string },
  { "godot_transform_inverse", (void *)_cffi_f_godot_transform_inverse, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1046), (void *)_cffi_d_godot_transform_inverse },
  { "godot_transform_looking_at", (void *)_cffi_f_godot_transform_looking_at, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1061), (void *)_cffi_d_godot_transform_looking_at },
  { "godot_transform_new1", (void *)_cffi_f_godot_transform_new1, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1067), (void *)_cffi_d_godot_transform_new1 },
  { "godot_transform_new2", (void *)_cffi_f_godot_transform_new2, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1037), (void *)_cffi_d_godot_transform_new2 },
  { "godot_transform_orthonormalized", (void *)_cffi_f_godot_transform_orthonormalized, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1046), (void *)_cffi_d_godot_transform_orthonormalized },
  { "godot_transform_rotated", (void *)_cffi_f_godot_transform_rotated, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1055), (void *)_cffi_d_godot_transform_rotated },
  { "godot_transform_scaled", (void *)_cffi_f_godot_transform_scaled, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1050), (void *)_cffi_d_godot_transform_scaled },
  { "godot_transform_translated", (void *)_cffi_f_godot_transform_translated, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1050), (void *)_cffi_d_godot_transform_translated },
  { "godot_variant_as_array", (void *)_cffi_f_godot_variant_as_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1243), (void *)_cffi_d_godot_variant_as_array },
  { "godot_variant_as_basis", (void *)_cffi_f_godot_variant_as_basis, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1247), (void *)_cffi_d_godot_variant_as_basis },
  { "godot_variant_as_bool", (void *)_cffi_f_godot_variant_as_bool, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 90), (void *)_cffi_d_godot_variant_as_bool },
  { "godot_variant_as_color", (void *)_cffi_f_godot_variant_as_color, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1251), (void *)_cffi_d_godot_variant_as_color },
  { "godot_variant_as_dictionary", (void *)_cffi_f_godot_variant_as_dictionary, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1255), (void *)_cffi_d_godot_variant_as_dictionary },
  { "godot_variant_as_image", (void *)_cffi_f_godot_variant_as_image, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1259), (void *)_cffi_d_godot_variant_as_image },
  { "godot_variant_as_input_event", (void *)_cffi_f_godot_variant_as_input_event, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1263), (void *)_cffi_d_godot_variant_as_input_event },
  { "godot_variant_as_int", (void *)_cffi_f_godot_variant_as_int, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 392), (void *)_cffi_d_godot_variant_as_int },
  { "godot_variant_as_node_path", (void *)_cffi_f_godot_variant_as_node_path, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1267), (void *)_cffi_d_godot_variant_as_node_path },
  { "godot_variant_as_object", (void *)_cffi_f_godot_variant_as_object, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 411), (void *)_cffi_d_godot_variant_as_object },
  { "godot_variant_as_plane", (void *)_cffi_f_godot_variant_as_plane, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1271), (void *)_cffi_d_godot_variant_as_plane },
  { "godot_variant_as_pool_byte_array", (void *)_cffi_f_godot_variant_as_pool_byte_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1275), (void *)_cffi_d_godot_variant_as_pool_byte_array },
  { "godot_variant_as_pool_color_array", (void *)_cffi_f_godot_variant_as_pool_color_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1279), (void *)_cffi_d_godot_variant_as_pool_color_array },
  { "godot_variant_as_pool_int_array", (void *)_cffi_f_godot_variant_as_pool_int_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1283), (void *)_cffi_d_godot_variant_as_pool_int_array },
  { "godot_variant_as_pool_real_array", (void *)_cffi_f_godot_variant_as_pool_real_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1287), (void *)_cffi_d_godot_variant_as_pool_real_array },
  { "godot_variant_as_pool_string_array", (void *)_cffi_f_godot_variant_as_pool_string_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1291), (void *)_cffi_d_godot_variant_as_pool_string_array },
  { "godot_variant_as_pool_vector2_array", (void *)_cffi_f_godot_variant_as_pool_vector2_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1295), (void *)_cffi_d_godot_variant_as_pool_vector2_array },
  { "godot_variant_as_pool_vector3_array", (void *)_cffi_f_godot_variant_as_pool_vector3_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1299), (void *)_cffi_d_godot_variant_as_pool_vector3_array },
  { "godot_variant_as_quat", (void *)_cffi_f_godot_variant_as_quat, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1303), (void *)_cffi_d_godot_variant_as_quat },
  { "godot_variant_as_real", (void *)_cffi_f_godot_variant_as_real, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 148), (void *)_cffi_d_godot_variant_as_real },
  { "godot_variant_as_rect2", (void *)_cffi_f_godot_variant_as_rect2, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1307), (void *)_cffi_d_godot_variant_as_rect2 },
  { "godot_variant_as_rect3", (void *)_cffi_f_godot_variant_as_rect3, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1311), (void *)_cffi_d_godot_variant_as_rect3 },
  { "godot_variant_as_rid", (void *)_cffi_f_godot_variant_as_rid, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1315), (void *)_cffi_d_godot_variant_as_rid },
  { "godot_variant_as_string", (void *)_cffi_f_godot_variant_as_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1319), (void *)_cffi_d_godot_variant_as_string },
  { "godot_variant_as_transform", (void *)_cffi_f_godot_variant_as_transform, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1323), (void *)_cffi_d_godot_variant_as_transform },
  { "godot_variant_as_transform2d", (void *)_cffi_f_godot_variant_as_transform2d, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1327), (void *)_cffi_d_godot_variant_as_transform2d },
  { "godot_variant_as_uint", (void *)_cffi_f_godot_variant_as_uint, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 401), (void *)_cffi_d_godot_variant_as_uint },
  { "godot_variant_as_vector2", (void *)_cffi_f_godot_variant_as_vector2, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1331), (void *)_cffi_d_godot_variant_as_vector2 },
  { "godot_variant_as_vector3", (void *)_cffi_f_godot_variant_as_vector3, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1335), (void *)_cffi_d_godot_variant_as_vector3 },
  { "godot_variant_booleanize", (void *)_cffi_f_godot_variant_booleanize, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 93), (void *)_cffi_d_godot_variant_booleanize },
  { "godot_variant_call", (void *)_cffi_f_godot_variant_call, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1212), (void *)_cffi_d_godot_variant_call },
  { "godot_variant_copy", (void *)_cffi_f_godot_variant_copy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1219), (void *)_cffi_d_godot_variant_copy },
  { "godot_variant_destroy", (void *)_cffi_f_godot_variant_destroy, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 1113), (void *)_cffi_d_godot_variant_destroy },
  { "godot_variant_get_type", (void *)_cffi_f_godot_variant_get_type, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 254), (void *)_cffi_d_godot_variant_get_type },
  { "godot_variant_has_method", (void *)_cffi_f_godot_variant_has_method, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 97), (void *)_cffi_d_godot_variant_has_method },
  { "godot_variant_hash_compare", (void *)_cffi_f_godot_variant_hash_compare, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 101), (void *)_cffi_d_godot_variant_hash_compare },
  { "godot_variant_new_array", (void *)_cffi_f_godot_variant_new_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1124), (void *)_cffi_d_godot_variant_new_array },
  { "godot_variant_new_basis", (void *)_cffi_f_godot_variant_new_basis, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1128), (void *)_cffi_d_godot_variant_new_basis },
  { "godot_variant_new_bool", (void *)_cffi_f_godot_variant_new_bool, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1116), (void *)_cffi_d_godot_variant_new_bool },
  { "godot_variant_new_color", (void *)_cffi_f_godot_variant_new_color, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1132), (void *)_cffi_d_godot_variant_new_color },
  { "godot_variant_new_dictionary", (void *)_cffi_f_godot_variant_new_dictionary, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1136), (void *)_cffi_d_godot_variant_new_dictionary },
  { "godot_variant_new_image", (void *)_cffi_f_godot_variant_new_image, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1140), (void *)_cffi_d_godot_variant_new_image },
  { "godot_variant_new_input_event", (void *)_cffi_f_godot_variant_new_input_event, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1144), (void *)_cffi_d_godot_variant_new_input_event },
  { "godot_variant_new_int", (void *)_cffi_f_godot_variant_new_int, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1231), (void *)_cffi_d_godot_variant_new_int },
  { "godot_variant_new_nil", (void *)_cffi_f_godot_variant_new_nil, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 1113), (void *)_cffi_d_godot_variant_new_nil },
  { "godot_variant_new_node_path", (void *)_cffi_f_godot_variant_new_node_path, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1148), (void *)_cffi_d_godot_variant_new_node_path },
  { "godot_variant_new_object", (void *)_cffi_f_godot_variant_new_object, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1239), (void *)_cffi_d_godot_variant_new_object },
  { "godot_variant_new_plane", (void *)_cffi_f_godot_variant_new_plane, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1152), (void *)_cffi_d_godot_variant_new_plane },
  { "godot_variant_new_pool_byte_array", (void *)_cffi_f_godot_variant_new_pool_byte_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1156), (void *)_cffi_d_godot_variant_new_pool_byte_array },
  { "godot_variant_new_pool_color_array", (void *)_cffi_f_godot_variant_new_pool_color_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1160), (void *)_cffi_d_godot_variant_new_pool_color_array },
  { "godot_variant_new_pool_int_array", (void *)_cffi_f_godot_variant_new_pool_int_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1164), (void *)_cffi_d_godot_variant_new_pool_int_array },
  { "godot_variant_new_pool_real_array", (void *)_cffi_f_godot_variant_new_pool_real_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1168), (void *)_cffi_d_godot_variant_new_pool_real_array },
  { "godot_variant_new_pool_string_array", (void *)_cffi_f_godot_variant_new_pool_string_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1172), (void *)_cffi_d_godot_variant_new_pool_string_array },
  { "godot_variant_new_pool_vector2_array", (void *)_cffi_f_godot_variant_new_pool_vector2_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1176), (void *)_cffi_d_godot_variant_new_pool_vector2_array },
  { "godot_variant_new_pool_vector3_array", (void *)_cffi_f_godot_variant_new_pool_vector3_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1180), (void *)_cffi_d_godot_variant_new_pool_vector3_array },
  { "godot_variant_new_quat", (void *)_cffi_f_godot_variant_new_quat, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1184), (void *)_cffi_d_godot_variant_new_quat },
  { "godot_variant_new_real", (void *)_cffi_f_godot_variant_new_real, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1120), (void *)_cffi_d_godot_variant_new_real },
  { "godot_variant_new_rect2", (void *)_cffi_f_godot_variant_new_rect2, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1188), (void *)_cffi_d_godot_variant_new_rect2 },
  { "godot_variant_new_rect3", (void *)_cffi_f_godot_variant_new_rect3, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1192), (void *)_cffi_d_godot_variant_new_rect3 },
  { "godot_variant_new_rid", (void *)_cffi_f_godot_variant_new_rid, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1196), (void *)_cffi_d_godot_variant_new_rid },
  { "godot_variant_new_string", (void *)_cffi_f_godot_variant_new_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1200), (void *)_cffi_d_godot_variant_new_string },
  { "godot_variant_new_transform", (void *)_cffi_f_godot_variant_new_transform, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1204), (void *)_cffi_d_godot_variant_new_transform },
  { "godot_variant_new_transform2d", (void *)_cffi_f_godot_variant_new_transform2d, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1208), (void *)_cffi_d_godot_variant_new_transform2d },
  { "godot_variant_new_uint", (void *)_cffi_f_godot_variant_new_uint, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1235), (void *)_cffi_d_godot_variant_new_uint },
  { "godot_variant_new_vector2", (void *)_cffi_f_godot_variant_new_vector2, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1223), (void *)_cffi_d_godot_variant_new_vector2 },
  { "godot_variant_new_vector3", (void *)_cffi_f_godot_variant_new_vector3, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1227), (void *)_cffi_d_godot_variant_new_vector3 },
  { "godot_variant_operator_equal", (void *)_cffi_f_godot_variant_operator_equal, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 101), (void *)_cffi_d_godot_variant_operator_equal },
  { "godot_variant_operator_less", (void *)_cffi_f_godot_variant_operator_less, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 101), (void *)_cffi_d_godot_variant_operator_less },
  { "godot_vector2_abs", (void *)_cffi_f_godot_vector2_abs, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1352), (void *)_cffi_d_godot_vector2_abs },
  { "godot_vector2_angle", (void *)_cffi_f_godot_vector2_angle, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 191), (void *)_cffi_d_godot_vector2_angle },
  { "godot_vector2_angle_to", (void *)_cffi_f_godot_vector2_angle_to, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 194), (void *)_cffi_d_godot_vector2_angle_to },
  { "godot_vector2_angle_to_point", (void *)_cffi_f_godot_vector2_angle_to_point, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 194), (void *)_cffi_d_godot_vector2_angle_to_point },
  { "godot_vector2_as_string", (void *)_cffi_f_godot_vector2_as_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1348), (void *)_cffi_d_godot_vector2_as_string },
  { "godot_vector2_aspect", (void *)_cffi_f_godot_vector2_aspect, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 191), (void *)_cffi_d_godot_vector2_aspect },
  { "godot_vector2_bounce", (void *)_cffi_f_godot_vector2_bounce, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1361), (void *)_cffi_d_godot_vector2_bounce },
  { "godot_vector2_clamped", (void *)_cffi_f_godot_vector2_clamped, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1356), (void *)_cffi_d_godot_vector2_clamped },
  { "godot_vector2_cubic_interpolate", (void *)_cffi_f_godot_vector2_cubic_interpolate, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1372), (void *)_cffi_d_godot_vector2_cubic_interpolate },
  { "godot_vector2_distance_squared_to", (void *)_cffi_f_godot_vector2_distance_squared_to, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 194), (void *)_cffi_d_godot_vector2_distance_squared_to },
  { "godot_vector2_distance_to", (void *)_cffi_f_godot_vector2_distance_to, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 194), (void *)_cffi_d_godot_vector2_distance_to },
  { "godot_vector2_dot", (void *)_cffi_f_godot_vector2_dot, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 194), (void *)_cffi_d_godot_vector2_dot },
  { "godot_vector2_floor", (void *)_cffi_f_godot_vector2_floor, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1352), (void *)_cffi_d_godot_vector2_floor },
  { "godot_vector2_get_x", (void *)_cffi_f_godot_vector2_get_x, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 198), (void *)_cffi_d_godot_vector2_get_x },
  { "godot_vector2_get_y", (void *)_cffi_f_godot_vector2_get_y, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 198), (void *)_cffi_d_godot_vector2_get_y },
  { "godot_vector2_length", (void *)_cffi_f_godot_vector2_length, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 191), (void *)_cffi_d_godot_vector2_length },
  { "godot_vector2_length_squared", (void *)_cffi_f_godot_vector2_length_squared, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 191), (void *)_cffi_d_godot_vector2_length_squared },
  { "godot_vector2_linear_interpolate", (void *)_cffi_f_godot_vector2_linear_interpolate, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1366), (void *)_cffi_d_godot_vector2_linear_interpolate },
  { "godot_vector2_new", (void *)_cffi_f_godot_vector2_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1343), (void *)_cffi_d_godot_vector2_new },
  { "godot_vector2_normalized", (void *)_cffi_f_godot_vector2_normalized, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1352), (void *)_cffi_d_godot_vector2_normalized },
  { "godot_vector2_operator_add", (void *)_cffi_f_godot_vector2_operator_add, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 265), (void *)_cffi_d_godot_vector2_operator_add },
  { "godot_vector2_operator_divide_scalar", (void *)_cffi_f_godot_vector2_operator_divide_scalar, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 261), (void *)_cffi_d_godot_vector2_operator_divide_scalar },
  { "godot_vector2_operator_divide_vector", (void *)_cffi_f_godot_vector2_operator_divide_vector, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 265), (void *)_cffi_d_godot_vector2_operator_divide_vector },
  { "godot_vector2_operator_equal", (void *)_cffi_f_godot_vector2_operator_equal, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 105), (void *)_cffi_d_godot_vector2_operator_equal },
  { "godot_vector2_operator_less", (void *)_cffi_f_godot_vector2_operator_less, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 105), (void *)_cffi_d_godot_vector2_operator_less },
  { "godot_vector2_operator_multiply_scalar", (void *)_cffi_f_godot_vector2_operator_multiply_scalar, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 261), (void *)_cffi_d_godot_vector2_operator_multiply_scalar },
  { "godot_vector2_operator_multiply_vector", (void *)_cffi_f_godot_vector2_operator_multiply_vector, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 265), (void *)_cffi_d_godot_vector2_operator_multiply_vector },
  { "godot_vector2_operator_subtract", (void *)_cffi_f_godot_vector2_operator_subtract, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 265), (void *)_cffi_d_godot_vector2_operator_subtract },
  { "godot_vector2_reflect", (void *)_cffi_f_godot_vector2_reflect, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1361), (void *)_cffi_d_godot_vector2_reflect },
  { "godot_vector2_rotated", (void *)_cffi_f_godot_vector2_rotated, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1356), (void *)_cffi_d_godot_vector2_rotated },
  { "godot_vector2_set_x", (void *)_cffi_f_godot_vector2_set_x, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1339), (void *)_cffi_d_godot_vector2_set_x },
  { "godot_vector2_set_y", (void *)_cffi_f_godot_vector2_set_y, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1339), (void *)_cffi_d_godot_vector2_set_y },
  { "godot_vector2_slide", (void *)_cffi_f_godot_vector2_slide, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1361), (void *)_cffi_d_godot_vector2_slide },
  { "godot_vector2_snapped", (void *)_cffi_f_godot_vector2_snapped, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1361), (void *)_cffi_d_godot_vector2_snapped },
  { "godot_vector2_tangent", (void *)_cffi_f_godot_vector2_tangent, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1352), (void *)_cffi_d_godot_vector2_tangent },
  { "godot_vector3_abs", (void *)_cffi_f_godot_vector3_abs, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1399), (void *)_cffi_d_godot_vector3_abs },
  { "godot_vector3_angle_to", (void *)_cffi_f_godot_vector3_angle_to, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 204), (void *)_cffi_d_godot_vector3_angle_to },
  { "godot_vector3_as_string", (void *)_cffi_f_godot_vector3_as_string, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1395), (void *)_cffi_d_godot_vector3_as_string },
  { "godot_vector3_bounce", (void *)_cffi_f_godot_vector3_bounce, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1408), (void *)_cffi_d_godot_vector3_bounce },
  { "godot_vector3_ceil", (void *)_cffi_f_godot_vector3_ceil, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1399), (void *)_cffi_d_godot_vector3_ceil },
  { "godot_vector3_cross", (void *)_cffi_f_godot_vector3_cross, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1408), (void *)_cffi_d_godot_vector3_cross },
  { "godot_vector3_cubic_interpolate", (void *)_cffi_f_godot_vector3_cubic_interpolate, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1419), (void *)_cffi_d_godot_vector3_cubic_interpolate },
  { "godot_vector3_distance_squared_to", (void *)_cffi_f_godot_vector3_distance_squared_to, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 204), (void *)_cffi_d_godot_vector3_distance_squared_to },
  { "godot_vector3_distance_to", (void *)_cffi_f_godot_vector3_distance_to, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 204), (void *)_cffi_d_godot_vector3_distance_to },
  { "godot_vector3_dot", (void *)_cffi_f_godot_vector3_dot, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 204), (void *)_cffi_d_godot_vector3_dot },
  { "godot_vector3_floor", (void *)_cffi_f_godot_vector3_floor, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1399), (void *)_cffi_d_godot_vector3_floor },
  { "godot_vector3_get_axis", (void *)_cffi_f_godot_vector3_get_axis, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 208), (void *)_cffi_d_godot_vector3_get_axis },
  { "godot_vector3_inverse", (void *)_cffi_f_godot_vector3_inverse, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1399), (void *)_cffi_d_godot_vector3_inverse },
  { "godot_vector3_length", (void *)_cffi_f_godot_vector3_length, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 201), (void *)_cffi_d_godot_vector3_length },
  { "godot_vector3_length_squared", (void *)_cffi_f_godot_vector3_length_squared, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 201), (void *)_cffi_d_godot_vector3_length_squared },
  { "godot_vector3_linear_interpolate", (void *)_cffi_f_godot_vector3_linear_interpolate, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1413), (void *)_cffi_d_godot_vector3_linear_interpolate },
  { "godot_vector3_max_axis", (void *)_cffi_f_godot_vector3_max_axis, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 385), (void *)_cffi_d_godot_vector3_max_axis },
  { "godot_vector3_min_axis", (void *)_cffi_f_godot_vector3_min_axis, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 385), (void *)_cffi_d_godot_vector3_min_axis },
  { "godot_vector3_new", (void *)_cffi_f_godot_vector3_new, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1380), (void *)_cffi_d_godot_vector3_new },
  { "godot_vector3_normalized", (void *)_cffi_f_godot_vector3_normalized, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1399), (void *)_cffi_d_godot_vector3_normalized },
  { "godot_vector3_operator_add", (void *)_cffi_f_godot_vector3_operator_add, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 277), (void *)_cffi_d_godot_vector3_operator_add },
  { "godot_vector3_operator_divide_scalar", (void *)_cffi_f_godot_vector3_operator_divide_scalar, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 273), (void *)_cffi_d_godot_vector3_operator_divide_scalar },
  { "godot_vector3_operator_divide_vector", (void *)_cffi_f_godot_vector3_operator_divide_vector, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 277), (void *)_cffi_d_godot_vector3_operator_divide_vector },
  { "godot_vector3_operator_equal", (void *)_cffi_f_godot_vector3_operator_equal, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 109), (void *)_cffi_d_godot_vector3_operator_equal },
  { "godot_vector3_operator_less", (void *)_cffi_f_godot_vector3_operator_less, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 109), (void *)_cffi_d_godot_vector3_operator_less },
  { "godot_vector3_operator_multiply_scalar", (void *)_cffi_f_godot_vector3_operator_multiply_scalar, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 273), (void *)_cffi_d_godot_vector3_operator_multiply_scalar },
  { "godot_vector3_operator_multiply_vector", (void *)_cffi_f_godot_vector3_operator_multiply_vector, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 277), (void *)_cffi_d_godot_vector3_operator_multiply_vector },
  { "godot_vector3_operator_subtract", (void *)_cffi_f_godot_vector3_operator_subtract, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 277), (void *)_cffi_d_godot_vector3_operator_subtract },
  { "godot_vector3_outer", (void *)_cffi_f_godot_vector3_outer, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1390), (void *)_cffi_d_godot_vector3_outer },
  { "godot_vector3_reflect", (void *)_cffi_f_godot_vector3_reflect, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1408), (void *)_cffi_d_godot_vector3_reflect },
  { "godot_vector3_rotated", (void *)_cffi_f_godot_vector3_rotated, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1413), (void *)_cffi_d_godot_vector3_rotated },
  { "godot_vector3_set_axis", (void *)_cffi_f_godot_vector3_set_axis, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1427), (void *)_cffi_d_godot_vector3_set_axis },
  { "godot_vector3_slide", (void *)_cffi_f_godot_vector3_slide, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1408), (void *)_cffi_d_godot_vector3_slide },
  { "godot_vector3_snapped", (void *)_cffi_f_godot_vector3_snapped, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1403), (void *)_cffi_d_godot_vector3_snapped },
  { "godot_vector3_to_diagonal_matrix", (void *)_cffi_f_godot_vector3_to_diagonal_matrix, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 1386), (void *)_cffi_d_godot_vector3_to_diagonal_matrix },
  { "malloc", (void *)_cffi_f_malloc, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 417), (void *)_cffi_d_malloc },
  { "pybind_call_meth", (void *)&_cffi_externpy__pybind_call_meth, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1551), (void *)pybind_call_meth },
  { "pybind_get_class_name", (void *)&_cffi_externpy__pybind_get_class_name, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1547), (void *)pybind_get_class_name },
  { "pybind_get_meth_info", (void *)&_cffi_externpy__pybind_get_meth_info, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1473), (void *)pybind_get_meth_info },
  { "pybind_get_meth_list", (void *)&_cffi_externpy__pybind_get_meth_list, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1514), (void *)pybind_get_meth_list },
  { "pybind_get_prop", (void *)&_cffi_externpy__pybind_get_prop, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1471), (void *)pybind_get_prop },
  { "pybind_get_prop_default_value", (void *)&_cffi_externpy__pybind_get_prop_default_value, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1471), (void *)pybind_get_prop_default_value },
  { "pybind_get_prop_info", (void *)&_cffi_externpy__pybind_get_prop_info, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1474), (void *)pybind_get_prop_info },
  { "pybind_get_prop_list", (void *)&_cffi_externpy__pybind_get_prop_list, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1514), (void *)pybind_get_prop_list },
  { "pybind_get_prop_type", (void *)&_cffi_externpy__pybind_get_prop_type, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1473), (void *)pybind_get_prop_type },
  { "pybind_get_rpc_mode", (void *)&_cffi_externpy__pybind_get_rpc_mode, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1521), (void *)pybind_get_rpc_mode },
  { "pybind_get_rset_mode", (void *)&_cffi_externpy__pybind_get_rset_mode, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1521), (void *)pybind_get_rset_mode },
  { "pybind_get_signal_info", (void *)&_cffi_externpy__pybind_get_signal_info, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1473), (void *)pybind_get_signal_info },
  { "pybind_get_signal_list", (void *)&_cffi_externpy__pybind_get_signal_list, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1514), (void *)pybind_get_signal_list },
  { "pybind_has_meth", (void *)&_cffi_externpy__pybind_has_meth, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1470), (void *)pybind_has_meth },
  { "pybind_has_signal", (void *)&_cffi_externpy__pybind_has_signal, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1470), (void *)pybind_has_signal },
  { "pybind_init_sys_path_and_argv", (void *)&_cffi_externpy__pybind_init_sys_path_and_argv, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1475), (void *)pybind_init_sys_path_and_argv },
  { "pybind_instanciate_from_classname", (void *)&_cffi_externpy__pybind_instanciate_from_classname, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1545), (void *)pybind_instanciate_from_classname },
  { "pybind_is_tool", (void *)&_cffi_externpy__pybind_is_tool, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1469), (void *)pybind_is_tool },
  { "pybind_load_exposed_class_per_module", (void *)&_cffi_externpy__pybind_load_exposed_class_per_module, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1545), (void *)pybind_load_exposed_class_per_module },
  { "pybind_notification", (void *)&_cffi_externpy__pybind_notification, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1548), (void *)pybind_notification },
  { "pybind_release_instance", (void *)&_cffi_externpy__pybind_release_instance, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1546), (void *)pybind_release_instance },
  { "pybind_set_prop", (void *)&_cffi_externpy__pybind_set_prop, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1472), (void *)pybind_set_prop },
  { "pybind_wrap_gdobj_with_class", (void *)&_cffi_externpy__pybind_wrap_gdobj_with_class, _CFFI_OP(_CFFI_OP_EXTERN_PYTHON, 1543), (void *)pybind_wrap_gdobj_with_class },
};

static const struct _cffi_field_s _cffi_fields[] = {
  { "type", offsetof(pybind_prop_info, type),
            sizeof(((pybind_prop_info *)0)->type),
            _CFFI_OP(_CFFI_OP_NOOP, 173) },
  { "name", offsetof(pybind_prop_info, name),
            sizeof(((pybind_prop_info *)0)->name),
            _CFFI_OP(_CFFI_OP_NOOP, 1515) },
  { "hint", offsetof(pybind_prop_info, hint),
            sizeof(((pybind_prop_info *)0)->hint),
            _CFFI_OP(_CFFI_OP_NOOP, 173) },
  { "hint_string", offsetof(pybind_prop_info, hint_string),
                   sizeof(((pybind_prop_info *)0)->hint_string),
                   _CFFI_OP(_CFFI_OP_NOOP, 1515) },
  { "usage", offsetof(pybind_prop_info, usage),
             sizeof(((pybind_prop_info *)0)->usage),
             _CFFI_OP(_CFFI_OP_NOOP, 1524) },
  { "_dont_touch_that", offsetof(godot_array, _dont_touch_that),
                        sizeof(((godot_array *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1541) },
  { "_dont_touch_that", offsetof(godot_basis, _dont_touch_that),
                        sizeof(((godot_basis *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1535) },
  { "_dont_touch_that", offsetof(godot_color, _dont_touch_that),
                        sizeof(((godot_color *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1527) },
  { "_dont_touch_that", offsetof(godot_dictionary, _dont_touch_that),
                        sizeof(((godot_dictionary *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1541) },
  { "_dont_touch_that", offsetof(godot_image, _dont_touch_that),
                        sizeof(((godot_image *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1533) },
  { "_dont_touch_that", offsetof(godot_input_event, _dont_touch_that),
                        sizeof(((godot_input_event *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1539) },
  { "create_func", offsetof(godot_instance_create_func, create_func),
                   sizeof(((godot_instance_create_func *)0)->create_func),
                   _CFFI_OP(_CFFI_OP_NOOP, 1543) },
  { "method_data", offsetof(godot_instance_create_func, method_data),
                   sizeof(((godot_instance_create_func *)0)->method_data),
                   _CFFI_OP(_CFFI_OP_NOOP, 114) },
  { "free_func", offsetof(godot_instance_create_func, free_func),
                 sizeof(((godot_instance_create_func *)0)->free_func),
                 _CFFI_OP(_CFFI_OP_NOOP, 1546) },
  { "destroy_func", offsetof(godot_instance_destroy_func, destroy_func),
                    sizeof(((godot_instance_destroy_func *)0)->destroy_func),
                    _CFFI_OP(_CFFI_OP_NOOP, 1549) },
  { "method_data", offsetof(godot_instance_destroy_func, method_data),
                   sizeof(((godot_instance_destroy_func *)0)->method_data),
                   _CFFI_OP(_CFFI_OP_NOOP, 114) },
  { "free_func", offsetof(godot_instance_destroy_func, free_func),
                 sizeof(((godot_instance_destroy_func *)0)->free_func),
                 _CFFI_OP(_CFFI_OP_NOOP, 1546) },
  { "method", offsetof(godot_instance_method, method),
              sizeof(((godot_instance_method *)0)->method),
              _CFFI_OP(_CFFI_OP_NOOP, 1519) },
  { "method_data", offsetof(godot_instance_method, method_data),
                   sizeof(((godot_instance_method *)0)->method_data),
                   _CFFI_OP(_CFFI_OP_NOOP, 114) },
  { "free_func", offsetof(godot_instance_method, free_func),
                 sizeof(((godot_instance_method *)0)->free_func),
                 _CFFI_OP(_CFFI_OP_NOOP, 1546) },
  { "rpc_type", offsetof(godot_method_attributes, rpc_type),
                sizeof(((godot_method_attributes *)0)->rpc_type),
                _CFFI_OP(_CFFI_OP_NOOP, 1492) },
  { "_dont_touch_that", offsetof(godot_method_bind, _dont_touch_that),
                        sizeof(((godot_method_bind *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1529) },
  { "in_editor", offsetof(godot_native_init_options, in_editor),
                 sizeof(((godot_native_init_options *)0)->in_editor),
                 _CFFI_OP(_CFFI_OP_NOOP, 607) },
  { "core_api_hash", offsetof(godot_native_init_options, core_api_hash),
                     sizeof(((godot_native_init_options *)0)->core_api_hash),
                     _CFFI_OP(_CFFI_OP_NOOP, 1237) },
  { "editor_api_hash", offsetof(godot_native_init_options, editor_api_hash),
                       sizeof(((godot_native_init_options *)0)->editor_api_hash),
                       _CFFI_OP(_CFFI_OP_NOOP, 1237) },
  { "no_api_hash", offsetof(godot_native_init_options, no_api_hash),
                   sizeof(((godot_native_init_options *)0)->no_api_hash),
                   _CFFI_OP(_CFFI_OP_NOOP, 1237) },
  { "in_editor", offsetof(godot_native_terminate_options, in_editor),
                 sizeof(((godot_native_terminate_options *)0)->in_editor),
                 _CFFI_OP(_CFFI_OP_NOOP, 607) },
  { "_dont_touch_that", offsetof(godot_node_path, _dont_touch_that),
                        sizeof(((godot_node_path *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1541) },
  { "_dont_touch_that", offsetof(godot_plane, _dont_touch_that),
                        sizeof(((godot_plane *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1527) },
  { "_dont_touch_that", offsetof(godot_pool_byte_array, _dont_touch_that),
                        sizeof(((godot_pool_byte_array *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1541) },
  { "_dont_touch_that", offsetof(godot_pool_color_array, _dont_touch_that),
                        sizeof(((godot_pool_color_array *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1541) },
  { "_dont_touch_that", offsetof(godot_pool_int_array, _dont_touch_that),
                        sizeof(((godot_pool_int_array *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1541) },
  { "_dont_touch_that", offsetof(godot_pool_real_array, _dont_touch_that),
                        sizeof(((godot_pool_real_array *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1541) },
  { "_dont_touch_that", offsetof(godot_pool_string_array, _dont_touch_that),
                        sizeof(((godot_pool_string_array *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1541) },
  { "_dont_touch_that", offsetof(godot_pool_vector2_array, _dont_touch_that),
                        sizeof(((godot_pool_vector2_array *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1541) },
  { "_dont_touch_that", offsetof(godot_pool_vector3_array, _dont_touch_that),
                        sizeof(((godot_pool_vector3_array *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1541) },
  { "rset_type", offsetof(godot_property_attributes, rset_type),
                 sizeof(((godot_property_attributes *)0)->rset_type),
                 _CFFI_OP(_CFFI_OP_NOOP, 1492) },
  { "type", offsetof(godot_property_attributes, type),
            sizeof(((godot_property_attributes *)0)->type),
            _CFFI_OP(_CFFI_OP_NOOP, 173) },
  { "hint", offsetof(godot_property_attributes, hint),
            sizeof(((godot_property_attributes *)0)->hint),
            _CFFI_OP(_CFFI_OP_NOOP, 1505) },
  { "hint_string", offsetof(godot_property_attributes, hint_string),
                   sizeof(((godot_property_attributes *)0)->hint_string),
                   _CFFI_OP(_CFFI_OP_NOOP, 1515) },
  { "usage", offsetof(godot_property_attributes, usage),
             sizeof(((godot_property_attributes *)0)->usage),
             _CFFI_OP(_CFFI_OP_NOOP, 1506) },
  { "default_value", offsetof(godot_property_attributes, default_value),
                     sizeof(((godot_property_attributes *)0)->default_value),
                     _CFFI_OP(_CFFI_OP_NOOP, 1452) },
  { "get_func", offsetof(godot_property_get_func, get_func),
                sizeof(((godot_property_get_func *)0)->get_func),
                _CFFI_OP(_CFFI_OP_NOOP, 1518) },
  { "method_data", offsetof(godot_property_get_func, method_data),
                   sizeof(((godot_property_get_func *)0)->method_data),
                   _CFFI_OP(_CFFI_OP_NOOP, 114) },
  { "free_func", offsetof(godot_property_get_func, free_func),
                 sizeof(((godot_property_get_func *)0)->free_func),
                 _CFFI_OP(_CFFI_OP_NOOP, 1546) },
  { "set_func", offsetof(godot_property_set_func, set_func),
                sizeof(((godot_property_set_func *)0)->set_func),
                _CFFI_OP(_CFFI_OP_NOOP, 1550) },
  { "method_data", offsetof(godot_property_set_func, method_data),
                   sizeof(((godot_property_set_func *)0)->method_data),
                   _CFFI_OP(_CFFI_OP_NOOP, 114) },
  { "free_func", offsetof(godot_property_set_func, free_func),
                 sizeof(((godot_property_set_func *)0)->free_func),
                 _CFFI_OP(_CFFI_OP_NOOP, 1546) },
  { "_dont_touch_that", offsetof(godot_quat, _dont_touch_that),
                        sizeof(((godot_quat *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1527) },
  { "_dont_touch_that", offsetof(godot_rect2, _dont_touch_that),
                        sizeof(((godot_rect2 *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1527) },
  { "_dont_touch_that", offsetof(godot_rect3, _dont_touch_that),
                        sizeof(((godot_rect3 *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1531) },
  { "_dont_touch_that", offsetof(godot_rid, _dont_touch_that),
                        sizeof(((godot_rid *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1541) },
  { "name", offsetof(godot_signal, name),
            sizeof(((godot_signal *)0)->name),
            _CFFI_OP(_CFFI_OP_NOOP, 1515) },
  { "num_args", offsetof(godot_signal, num_args),
                sizeof(((godot_signal *)0)->num_args),
                _CFFI_OP(_CFFI_OP_NOOP, 173) },
  { "args", offsetof(godot_signal, args),
            sizeof(((godot_signal *)0)->args),
            _CFFI_OP(_CFFI_OP_NOOP, 1512) },
  { "num_default_args", offsetof(godot_signal, num_default_args),
                        sizeof(((godot_signal *)0)->num_default_args),
                        _CFFI_OP(_CFFI_OP_NOOP, 173) },
  { "default_args", offsetof(godot_signal, default_args),
                    sizeof(((godot_signal *)0)->default_args),
                    _CFFI_OP(_CFFI_OP_NOOP, 123) },
  { "name", offsetof(godot_signal_argument, name),
            sizeof(((godot_signal_argument *)0)->name),
            _CFFI_OP(_CFFI_OP_NOOP, 1515) },
  { "type", offsetof(godot_signal_argument, type),
            sizeof(((godot_signal_argument *)0)->type),
            _CFFI_OP(_CFFI_OP_NOOP, 173) },
  { "hint", offsetof(godot_signal_argument, hint),
            sizeof(((godot_signal_argument *)0)->hint),
            _CFFI_OP(_CFFI_OP_NOOP, 1505) },
  { "hint_string", offsetof(godot_signal_argument, hint_string),
                   sizeof(((godot_signal_argument *)0)->hint_string),
                   _CFFI_OP(_CFFI_OP_NOOP, 1515) },
  { "usage", offsetof(godot_signal_argument, usage),
             sizeof(((godot_signal_argument *)0)->usage),
             _CFFI_OP(_CFFI_OP_NOOP, 1506) },
  { "default_value", offsetof(godot_signal_argument, default_value),
                     sizeof(((godot_signal_argument *)0)->default_value),
                     _CFFI_OP(_CFFI_OP_NOOP, 1452) },
  { "_dont_touch_that", offsetof(godot_string, _dont_touch_that),
                        sizeof(((godot_string *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1541) },
  { "_dont_touch_that", offsetof(godot_transform, _dont_touch_that),
                        sizeof(((godot_transform *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1537) },
  { "_dont_touch_that", offsetof(godot_transform2d, _dont_touch_that),
                        sizeof(((godot_transform2d *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1531) },
  { "_dont_touch_that", offsetof(godot_variant, _dont_touch_that),
                        sizeof(((godot_variant *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1531) },
  { "_dont_touch_that", offsetof(godot_vector2, _dont_touch_that),
                        sizeof(((godot_vector2 *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1541) },
  { "_dont_touch_that", offsetof(godot_vector3, _dont_touch_that),
                        sizeof(((godot_vector3 *)0)->_dont_touch_that),
                        _CFFI_OP(_CFFI_OP_NOOP, 1525) },
};

static const struct _cffi_struct_union_s _cffi_struct_unions[] = {
  { "$pybind_prop_info", 1522, _CFFI_F_CHECK_FIELDS,
    sizeof(pybind_prop_info), offsetof(struct _cffi_align_typedef_pybind_prop_info, y), 0, 5 },
  { "godot_array", 1483, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_array), offsetof(struct _cffi_align__godot_array, y), 5, 1 },
  { "godot_basis", 1484, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_basis), offsetof(struct _cffi_align__godot_basis, y), 6, 1 },
  { "godot_color", 1485, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_color), offsetof(struct _cffi_align__godot_color, y), 7, 1 },
  { "godot_dictionary", 1486, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_dictionary), offsetof(struct _cffi_align__godot_dictionary, y), 8, 1 },
  { "godot_image", 1488, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_image), offsetof(struct _cffi_align__godot_image, y), 9, 1 },
  { "godot_input_event", 1490, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_input_event), offsetof(struct _cffi_align__godot_input_event, y), 10, 1 },
  { "godot_instance_create_func", 442, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_instance_create_func), offsetof(struct _cffi_align__godot_instance_create_func, y), 11, 3 },
  { "godot_instance_destroy_func", 443, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_instance_destroy_func), offsetof(struct _cffi_align__godot_instance_destroy_func, y), 14, 3 },
  { "godot_instance_method", 449, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_instance_method), offsetof(struct _cffi_align__godot_instance_method, y), 17, 3 },
  { "godot_method_attributes", 448, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_method_attributes), offsetof(struct _cffi_align__godot_method_attributes, y), 20, 1 },
  { "godot_method_bind", 1491, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_method_bind), offsetof(struct _cffi_align__godot_method_bind, y), 21, 1 },
  { "godot_native_init_options", 1493, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_native_init_options), offsetof(struct _cffi_align__godot_native_init_options, y), 22, 4 },
  { "godot_native_terminate_options", 1494, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_native_terminate_options), offsetof(struct _cffi_align__godot_native_terminate_options, y), 26, 1 },
  { "godot_node_path", 1495, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_node_path), offsetof(struct _cffi_align__godot_node_path, y), 27, 1 },
  { "godot_plane", 1496, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_plane), offsetof(struct _cffi_align__godot_plane, y), 28, 1 },
  { "godot_pool_byte_array", 1497, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_pool_byte_array), offsetof(struct _cffi_align__godot_pool_byte_array, y), 29, 1 },
  { "godot_pool_color_array", 1498, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_pool_color_array), offsetof(struct _cffi_align__godot_pool_color_array, y), 30, 1 },
  { "godot_pool_int_array", 1499, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_pool_int_array), offsetof(struct _cffi_align__godot_pool_int_array, y), 31, 1 },
  { "godot_pool_real_array", 1500, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_pool_real_array), offsetof(struct _cffi_align__godot_pool_real_array, y), 32, 1 },
  { "godot_pool_string_array", 1501, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_pool_string_array), offsetof(struct _cffi_align__godot_pool_string_array, y), 33, 1 },
  { "godot_pool_vector2_array", 1502, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_pool_vector2_array), offsetof(struct _cffi_align__godot_pool_vector2_array, y), 34, 1 },
  { "godot_pool_vector3_array", 1503, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_pool_vector3_array), offsetof(struct _cffi_align__godot_pool_vector3_array, y), 35, 1 },
  { "godot_property_attributes", 1504, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_property_attributes), offsetof(struct _cffi_align__godot_property_attributes, y), 36, 6 },
  { "godot_property_get_func", 456, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_property_get_func), offsetof(struct _cffi_align__godot_property_get_func, y), 42, 3 },
  { "godot_property_set_func", 455, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_property_set_func), offsetof(struct _cffi_align__godot_property_set_func, y), 45, 3 },
  { "godot_quat", 1507, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_quat), offsetof(struct _cffi_align__godot_quat, y), 48, 1 },
  { "godot_rect2", 1508, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_rect2), offsetof(struct _cffi_align__godot_rect2, y), 49, 1 },
  { "godot_rect3", 1509, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_rect3), offsetof(struct _cffi_align__godot_rect3, y), 50, 1 },
  { "godot_rid", 1510, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_rid), offsetof(struct _cffi_align__godot_rid, y), 51, 1 },
  { "godot_signal", 1511, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_signal), offsetof(struct _cffi_align__godot_signal, y), 52, 5 },
  { "godot_signal_argument", 1513, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_signal_argument), offsetof(struct _cffi_align__godot_signal_argument, y), 57, 6 },
  { "godot_string", 1515, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_string), offsetof(struct _cffi_align__godot_string, y), 63, 1 },
  { "godot_transform", 1517, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_transform), offsetof(struct _cffi_align__godot_transform, y), 64, 1 },
  { "godot_transform2d", 1516, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_transform2d), offsetof(struct _cffi_align__godot_transform2d, y), 65, 1 },
  { "godot_variant", 1452, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_variant), offsetof(struct _cffi_align__godot_variant, y), 66, 1 },
  { "godot_vector2", 107, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_vector2), offsetof(struct _cffi_align__godot_vector2, y), 67, 1 },
  { "godot_vector3", 111, _CFFI_F_CHECK_FIELDS,
    sizeof(godot_vector3), offsetof(struct _cffi_align__godot_vector3, y), 68, 1 },
};

static const struct _cffi_enum_s _cffi_enums[] = {
  { "$1", 1477, _cffi_prim_int(4, 0),
    "GODOT_BUTTON_LEFT,GODOT_BUTTON_RIGHT,GODOT_BUTTON_MIDDLE,GODOT_BUTTON_WHEEL_UP,GODOT_BUTTON_WHEEL_DOWN,GODOT_BUTTON_WHEEL_LEFT,GODOT_BUTTON_WHEEL_RIGHT,GODOT_BUTTON_MASK_LEFT,GODOT_BUTTON_MASK_RIGHT,GODOT_BUTTON_MASK_MIDDLE" },
  { "$2", 1478, _cffi_prim_int(4, 0),
    "GODOT_JOY_BUTTON_0,GODOT_JOY_BUTTON_1,GODOT_JOY_BUTTON_2,GODOT_JOY_BUTTON_3,GODOT_JOY_BUTTON_4,GODOT_JOY_BUTTON_5,GODOT_JOY_BUTTON_6,GODOT_JOY_BUTTON_7,GODOT_JOY_BUTTON_8,GODOT_JOY_BUTTON_9,GODOT_JOY_BUTTON_10,GODOT_JOY_BUTTON_11,GODOT_JOY_BUTTON_12,GODOT_JOY_BUTTON_13,GODOT_JOY_BUTTON_14,GODOT_JOY_BUTTON_15,GODOT_JOY_BUTTON_MAX,GODOT_JOY_L,GODOT_JOY_R,GODOT_JOY_L2,GODOT_JOY_R2,GODOT_JOY_L3,GODOT_JOY_R3,GODOT_JOY_SELECT,GODOT_JOY_START,GODOT_JOY_DPAD_UP,GODOT_JOY_DPAD_DOWN,GODOT_JOY_DPAD_LEFT,GODOT_JOY_DPAD_RIGHT,GODOT_JOY_SNES_B,GODOT_JOY_SNES_A,GODOT_JOY_SNES_Y,GODOT_JOY_SNES_X,GODOT_JOY_SONY_CIRCLE,GODOT_JOY_SONY_X,GODOT_JOY_SONY_SQUARE,GODOT_JOY_SONY_TRIANGLE,GODOT_JOY_SEGA_B,GODOT_JOY_SEGA_A,GODOT_JOY_SEGA_X,GODOT_JOY_SEGA_Y,GODOT_JOY_XBOX_B,GODOT_JOY_XBOX_A,GODOT_JOY_XBOX_X,GODOT_JOY_XBOX_Y,GODOT_JOY_DS_A,GODOT_JOY_DS_B,GODOT_JOY_DS_X,GODOT_JOY_DS_Y,GODOT_JOY_WII_C,GODOT_JOY_WII_Z,GODOT_JOY_WII_MINUS,GODOT_JOY_WII_PLUS,GODOT_JOY_AXIS_0,GODOT_JOY_AXIS_1,GODOT_JOY_AXIS_2,GODOT_JOY_AXIS_3,GODOT_JOY_AXIS_4,GODOT_JOY_AXIS_5,GODOT_JOY_AXIS_6,GODOT_JOY_AXIS_7,GODOT_JOY_AXIS_MAX,GODOT_JOY_ANALOG_0_X,GODOT_JOY_ANALOG_0_Y,GODOT_JOY_ANALOG_1_X,GODOT_JOY_ANALOG_1_Y,GODOT_JOY_ANALOG_2_X,GODOT_JOY_ANALOG_2_Y,GODOT_JOY_ANALOG_L2,GODOT_JOY_ANALOG_R2" },
  { "$godot_image_format", 1489, _cffi_prim_int(sizeof(godot_image_format), ((godot_image_format)-1) <= 0),
    "GODOT_IMAGE_FORMAT_L8,GODOT_IMAGE_FORMAT_LA8,GODOT_IMAGE_FORMAT_R8,GODOT_IMAGE_FORMAT_RG8,GODOT_IMAGE_FORMAT_RGB8,GODOT_IMAGE_FORMAT_RGBA8,GODOT_IMAGE_FORMAT_RGB565,GODOT_IMAGE_FORMAT_RGBA4444,GODOT_IMAGE_FORMAT_RGBA5551,GODOT_IMAGE_FORMAT_RF,GODOT_IMAGE_FORMAT_RGF,GODOT_IMAGE_FORMAT_RGBF,GODOT_IMAGE_FORMAT_RGBAF,GODOT_IMAGE_FORMAT_RH,GODOT_IMAGE_FORMAT_RGH,GODOT_IMAGE_FORMAT_RGBH,GODOT_IMAGE_FORMAT_RGBAH,GODOT_IMAGE_FORMAT_DXT1,GODOT_IMAGE_FORMAT_DXT3,GODOT_IMAGE_FORMAT_DXT5,GODOT_IMAGE_FORMAT_ATI1,GODOT_IMAGE_FORMAT_ATI2,GODOT_IMAGE_FORMAT_BPTC_RGBA,GODOT_IMAGE_FORMAT_BPTC_RGBF,GODOT_IMAGE_FORMAT_BPTC_RGBFU,GODOT_IMAGE_FORMAT_PVRTC2,GODOT_IMAGE_FORMAT_PVRTC2A,GODOT_IMAGE_FORMAT_PVRTC4,GODOT_IMAGE_FORMAT_PVRTC4A,GODOT_IMAGE_FORMAT_ETC,GODOT_IMAGE_FORMAT_ETC2_R11,GODOT_IMAGE_FORMAT_ETC2_R11S,GODOT_IMAGE_FORMAT_ETC2_RG11,GODOT_IMAGE_FORMAT_ETC2_RG11S,GODOT_IMAGE_FORMAT_ETC2_RGB8,GODOT_IMAGE_FORMAT_ETC2_RGBA8,GODOT_IMAGE_FORMAT_ETC2_RGB8A1,GODOT_IMAGE_FORMAT_MAX" },
  { "MethodFlags", 1479, _cffi_prim_int(sizeof(enum MethodFlags), ((enum MethodFlags)-1) <= 0),
    "METHOD_FLAG_NORMAL,METHOD_FLAG_EDITOR,METHOD_FLAG_NOSCRIPT,METHOD_FLAG_CONST,METHOD_FLAG_REVERSE,METHOD_FLAG_VIRTUAL,METHOD_FLAG_FROM_SCRIPT,METHOD_FLAG_VARARG,METHOD_FLAGS_DEFAULT" },
  { "godot_error", 1487, _cffi_prim_int(sizeof(godot_error), ((godot_error)-1) <= 0),
    "GODOT_OK,GODOT_FAILED,GODOT_ERR_UNAVAILABLE,GODOT_ERR_UNCONFIGURED,GODOT_ERR_UNAUTHORIZED,GODOT_ERR_PARAMETER_RANGE_ERROR,GODOT_ERR_OUT_OF_MEMORY,GODOT_ERR_FILE_NOT_FOUND,GODOT_ERR_FILE_BAD_DRIVE,GODOT_ERR_FILE_BAD_PATH,GODOT_ERR_FILE_NO_PERMISSION,GODOT_ERR_FILE_ALREADY_IN_USE,GODOT_ERR_FILE_CANT_OPEN,GODOT_ERR_FILE_CANT_WRITE,GODOT_ERR_FILE_CANT_READ,GODOT_ERR_FILE_UNRECOGNIZED,GODOT_ERR_FILE_CORRUPT,GODOT_ERR_FILE_MISSING_DEPENDENCIES,GODOT_ERR_FILE_EOF,GODOT_ERR_CANT_OPEN,GODOT_ERR_CANT_CREATE,GODOT_ERR_QUERY_FAILED,GODOT_ERR_ALREADY_IN_USE,GODOT_ERR_LOCKED,GODOT_ERR_TIMEOUT,GODOT_ERR_CANT_CONNECT,GODOT_ERR_CANT_RESOLVE,GODOT_ERR_CONNECTION_ERROR,GODOT_ERR_CANT_AQUIRE_RESOURCE,GODOT_ERR_CANT_FORK,GODOT_ERR_INVALID_DATA,GODOT_ERR_INVALID_PARAMETER,GODOT_ERR_ALREADY_EXISTS,GODOT_ERR_DOES_NOT_EXIST,GODOT_ERR_DATABASE_CANT_READ,GODOT_ERR_DATABASE_CANT_WRITE,GODOT_ERR_COMPILATION_FAILED,GODOT_ERR_METHOD_NOT_FOUND,GODOT_ERR_LINK_FAILED,GODOT_ERR_SCRIPT_FAILED,GODOT_ERR_CYCLIC_LINK,GODOT_ERR_INVALID_DECLARATION,GODOT_ERR_DUPLICATE_SYMBOL,GODOT_ERR_PARSE_ERROR,GODOT_ERR_BUSY,GODOT_ERR_SKIP,GODOT_ERR_HELP,GODOT_ERR_BUG,GODOT_ERR_PRINTER_ON_FIRE,GODOT_ERR_OMFG_THIS_IS_VERY_VERY_BAD,GODOT_ERR_WTF" },
  { "godot_input_event_type", 1481, _cffi_prim_int(sizeof(enum godot_input_event_type), ((enum godot_input_event_type)-1) <= 0),
    "GODOT_INPUT_EVENT_TYPE_NONE,GODOT_INPUT_EVENT_TYPE_KEY,GODOT_INPUT_EVENT_TYPE_MOUSE_MOTION,GODOT_INPUT_EVENT_TYPE_MOUSE_BUTTON,GODOT_INPUT_EVENT_TYPE_JOYPAD_MOTION,GODOT_INPUT_EVENT_TYPE_JOYPAD_BUTTON,GODOT_INPUT_EVENT_TYPE_SCREEN_TOUCH,GODOT_INPUT_EVENT_TYPE_SCREEN_DRAG,GODOT_INPUT_EVENT_TYPE_ACTION,GODOT_INPUT_EVENT_TYPE_TYPE_MAX" },
  { "godot_method_rpc_mode", 1492, _cffi_prim_int(sizeof(godot_method_rpc_mode), ((godot_method_rpc_mode)-1) <= 0),
    "GODOT_METHOD_RPC_MODE_DISABLED,GODOT_METHOD_RPC_MODE_REMOTE,GODOT_METHOD_RPC_MODE_SYNC,GODOT_METHOD_RPC_MODE_MASTER,GODOT_METHOD_RPC_MODE_SLAVE" },
  { "godot_property_hint", 1505, _cffi_prim_int(sizeof(godot_property_hint), ((godot_property_hint)-1) <= 0),
    "GODOT_PROPERTY_HINT_NONE,GODOT_PROPERTY_HINT_RANGE,GODOT_PROPERTY_HINT_EXP_RANGE,GODOT_PROPERTY_HINT_ENUM,GODOT_PROPERTY_HINT_EXP_EASING,GODOT_PROPERTY_HINT_LENGTH,GODOT_PROPERTY_HINT_SPRITE_FRAME,GODOT_PROPERTY_HINT_KEY_ACCEL,GODOT_PROPERTY_HINT_FLAGS,GODOT_PROPERTY_HINT_LAYERS_2D_RENDER,GODOT_PROPERTY_HINT_LAYERS_2D_PHYSICS,GODOT_PROPERTY_HINT_LAYERS_3D_RENDER,GODOT_PROPERTY_HINT_LAYERS_3D_PHYSICS,GODOT_PROPERTY_HINT_FILE,GODOT_PROPERTY_HINT_DIR,GODOT_PROPERTY_HINT_GLOBAL_FILE,GODOT_PROPERTY_HINT_GLOBAL_DIR,GODOT_PROPERTY_HINT_RESOURCE_TYPE,GODOT_PROPERTY_HINT_MULTILINE_TEXT,GODOT_PROPERTY_HINT_COLOR_NO_ALPHA,GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSY,GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS,GODOT_PROPERTY_HINT_OBJECT_ID,GODOT_PROPERTY_HINT_TYPE_STRING,GODOT_PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE,GODOT_PROPERTY_HINT_METHOD_OF_VARIANT_TYPE,GODOT_PROPERTY_HINT_METHOD_OF_BASE_TYPE,GODOT_PROPERTY_HINT_METHOD_OF_INSTANCE,GODOT_PROPERTY_HINT_METHOD_OF_SCRIPT,GODOT_PROPERTY_HINT_PROPERTY_OF_VARIANT_TYPE,GODOT_PROPERTY_HINT_PROPERTY_OF_BASE_TYPE,GODOT_PROPERTY_HINT_PROPERTY_OF_INSTANCE,GODOT_PROPERTY_HINT_PROPERTY_OF_SCRIPT,GODOT_PROPERTY_HINT_MAX" },
  { "godot_property_usage_flags", 1506, _cffi_prim_int(sizeof(godot_property_usage_flags), ((godot_property_usage_flags)-1) <= 0),
    "GODOT_PROPERTY_USAGE_STORAGE,GODOT_PROPERTY_USAGE_EDITOR,GODOT_PROPERTY_USAGE_NETWORK,GODOT_PROPERTY_USAGE_EDITOR_HELPER,GODOT_PROPERTY_USAGE_CHECKABLE,GODOT_PROPERTY_USAGE_CHECKED,GODOT_PROPERTY_USAGE_INTERNATIONALIZED,GODOT_PROPERTY_USAGE_GROUP,GODOT_PROPERTY_USAGE_CATEGORY,GODOT_PROPERTY_USAGE_STORE_IF_NONZERO,GODOT_PROPERTY_USAGE_STORE_IF_NONONE,GODOT_PROPERTY_USAGE_NO_INSTANCE_STATE,GODOT_PROPERTY_USAGE_RESTART_IF_CHANGED,GODOT_PROPERTY_USAGE_SCRIPT_VARIABLE,GODOT_PROPERTY_USAGE_STORE_IF_NULL,GODOT_PROPERTY_USAGE_ANIMATE_AS_TRIGGER,GODOT_PROPERTY_USAGE_UPDATE_ALL_IF_MODIFIED,GODOT_PROPERTY_USAGE_DEFAULT,GODOT_PROPERTY_USAGE_DEFAULT_INTL,GODOT_PROPERTY_USAGE_NOEDITOR" },
  { "godot_variant_type", 1520, _cffi_prim_int(sizeof(godot_variant_type), ((godot_variant_type)-1) <= 0),
    "GODOT_VARIANT_TYPE_NIL,GODOT_VARIANT_TYPE_BOOL,GODOT_VARIANT_TYPE_INT,GODOT_VARIANT_TYPE_REAL,GODOT_VARIANT_TYPE_STRING,GODOT_VARIANT_TYPE_VECTOR2,GODOT_VARIANT_TYPE_RECT2,GODOT_VARIANT_TYPE_VECTOR3,GODOT_VARIANT_TYPE_TRANSFORM2D,GODOT_VARIANT_TYPE_PLANE,GODOT_VARIANT_TYPE_QUAT,GODOT_VARIANT_TYPE_RECT3,GODOT_VARIANT_TYPE_BASIS,GODOT_VARIANT_TYPE_TRANSFORM,GODOT_VARIANT_TYPE_COLOR,GODOT_VARIANT_TYPE_IMAGE,GODOT_VARIANT_TYPE_NODE_PATH,GODOT_VARIANT_TYPE_RID,GODOT_VARIANT_TYPE_OBJECT,GODOT_VARIANT_TYPE_INPUT_EVENT,GODOT_VARIANT_TYPE_DICTIONARY,GODOT_VARIANT_TYPE_ARRAY,GODOT_VARIANT_TYPE_POOL_BYTE_ARRAY,GODOT_VARIANT_TYPE_POOL_INT_ARRAY,GODOT_VARIANT_TYPE_POOL_REAL_ARRAY,GODOT_VARIANT_TYPE_POOL_STRING_ARRAY,GODOT_VARIANT_TYPE_POOL_VECTOR2_ARRAY,GODOT_VARIANT_TYPE_POOL_VECTOR3_ARRAY,GODOT_VARIANT_TYPE_POOL_COLOR_ARRAY" },
};

static const struct _cffi_typename_s _cffi_typenames[] = {
  { "cffi_handle", 114 },
  { "godot_array", 1483 },
  { "godot_basis", 1484 },
  { "godot_bool", 607 },
  { "godot_class_constructor", 1544 },
  { "godot_color", 1485 },
  { "godot_dictionary", 1486 },
  { "godot_error", 1487 },
  { "godot_image", 1488 },
  { "godot_image_format", 1489 },
  { "godot_input_event", 1490 },
  { "godot_input_event_type", 1481 },
  { "godot_instance_create_func", 442 },
  { "godot_instance_destroy_func", 443 },
  { "godot_instance_method", 449 },
  { "godot_int", 173 },
  { "godot_method_attributes", 448 },
  { "godot_method_bind", 1491 },
  { "godot_method_rpc_mode", 1492 },
  { "godot_native_init_options", 1493 },
  { "godot_native_terminate_options", 1494 },
  { "godot_node_path", 1495 },
  { "godot_object", 1552 },
  { "godot_plane", 1496 },
  { "godot_pool_byte_array", 1497 },
  { "godot_pool_color_array", 1498 },
  { "godot_pool_int_array", 1499 },
  { "godot_pool_real_array", 1500 },
  { "godot_pool_string_array", 1501 },
  { "godot_pool_vector2_array", 1502 },
  { "godot_pool_vector3_array", 1503 },
  { "godot_property_attributes", 1504 },
  { "godot_property_get_func", 456 },
  { "godot_property_hint", 1505 },
  { "godot_property_set_func", 455 },
  { "godot_property_usage_flags", 1506 },
  { "godot_quat", 1507 },
  { "godot_real", 41 },
  { "godot_rect2", 1508 },
  { "godot_rect3", 1509 },
  { "godot_rid", 1510 },
  { "godot_signal", 1511 },
  { "godot_signal_argument", 1513 },
  { "godot_string", 1515 },
  { "godot_transform", 1517 },
  { "godot_transform2d", 1516 },
  { "godot_variant", 1452 },
  { "godot_variant_type", 1520 },
  { "godot_vector2", 107 },
  { "godot_vector3", 111 },
  { "pybind_prop_info", 1522 },
};

static const struct _cffi_type_context_s _cffi_type_context = {
  _cffi_types,
  _cffi_globals,
  _cffi_fields,
  _cffi_struct_unions,
  _cffi_enums,
  _cffi_typenames,
  797,  /* num_globals */
  38,  /* num_struct_unions */
  10,  /* num_enums */
  51,  /* num_typenames */
  NULL,  /* no includes */
  1555,  /* num_types */
  1,  /* flags */
};

#ifdef __GNUC__
#  pragma GCC visibility push(default)  /* for -fvisibility= */
#endif

#ifdef PYPY_VERSION
PyMODINIT_FUNC
_cffi_pypyinit_pythonscriptcffi(const void *p[])
{
    if (((intptr_t)p[0]) >= 0x0A03) {
        _cffi_call_python_org = (void(*)(struct _cffi_externpy_s *, char *))p[1];
    }
    p[0] = (const void *)0x2701;
    p[1] = &_cffi_type_context;
}
#  ifdef _MSC_VER
     PyMODINIT_FUNC
#  if PY_MAJOR_VERSION >= 3
     PyInit_pythonscriptcffi(void) { return NULL; }
#  else
     initpythonscriptcffi(void) { }
#  endif
#  endif
#elif PY_MAJOR_VERSION >= 3
PyMODINIT_FUNC
PyInit_pythonscriptcffi(void)
{
  return _cffi_init("pythonscriptcffi", 0x2701, &_cffi_type_context);
}
#else
PyMODINIT_FUNC
initpythonscriptcffi(void)
{
  _cffi_init("pythonscriptcffi", 0x2701, &_cffi_type_context);
}
#endif

#ifdef __GNUC__
#  pragma GCC visibility pop
#endif
