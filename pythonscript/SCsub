import os, glob
from SCons.Errors import UserError
Import('env')

python_backend = ARGUMENTS.get('PYTHONSCRIPT_BACKEND', 'cpython').lower()
if python_backend not in ('cpython', 'pypy'):
    raise UserError('PYTHONSCRIPT_BACKEND should be `cpython` (default) or `pypy`')

if python_backend == 'cpython':
    try:
        python_lib = File(glob.glob('cpython/libpython*.so.*')[0])
    except IndexError:
        raise UserError("Cannot find `%s/cpython/libpython*.so.*`, has CPython been compiled ?" % os.getcwd())
else:
    raise UserError("Pythonscript's pypy backend not supported yet :'-(")

module_env = env.Clone()
module_env.Append(CXXFLAGS='-I ' + Dir('.').path)
module_env.Append(CXXFLAGS='-I ' + Dir('cpython/').path)
module_env.Append(CXXFLAGS='-I ' + Dir('cpython/Include').path)
module_env.Append(CXXFLAGS='-I ' + Dir('pybind11/include/').path)
module_env.Append(CXXFLAGS='-std=c++11')
module_env.Append(CXXFLAGS='-pthread -DDEBUG=1 -fwrapv -Wall -Wstrict-prototypes -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -Bsymbolic-functions -Wformat -Werror=format-security'.split())

# libpythonX.Ym.so.1.0 will be in the same directory as the godot binary,
# hence we need to inform the binary to look there.
env.Append(LINKFLAGS=["-Wl,-rpath,'$$ORIGIN'"])

#x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.5m -c pythonscriptcffi.c -o ./pythonscriptcffi.o
#x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 ./pythonscriptcffi.o -lpython3.5m -o ./pythonscriptcffi.so

sources = [
    "cffi_bindings/pythonscriptcffi.gen.cpp",
    "register_types.cpp",
    "py_language.cpp",
    "py_editor.cpp",
    "py_debug.cpp",
    "py_script.cpp",
    "py_instance.cpp",
    "py_loader.cpp"
]

if ARGUMENTS.get('PYTHONSCRIPT_SHARED', 'no') == 'yes':
    shared_module_env = module_env.Clone()
    shared_module_env['LIBS'] = [python_lib]
    shared_module_env.Append(CXXFLAGS='-fPIC')
    shared_lib = shared_module_env.SharedLibrary(target='#bin/pythonscript', source=sources)
    # Scons needs the name of the lib with custom suffix (e.g. ".x11.tools.64")
    # but without the final ".so"
    shared_lib_shim = shared_lib[0].name.rsplit('.', 1)[0]
    env.Append(LIBS=[shared_lib_shim, 'util'])
    env.Append(LIBPATH=['#bin'])
else:
    env.Append(LIBS=[python_lib, 'util'])
    for src in sources:
        module_env.add_source_files(env.modules_sources, src)
