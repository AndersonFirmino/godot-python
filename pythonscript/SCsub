import os
from SCons.Errors import UserError
Import('env')

python_backend = ARGUMENTS.get('PYTHONSCRIPT_BACKEND', 'cpython').lower()
if python_backend not in ('cpython', 'pypy'):
    raise UserError('PYTHONSCRIPT_BACKEND should be `cpython` (default) or `pypy`')

if python_backend == 'cpython':
# CFFI import system complains it doesn't have a libpython.so with static build
#    python_lib = File("cpython/libpython3.6dm.a")
    python_lib = File("cpython/libpython3.6dm.so")
else:
    raise UserError("Pythonscript's pypy backend not supported yet :'-(")

module_env = env.Clone()
module_env.Append(CXXFLAGS='-I ' + Dir('.').path)
module_env.Append(CXXFLAGS='-I ' + Dir('cpython/').path)
module_env.Append(CXXFLAGS='-I ' + Dir('cpython/Include').path)
module_env.Append(CXXFLAGS='-I ' + Dir('pybind11/include/').path)
module_env.Append(CXXFLAGS='-std=c++11')
module_env.Append(CXXFLAGS='-pthread -DDEBUG=1 -fwrapv -Wall -Wstrict-prototypes -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -Bsymbolic-functions -Wformat -Werror=format-security'.split())

#x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.5m -c pythonscriptcffi.c -o ./pythonscriptcffi.o
#x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 ./pythonscriptcffi.o -lpython3.5m -o ./pythonscriptcffi.so

sources = [
	"cffi_bindings/pythonscriptcffi.cpp",
	"static_bindings.cpp",
	"register_types.cpp",
	"py_language.cpp",
	"py_editor.cpp",
	"py_debug.cpp",
	"py_script.cpp",
	"py_instance.cpp",
	"py_loader.cpp"
]
# Include autogenerated binding files
#if os.path.exists('bindings.gen.cpp'):
#	sources.append('bindings.gen.cpp')
#elif os.path.exists('bindings.gen'):
#	for src in os.listdir('bindings.gen'):
#		if src.endswith('.cpp'):
#			sources.append('bindings.gen/%s' % src)
#else:
#    raise UserError("No bindings.gen found, use "
#    "`python tools/generate_bindings.py tools/api.json  -o pythonscript/bindings.gen.cpp`"
#    " to generate them")

if ARGUMENTS.get('PYTHONSCRIPT_SHARED', 'no') == 'yes':
	shared_module_env = module_env.Clone()
	shared_module_env['LIBS'] = [python_lib]
	shared_module_env.Append(CXXFLAGS='-fPIC')
	shared_lib = shared_module_env.SharedLibrary(target='#bin/pythonscript', source=sources)
	# Scons needs the name of the lib with custom suffix (e.g. ".x11.tools.64")
	# but without the final ".so"
	shared_lib_shim = shared_lib[0].name.rsplit('.', 1)[0]
	env.Append(LIBS=[shared_lib_shim, 'util'])
	env.Append(LIBPATH=['#bin'])
else:
	env.Append(LIBS=[python_lib, 'util'])
	for src in sources:
		module_env.add_source_files(env.modules_sources, src)
