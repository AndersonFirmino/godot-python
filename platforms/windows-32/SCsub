# Worth reading:
# https://docs.python.org/3/faq/windows.html#how-can-i-embed-python-into-a-windows-application
# tl;dr: onyl msvc is supported to link against pythonxx.dll

from __future__ import print_function
import os, glob
from SCons.Errors import UserError


Import('env')


env['bits'] = '32'
env['build_dir'] = Dir('#build/windows-32-%s' % env['backend'])
env.Append(CFLAGS='-m32')


### Godot binary (to run tests) ###


if not env['godot_binary']:
    env['godot_binary'] = File('godot.windows.opt.32.exe')
    env.Command(env['godot_binary'], None,
        'curl -L https://github.com/GodotBuilder/godot-builds/releases/'
        'download/master_20171129-1/godot.windows.opt.32.exe -o ${TARGET}'
    )
    env.NoClean(env['godot_binary'])


### GDnative stuff ###


if not env['gdnative_include_dir']:
    env['gdnative_include_dir'] = Dir('../gdnative/include')
if not env['gdnative_wrapper_lib']:
    env['gdnative_wrapper_lib'] = File('../gdnative/gdnative_wrapper_code.windows.opt.32.lib')
    GDNATIVE_WRAPPER_LIB_URL = (
        'https://github.com/GodotBuilder/godot-builds/releases/'
        'download/master_20171129-1/gdnative_wrapper_code.windows.opt.32.lib'
    )
    env.Command(env['gdnative_wrapper_lib'], None,
        'curl -L %s -o ${TARGET}' % GDNATIVE_WRAPPER_LIB_URL
    )
    env.NoClean(env['gdnative_wrapper_lib'])


### Python interpreter ###


if env['backend'] == 'cpython':
    # Build dir is within the source dir... which is something scons hates !
    # So we merge the two steps together.
    cpython_build = Dir('cpython/PCBuild/win32')
    env.Command(cpython_build, None,
        "git clone https://github.com/python/cpython.git --depth=1 --branch=v3.6.3 --single-branch platforms\\windows-32\\cpython && " +
        "${TARGET}\\..\\get_externals.bat --python=python && " +
        "${TARGET}\\..\\build.bat -p Win32"
    )
    env.NoClean(cpython_build)

    env.Command(env['build_dir'], cpython_build,
        "cp -R ${SOURCE} ${TARGET}"
        + " && ls ${TARGET}"
    )
    env.Append(CFLAGS='-pthread')
    env.Append(CFLAGS='-DBACKEND_CPYTHON')
    env.Append(CFLAGS='-I %s\\..\\..' % cpython_build.path)
    env.Append(CFLAGS='-I %s\\..\\..\\Include' % cpython_build.path)
    env.Append(CFLAGS='-I %s\\..\\..\\PC' % cpython_build.path)
    env.Append(LIBPATH=env['build_dir'].path)
    env.Append(LIBS=['python36'])
    env.Append(LINKFLAGS="-Wl,-rpath,'$$ORIGIN'")
    env.Append(LINKFLAGS='-pthread')

else:  # pypy
    raise UserError("Not supported yet :'-(")
