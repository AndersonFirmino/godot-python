# Worth reading:
# https://docs.python.org/3/faq/windows.html#how-can-i-embed-python-into-a-windows-application
# tl;dr: onyl msvc is supported to link against pythonxx.dll

from __future__ import print_function
import os, glob, shutil
from SCons.Errors import UserError


Import('env')


env['bits'] = '64'
env['build_dir'] = Dir('#build/windows-64-%s' % env['backend'])


### Godot binary (to run tests) ###


if not env['godot_binary']:
    env['godot_binary'] = File('godot.windows.opt.64.exe')
    env.Command(env['godot_binary'], None,
        'curl -L %s/godot.windows.opt.64.exe -o ${TARGET}' %
            env['godot_release_base_url']
    )
    env.NoClean(env['godot_binary'])


### GDnative stuff ###


if not env['gdnative_include_dir']:
    env['gdnative_include_dir'] = Dir('../gdnative/include')
if not env['gdnative_wrapper_lib']:
    env['gdnative_wrapper_lib'] = File('../gdnative/gdnative_wrapper_code.windows.opt.64.lib')
    env.Command(env['gdnative_wrapper_lib'], None,
        'curl -L %s/gdnative_wrapper_code.windows.opt.64.lib -o ${TARGET}' %
            env['godot_release_base_url']
    )
    env.NoClean(env['gdnative_wrapper_lib'])


### Python interpreter ###


if env['backend'] == 'cpython':
    # Build dir is within the source dir... which is something scons hates !
    # So we merge the two steps together.
    cpython_build = Dir('cpython/PCBuild/amd64')
    env.Command(cpython_build, None,
        "git clone https://github.com/python/cpython.git --depth=1 --branch=v3.6.3 --single-branch platforms\\windows-64\\cpython && " +
        "${TARGET}\\..\\get_externals.bat --python=python && " +
        "${TARGET}\\..\\build.bat -p x64"
    )
    env.NoClean(cpython_build)

    def generate_build_dir(target, source, env):
        target = target[0]
        cpython_build = source[0]
        libpythonscript = source[1]
        godot_embedded = source[2]

        if os.path.isdir(target.path):
            shutil.rmtree(target.path)
        os.mkdir(target.path)

        def c(subpath=''):
            return os.path.join(cpython_build.abspath, subpath)

        def p(subpath=''):
            return os.path.join(target.abspath, 'pythonscript', subpath)

        shutil.copytree(c(), p())
        shutil.copy(libpythonscript.path, p())

        if env['compressed_stdlib']:
            raise UserError("Not supported yet :'-(")

        if env['dev_dyn']:
            raise UserError("Not supported yet :'-(")
        else:
            shutil.copytree(godot_embedded.path, p('lib/python3.6/site-packages/godot'))

    env['generate_build_dir'] = generate_build_dir
    env['build_site_packages'] = Dir('%s/lib/python3.6/site-packages' % env['build_dir'])
    env['cpython_build'] = cpython_build
    env.Append(CFLAGS='-DBACKEND_CPYTHON')
    env.Append(CFLAGS='-I %s\\..\\..' % cpython_build.path)
    env.Append(CFLAGS='-I %s\\..\\..\\Include' % cpython_build.path)
    env.Append(CFLAGS='-I %s\\..\\..\\PC' % cpython_build.path)
    env.Append(LIBPATH=cpython_build.path)
    env.Append(LIBS=['python36'])

else:  # pypy
    raise UserError("Not supported yet :'-(")
