# Worth reading:
# https://docs.python.org/3/faq/windows.html#how-can-i-embed-python-into-a-windows-application
# tl;dr: onyl msvc is supported to link against pythonxx.dll

from __future__ import print_function
import os, glob, shutil
import zipfile
import subprocess
from SCons.Errors import UserError


Import('env')


env['bits'] = '64'
env['build_dir'] = Dir('#build/windows-64-%s' % env['backend'])


### Godot binary (to run tests) ###


if not env['godot_binary']:
    env['godot_binary'] = File('godot.windows.opt.64.exe')
    env.Command(env['godot_binary'], None,
        'curl -L %s/godot.windows.opt.64.exe -o ${TARGET}' %
            env['godot_release_base_url']
    )
    env.NoClean(env['godot_binary'])


### GDnative stuff ###


if not env['gdnative_include_dir']:
    env['gdnative_include_dir'] = Dir('../gdnative/include')
if not env['gdnative_wrapper_lib']:
    env['gdnative_wrapper_lib'] = File('../gdnative/gdnative_wrapper_code.windows.opt.64.lib')
    env.Command(env['gdnative_wrapper_lib'], None,
        'curl -L %s/gdnative_wrapper_code.windows.opt.64.lib -o ${TARGET}' %
            env['godot_release_base_url']
    )
    env.NoClean(env['gdnative_wrapper_lib'])


### Python interpreter ###


if env['backend'] == 'cpython':
    CPYTHON_SRC_NAME = 'python-3.6.4-embed-amd64'
    CPYTHON_SRC_ARCHIVE = File('%s.zip' % CPYTHON_SRC_NAME)
    CPYTHON_SRC_ARCHIVE_URL = 'https://www.python.org/ftp/python/3.6.4/%s' % CPYTHON_SRC_ARCHIVE
    cpython_extra_dir = Dir('python-3.6.4-extras')

    env.Command(CPYTHON_SRC_ARCHIVE, None,
        "curl -L %s -o ${TARGET}" % CPYTHON_SRC_ARCHIVE_URL
    )
    env.NoClean(CPYTHON_SRC_ARCHIVE)

    cpython_build = Dir(CPYTHON_SRC_NAME)
    def generate_cpython_build(target, source, env):
        target = target[0]
        zip_ref = zipfile.ZipFile(source[0].abspath, 'r')
        zip_ref.extractall(target.abspath)
        zip_ref.close()
        shutil.copytree('%s/site-packages' % cpython_extra_dir, '%s/site-packages' % target)
        shutil.copy('%s/vcruntime140.dll' % cpython_extra_dir, '%s/vcruntime140.dll' % target)
        # Install cffi through pip
        subprocess.call('cd %s && python.exe -m pip install cffi' % target.abspath, shell=True)
    env.Command(cpython_build, CPYTHON_SRC_ARCHIVE,
        generate_cpython_build
    )
    env.NoClean(cpython_build)

    def generate_build_dir(target, source, env):
        target = target[0]
        cpython_build = source[0]
        libpythonscript = source[1]
        godot_embedded = source[2]

        if os.path.isdir(target.path):
            shutil.rmtree(target.path)
        os.mkdir(target.path)

        def p(subpath=''):
            return os.path.join(target.abspath, 'pythonscript', subpath)

        shutil.copytree(cpython_build.abspath, p())

        shutil.copy(libpythonscript.path, p())
        open(p('.gdignore'), 'w').close()

        if env['dev_dyn']:
            os.symlink(godot_embedded.abspath, p('godot'))
        else:
            shutil.copytree(godot_embedded.path, p('godot'))

    env['generate_build_dir'] = generate_build_dir
    env['backend_dep'] = cpython_build
    env.Append(CFLAGS='-DBACKEND_CPYTHON')
    env.Append(CFLAGS='-I %s\\include' % cpython_extra_dir.path)
    env.Append(LIBPATH=cpython_build.path)
    env.Append(LIBS=['python36'])

else:  # pypy
    raise UserError("Not supported yet :'-(")
