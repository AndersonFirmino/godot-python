from __future__ import print_function
import os, glob
from SCons.Errors import UserError


Import('env')


env['bits'] = '64'
env['build_dir'] = Dir('#build/windows-64-%s' % env['backend'])


### Godot binary (to run tests) ###


if not env['godot_binary']:
    env['godot_binary'] = File('godot.windows.opt.64.exe')
    env.Command(env['godot_binary'], None,
        'curl -L https://github.com/GodotBuilder/godot-builds/releases/'
        'download/master_20171129-1/godot.windows.opt.64.exe -o ${TARGET}'
    )
    env.NoClean(env['godot_binary'])


### GDnative stuff ###


if not env['gdnative_include_dir']:
    env['gdnative_include_dir'] = Dir('../gdnative/include')
if not env['gdnative_wrapper_lib']:
    env['gdnative_wrapper_lib'] = File('../gdnative/gdnative_wrapper_code.windows.opt.64.lib')
    GDNATIVE_WRAPPER_LIB_URL = (
        'https://github.com/GodotBuilder/godot-builds/releases/'
        'download/master_20171129-1/gdnative_wrapper_code.windows.opt.64.lib'
    )
    env.Command(env['gdnative_wrapper_lib'], None,
        'curl -L %s -o ${TARGET}' % GDNATIVE_WRAPPER_LIB_URL
    )
    env.NoClean(env['gdnative_wrapper_lib'])


### Python interpreter ###


if env['backend'] == 'cpython':
    cpython_src = Dir('cpython')
    env.Command(cpython_src, None,
        "git clone https://github.com/python/cpython.git --depth=1 --branch=v3.6.3 --single-branch ${TARGET}"
    )
    env.NoClean(cpython_src)

    cpython_build = Dir('cpython_build')
    # TODO: allow to compile cpython with `--with-pydebug` ?
    # Compile CPython and install cffi through pip
    env.Command(cpython_build, cpython_src,
        "cd ${SOURCE} && " +
        "PCbuild/get_externals.bat && " +
        "PCbuild\\build.bat -p x64"
    )
    env.NoClean(cpython_build)

    env.Command(env['build_dir'], cpython_build,
        "mkdir ${TARGET} && " +
        "cp -R ${SOURCE}\\include ${TARGET}\\include && " +
        "cp -R ${SOURCE}\\lib ${TARGET}"
    )
    env.Append(CFLAGS='-DBACKEND_CPYTHON')
    env.Append(CFLAGS='-I %s/include/python3.6m/' % cpython_build.path)
    env.Append(LIBPATH='%s/lib' % cpython_build.path)
    env.Append(LIBS=['python3'])
    env.Append(LINKFLAGS=["-Wl,-rpath,'$$ORIGIN/lib'"])

else:  # pypy
    raise UserError("Not supported yet :'-(")

    # PYPY_SRC_NAME = 'pypy3.5-5.9-beta-linux_x86_64-portable'
    # PYPY_SRC_ARCHIVE = '%s.tar.bz2' % PYPY_SRC_NAME
    # PYPY_SRC_ARCHIVE_URL = 'https://bitbucket.org/squeaky/portable-pypy/downloads/%s' % PYPY_SRC_ARCHIVE

    # backend_src = Dir(PYPY_SRC_NAME)

    # env.Command(PYPY_SRC_ARCHIVE, None,
    #     "curl -L %s -o ${TARGET}" % PYPY_SRC_ARCHIVE_URL
    # )
    # env.NoClean(PYPY_SRC_ARCHIVE)
    # env.Command(backend_src, PYPY_SRC_ARCHIVE,
    #     "tar xf ${SOURCE} -C ${TARGET.srcdir}"
    # )

    # env.Command(env['build_dir'], backend_src,
    #     "mkdir ${TARGET} && " +
    #     "cp -R ${SOURCE}/include ${TARGET}/include && " +
    #     "cp -R ${SOURCE}/lib ${TARGET}/lib && " +
    #     "cp -R ${SOURCE}/lib_pypy ${TARGET}/lib_pypy && " +
    #     "cp -R ${SOURCE}/lib-python ${TARGET}/lib-python && " +
    #     "cp -R ${SOURCE}/bin/libpypy3-c.so ${TARGET}/lib"
    # )

    # env.Append(CFLAGS='-DBACKEND_PYPY')
    # env.Append(CFLAGS='-I %s/include' % backend_src.path)
    # env.Append(LIBPATH='%s/bin' % backend_src.path)
    # env.Append(LIBS=['pypy3-c'])
    # env.Append(LINKFLAGS=["-Wl,-rpath,'$$ORIGIN/lib'"])
