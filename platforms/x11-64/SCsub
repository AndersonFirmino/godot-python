from __future__ import print_function
import os, glob
from SCons.Errors import UserError


Import('env')


env['bits'] = '64'
env['build_dir'] = Dir('#build/x11-64-%s' % env['backend'])
env.Append(CFLAGS='-m64')


### Godot binary (to run tests) ###


if not env['godot_binary']:
    env['godot_binary'] = File('godot.x11.opt.64')
    env.Command(env['godot_binary'], None,
        'curl -L %s/godot.x11.opt.64 -o ${TARGET} && chmod 750 ${TARGET}' %
            env['godot_release_base_url']
    )
    env.NoClean(env['godot_binary'])


### GDnative stuff ###


if not env['gdnative_include_dir']:
    env['gdnative_include_dir'] = Dir('../gdnative/include')
if not env['gdnative_wrapper_lib']:
    env['gdnative_wrapper_lib'] = File('../gdnative/libgdnative_wrapper_code.x11.opt.64.a')
    env.Command(env['gdnative_wrapper_lib'], None,
        'curl -L %s/libgdnative_wrapper_code.x11.opt.64.a -o ${TARGET}' %
            env['godot_release_base_url']
    )
    env.NoClean(env['gdnative_wrapper_lib'])


### Python interpreter ###


if env['backend'] == 'cpython':
    cpython_src = Dir('cpython')
    env.Command(cpython_src, None,
        "git clone https://github.com/python/cpython.git --depth=1 --branch=v3.6.3 --single-branch ${TARGET}"
    )
    env.NoClean(cpython_src)

    cpython_build = Dir('cpython_build')
    # TODO: allow to compile cpython with `--with-pydebug` ?
    # Compile CPython and install cffi through pip
    env.Command(cpython_build, cpython_src,
        "cd ${SOURCE} && " +
        "echo Configuring CPython... && "
        "1>/dev/null ./configure --enable-shared --prefix=${TARGET.get_abspath()} && " +
        "echo Building CPython... && "
        "1>/dev/null make -j4 && " +
        "echo Installing CPython in ${TARGET.get_abspath()}... && "
        "1>/dev/null make install && " +
        "LD_LIBRARY_PATH=${TARGET.get_abspath()}/lib ${TARGET.get_abspath()}/bin/pip3 install cffi"
    )
    env.NoClean(cpython_build)

    env['build_site_packages'] = Dir('%s/lib/python3.6/site-packages' % env['build_dir'])
    env['cpython_build'] = cpython_build
    env.Append(CFLAGS='-DBACKEND_CPYTHON')
    env.Append(CFLAGS='-I %s/include/python3.6m/' % cpython_build.path)
    env.Append(LIBPATH='%s/lib' % cpython_build.path)
    env.Append(LIBS=['python3.6m'])
    env.Append(LINKFLAGS=["-Wl,-rpath,'$$ORIGIN/lib'"])

else:  # pypy

    PYPY_SRC_NAME = 'pypy3.5-5.9-beta-linux_x86_64-portable'
    PYPY_SRC_ARCHIVE = '%s.tar.bz2' % PYPY_SRC_NAME
    PYPY_SRC_ARCHIVE_URL = 'https://bitbucket.org/squeaky/portable-pypy/downloads/%s' % PYPY_SRC_ARCHIVE

    backend_src = Dir(PYPY_SRC_NAME)

    env.Command(PYPY_SRC_ARCHIVE, None,
        "curl -L %s -o ${TARGET}" % PYPY_SRC_ARCHIVE_URL
    )
    env.NoClean(PYPY_SRC_ARCHIVE)
    env.Command(backend_src, PYPY_SRC_ARCHIVE,
        "tar xf ${SOURCE} -C ${TARGET.srcdir}"
    )

    env.Command(env['build_dir'], backend_src,
        "mkdir -p ${TARGET} && " +
        "cp -fR ${SOURCE}/include ${TARGET}/include && " +
        "cp -fR ${SOURCE}/lib ${TARGET}/lib && " +
        "cp -fR ${SOURCE}/lib_pypy ${TARGET}/lib_pypy && " +
        "cp -fR ${SOURCE}/lib-python ${TARGET}/lib-python && " +
        "cp -fR ${SOURCE}/bin/libpypy3-c.so ${TARGET}/lib"
    )

    env['build_site_packages'] = Dir('%s/lib-python/lib-python/3/site-packages' % env['build_dir'])
    env.Append(CFLAGS='-DBACKEND_PYPY')
    env.Append(CFLAGS='-I %s/include' % backend_src.path)
    env.Append(LIBPATH='%s/bin' % backend_src.path)
    env.Append(LIBS=['pypy3-c'])
    env.Append(LINKFLAGS=["-Wl,-rpath,'$$ORIGIN/lib'"])
